<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Vaibhav Sagar's blog</title>
    <link href="http://vaibhavsagar.com/atom.xml" rel="self" />
    <link href="http://vaibhavsagar.com" />
    <id>http://vaibhavsagar.com/atom.xml</id>
    <author>
        <name>Vaibhav Sagar</name>
        <email>vaibhavsagar@gmail.com</email>
    </author>
    <updated>2018-04-08T00:00:00Z</updated>
    <entry>
    <title>IHaskell on CoCalc!</title>
    <link href="http://vaibhavsagar.com/blog/2018/04/08/ihaskell-cocalc/index.html" />
    <id>http://vaibhavsagar.com/blog/2018/04/08/ihaskell-cocalc/index.html</id>
    <published>2018-04-08T00:00:00Z</published>
    <updated>2018-04-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on  8 April 2018
    
</div>
<div class="info">
    
        Tags: <a href="/blog/tags/programming/index.html">programming</a>, <a href="/blog/tags/haskell/index.html">haskell</a>
    
</div>

<p>IHaskell is now available on <a href="https://cocalc.com/">CoCalc</a>! I’m excited that there are even more options for creating your own IHaskell notebooks without having to install anything.</p>
<p>This is the result of a long collaboration with the lovely people at CoCalc, particularly <a href="https://wstein.org/">William Stein</a> and <a href="http://harald.schil.ly/">Harald Schilly</a>. I’d like to say a little about how this happened, but if you’re not interested you can stop reading here!</p>
<p>During the wonderful and magical time that was my batch at the <a href="https://www.recurse.com/scout/click?t=5ac465e5d3396a7e491e42afac4c5c90">Recurse Center</a>, I fulfilled a long-term goal of <a href="https://www.youtube.com/watch?v=wsNnP3we_R4">speaking at the NYHUG</a>. I was particularly enthusiastic about IHaskell, and <a href="http://gbaz.github.io/">Gershom</a> mentioned that people at SageMathCloud were interested in <a href="https://github.com/sagemathinc/cocalc/issues/125">getting it working</a> and offered to put me in touch.</p>
<p>I immediately encountered an issue where <a href="https://github.com/gibiansky/IHaskell/issues/694">IHaskell wasn’t handling all valid inputs</a> and complained about it on <a href="https://www.recurse.com/blog/112-how-rc-uses-zulip">Zulip</a>. I woke up the next day to find that <a href="https://twitter.com/horrorcheck">Libby Horacek</a> had gone ahead and <a href="https://github.com/gibiansky/IHaskell/pull/697">fixed the issue</a>. What a legend! This was also my first open-source contribution to a Haskell project ever.</p>
<p>I then tried the obvious thing, <code>stack build &amp;&amp; stack install</code> which resulted in a working notebook but an impossible deploy, because they needed the whole installation to be self-contained whereas Stack stores some things in <code>~/.stack</code> and other things in <code>&lt;project&gt;/.stack-work</code>. I (incorrectly) assumed that having <code>ihaskell</code> be a static binary would fix the issue, so then I spent a few weeks faffing around with <a href="https://www.fpcomplete.com/blog/2016/10/static-compilation-with-stack">this</a> which resulted in a static binary and made no difference otherwise.</p>
<p>Frustrated that my first attempt failed, I went silent for a while. My batch ended, I was unemployed for a few more months, I started a new role, and I moved to a new country. Because <a href="https://github.com/gibiansky/IHaskell/pull/716#issuecomment-305934463">I asked at the right time</a>, I became a maintainer of IHaskell and we finally got GHC 8 support! We also dropped GHC 7.10 support, which was <a href="https://github.com/gibiansky/IHaskell/pull/747">controversial</a>.</p>
<p>In the meantime SageMathCloud rebranded to CoCalc and revamped its infrastructure, and <a href="https://github.com/gibiansky/IHaskell/issues/731">they put the feelers out to try again</a>.</p>
<p>I saw that they were still running GHC 7.10 and went silent again, because I didn’t want to use an old version of IHaskell or have the discussion about installing a newer GHC just so I could fiddle some more. Instead, I worked on keeping IHaskell up-to-date and making it easier to use, with PRs for <a href="https://github.com/gibiansky/IHaskell/pull/735">GHC 8.2</a>, <a href="https://github.com/gibiansky/IHaskell/pull/817">GHC 8.4</a> and supporting installation with Nix.</p>
<p>Despite my best efforts, I was still getting lots of questions about installing IHaskell and I got fed up and <a href="https://twitter.com/vbhvsgr/status/975388161898561536">whinged about it on Twitter</a>. In response, Gershom DMed me to ask how the CoCalc stuff was progressing, after which I got back in touch and asked for a newer version of GHC. They obliged with GHC 8.4.</p>
<p>By this time we had realised that Stack wasn’t going to work, so we tried old-style Cabal and new-style Cabal, which both have similar issues with dependencies in <code>~/.cabal</code>. Finally Harald suggested using <code>cabal sandbox</code> and we were able to come up with a working, self-contained IHaskell install.</p>
<p>This would have been impossible without the patience and generosity of everyone involved. All told, it took almost a year and a half to get this working, which doesn’t come across in the <a href="https://twitter.com/cocalc_com/status/982650432928583680">announcement</a>.</p>
]]></summary>
</entry>
<entry>
    <title>IHaskell on mybinder.org</title>
    <link href="http://vaibhavsagar.com/blog/2018/03/31/ihaskell-mybinder/index.html" />
    <id>http://vaibhavsagar.com/blog/2018/03/31/ihaskell-mybinder/index.html</id>
    <published>2018-03-31T00:00:00Z</published>
    <updated>2018-03-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on 31 March 2018
    
</div>
<div class="info">
    
        Tags: <a href="/blog/tags/haskell/index.html">haskell</a>, <a href="/blog/tags/programming/index.html">programming</a>
    
</div>

<p><a href="https://mybinder.org/">mybinder.org</a> is a website that will freely host a GitHub repository as a collection of interactive Jupyter notebooks. It has excellent built-in support for some of the more popular Jupyter kernels such as Python and Julia, but it also has support for building a <code>Dockerfile</code> of your choosing.</p>
<p>This means that getting an IHaskell installation up and running can be as simple as clicking a link, and I’m happy to report that I’ve gotten this working! You can <a href="https://mybinder.org/v2/gh/gibiansky/IHaskell/7a41fa209d071cf7ff7c4e63dbc9f584006efb0d">try it here</a>.</p>
<p>I started with the simplest thing I could think of, which was to install system dependencies and Jupyter to an Ubuntu container and then run <code>stack install ihaskell</code>. You can see the Dockerfile for that <a href="https://github.com/vaibhavsagar/ihaskell-mybinder/blob/6d093c5cd06cde77e13a5a98ae8ce093ba51fee9/Dockerfile">here</a>.</p>
<p>Once I had that working, my next step was to roll these changes into <a href="https://github.com/gibiansky/IHaskell/pull/848">IHaskell’s <code>Dockerfile</code></a> and now everyone can use IHaskell on mybinder.org!</p>
<p>I’ve also <a href="https://hub.docker.com/r/vaibhavsagar/ihaskell/">pushed an image to Docker Hub</a> that you can use as a base for your own repositories. A minimal example of a valid <code>Dockerfile</code> looks something like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">FROM</span> vaibhavsagar/ihaskell:4afa0aee339e</a></code></pre></div>
<p>Ideally I would also like to get this running with Nix, because that approach results in a much smaller image and is easily extensible just by editing <code>default.nix</code>. I have a small repo that <a href="https://github.com/vaibhavsagar/ihaskell-mybinder-nix">builds but doesn’t run on mybinder.org</a>, and I’ve <a href="https://github.com/jupyterhub/binder/issues/87">opened an issue</a>.</p>
<p>I’m pretty excited about what this means for the Jupyter ecosystem and IHaskell in particular, and I’m looking forward to seeing what other people do with this!</p>
]]></summary>
</entry>
<entry>
    <title>Faking Non-NixOS for Stack</title>
    <link href="http://vaibhavsagar.com/blog/2018/03/17/faking-non-nixos-stack/index.html" />
    <id>http://vaibhavsagar.com/blog/2018/03/17/faking-non-nixos-stack/index.html</id>
    <published>2018-03-17T00:00:00Z</published>
    <updated>2018-03-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on 17 March 2018
    
</div>
<div class="info">
    
        Tags: <a href="/blog/tags/programming/index.html">programming</a>, <a href="/blog/tags/haskell/index.html">haskell</a>, <a href="/blog/tags/nix/index.html">nix</a>
    
</div>

<p>I like most things about NixOS, but one thing I do not like is the way it integrates with <code>stack</code>. Nix’s own Haskell infrastructure works well enough that this is not an issue for my own projects, but sometimes I want to test that the Stack workflow is fine for people using less opinionated distros like Ubuntu.</p>
<p>Fortunately, Nixpkgs includes a handy tool called <code>buildFHSUserEnv</code> which will build a chroot wherein everything is laid out according to the <a href="https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard">Filesystem Hierarcy Standard</a> that most software is accustomed to. This means we can provide an environment with Stack and any dependencies and it will happily run.</p>
<p>Let’s walk through doing this for a package like <a href="https://github.com/gibiansky/IHaskell">IHaskell</a>. We begin by cloning the IHaskell repository and creating a <code>fhsenv.nix</code> with only <code>stack</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode bash"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="bu">let</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2">  <span class="ex">pkgs</span> = import <span class="op">&lt;</span>nixpkgs<span class="op">&gt;</span> <span class="dt">{}</span><span class="kw">;</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3"><span class="kw">in</span> <span class="ex">pkgs.buildFHSUserEnv</span> {</a>
<a class="sourceLine" id="cb1-4" data-line-number="4">  <span class="ex">name</span> = <span class="st">&quot;fhs&quot;</span><span class="kw">;</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5">  <span class="ex">targetPkgs</span> = pkgs: [</a>
<a class="sourceLine" id="cb1-6" data-line-number="6">    <span class="ex">pkgs.haskellPackages.stack</span></a>
<a class="sourceLine" id="cb1-7" data-line-number="7">  ];</a>
<a class="sourceLine" id="cb1-8" data-line-number="8">}</a></code></pre></div>
<p>Entering the chroot and running <code>stack build</code> gives us our first error:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb2-1" data-line-number="1">$ <span class="va">$(</span><span class="ex">nix-build</span> fhsenv.nix<span class="va">)</span><span class="ex">/bin/fhs</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="ex">fhs-chrootenv</span>$ stack build</a>
<a class="sourceLine" id="cb2-3" data-line-number="3"><span class="ex">HttpExceptionRequest</span> Request {</a>
<a class="sourceLine" id="cb2-4" data-line-number="4">  <span class="ex">host</span>                 = <span class="st">&quot;raw.githubusercontent.com&quot;</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5">  <span class="ex">port</span>                 = 443</a>
<a class="sourceLine" id="cb2-6" data-line-number="6">  <span class="ex">secure</span>               = True</a>
<a class="sourceLine" id="cb2-7" data-line-number="7">  <span class="ex">requestHeaders</span>       = []</a>
<a class="sourceLine" id="cb2-8" data-line-number="8">  <span class="ex">path</span>                 = <span class="st">&quot;/fpco/stackage-content/master/stack/stack-setup-2.yaml&quot;</span></a>
<a class="sourceLine" id="cb2-9" data-line-number="9">  <span class="ex">queryString</span>          = <span class="st">&quot;&quot;</span></a>
<a class="sourceLine" id="cb2-10" data-line-number="10">  <span class="ex">method</span>               = <span class="st">&quot;GET&quot;</span></a>
<a class="sourceLine" id="cb2-11" data-line-number="11">  <span class="ex">proxy</span>                = Nothing</a>
<a class="sourceLine" id="cb2-12" data-line-number="12">  <span class="ex">rawBody</span>              = False</a>
<a class="sourceLine" id="cb2-13" data-line-number="13">  <span class="ex">redirectCount</span>        = 10</a>
<a class="sourceLine" id="cb2-14" data-line-number="14">  <span class="ex">responseTimeout</span>      = ResponseTimeoutDefault</a>
<a class="sourceLine" id="cb2-15" data-line-number="15">  <span class="ex">requestVersion</span>       = HTTP/1.1</a>
<a class="sourceLine" id="cb2-16" data-line-number="16">}</a>
<a class="sourceLine" id="cb2-17" data-line-number="17"> <span class="kw">(</span><span class="ex">ConnectionFailure</span> Network.BSD.getProtocolByName: does not exist (no such protocol name: tcp<span class="kw">)</span>)</a></code></pre></div>
<p>Looking through the Nixpkgs issue tracker for similar errors reveals that we need the <code>iana-etc</code> package. Let’s add it:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode nix"><code class="sourceCode bash"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="bu">let</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2">  <span class="ex">pkgs</span> = import <span class="op">&lt;</span>nixpkgs<span class="op">&gt;</span> <span class="dt">{}</span><span class="kw">;</span></a>
<a class="sourceLine" id="cb3-3" data-line-number="3"><span class="kw">in</span> <span class="ex">pkgs.buildFHSUserEnv</span> {</a>
<a class="sourceLine" id="cb3-4" data-line-number="4">  <span class="ex">name</span> = <span class="st">&quot;fhs&quot;</span><span class="kw">;</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5">  <span class="ex">targetPkgs</span> = pkgs: [</a>
<a class="sourceLine" id="cb3-6" data-line-number="6">    <span class="ex">pkgs.haskellPackages.stack</span></a>
<a class="sourceLine" id="cb3-7" data-line-number="7">    <span class="ex">pkgs.iana-etc</span></a>
<a class="sourceLine" id="cb3-8" data-line-number="8">  ];</a>
<a class="sourceLine" id="cb3-9" data-line-number="9">}</a></code></pre></div>
<p>Now it’ll start to download GHC, which takes forever for me. This is the wrong download though, so cancel it and let’s move on. More on this in a bit.</p>
<p>If the download had successfully completed, <code>stack</code> would then have complained that <code>make</code> was unavailable, so we add <code>gnumake</code>. Then it would have complained about the lack of Perl, a missing C compiler, missing <code>libgmp</code>, and no <code>pkg-config</code>, so we add those too. Then it progresses a lot further before it halts, complaining about <code>libtinfo</code> being missing. The closest thing we have is <code>ncurses</code>, so we add that too. Now our expression looks like this:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode nix"><code class="sourceCode bash"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="bu">let</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2">  <span class="ex">pkgs</span> = import <span class="op">&lt;</span>nixpkgs<span class="op">&gt;</span> <span class="dt">{}</span><span class="kw">;</span></a>
<a class="sourceLine" id="cb4-3" data-line-number="3"><span class="kw">in</span> <span class="ex">pkgs.buildFHSUserEnv</span> {</a>
<a class="sourceLine" id="cb4-4" data-line-number="4">  <span class="ex">name</span> = <span class="st">&quot;fhs&quot;</span><span class="kw">;</span></a>
<a class="sourceLine" id="cb4-5" data-line-number="5">  <span class="ex">targetPkgs</span> = pkgs: [</a>
<a class="sourceLine" id="cb4-6" data-line-number="6">    <span class="ex">pkgs.iana-etc</span></a>
<a class="sourceLine" id="cb4-7" data-line-number="7">    <span class="ex">pkgs.haskellPackages.stack</span></a>
<a class="sourceLine" id="cb4-8" data-line-number="8">    <span class="ex">pkgs.gcc</span></a>
<a class="sourceLine" id="cb4-9" data-line-number="9">    <span class="ex">pkgs.gmp</span></a>
<a class="sourceLine" id="cb4-10" data-line-number="10">    <span class="ex">pkgs.gnumake</span></a>
<a class="sourceLine" id="cb4-11" data-line-number="11">    <span class="ex">pkgs.perl</span></a>
<a class="sourceLine" id="cb4-12" data-line-number="12">    <span class="ex">pkgs.pkgconfig</span></a>
<a class="sourceLine" id="cb4-13" data-line-number="13">    <span class="ex">pkgs.ncurses</span></a>
<a class="sourceLine" id="cb4-14" data-line-number="14">  ];</a>
<a class="sourceLine" id="cb4-15" data-line-number="15">}</a></code></pre></div>
<p>This prompts <code>stack</code> to download a different GHC, but the whole process should complete successfully now.</p>
<p>At this point, we’re in luck, because IHaskell has been configured to work with <code>stack --nix</code>, which means the dependencies <code>stack</code> needs are already specified under the <code>nix.packages</code> key in <code>stack.yaml</code>, and we can copy them into <code>fhsenv.nix</code> to speed up the process of building everything. At this point I found that header files in <code>/usr/include</code> weren’t being found, but this was easy to fix by specifying <code>C_INCLUDE_PATH</code> in the <code>profile</code> attribute. I’d recommend commenting out <code>ihaskell-widgets</code> at this point, because it takes an absurdly long time to compile and doesn’t seem to have any interesting dependencies. The complete <code>fhsenv.nix</code> for <code>stack build</code> and <code>stack test</code> looks like this:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode nix"><code class="sourceCode bash"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="bu">let</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2">  <span class="ex">pkgs</span> = import <span class="op">&lt;</span>nixpkgs<span class="op">&gt;</span> <span class="dt">{}</span><span class="kw">;</span></a>
<a class="sourceLine" id="cb5-3" data-line-number="3"><span class="kw">in</span> <span class="ex">pkgs.buildFHSUserEnv</span> {</a>
<a class="sourceLine" id="cb5-4" data-line-number="4">  <span class="ex">name</span> = <span class="st">&quot;fhs&quot;</span><span class="kw">;</span></a>
<a class="sourceLine" id="cb5-5" data-line-number="5">  <span class="ex">targetPkgs</span> = pkgs: [</a>
<a class="sourceLine" id="cb5-6" data-line-number="6">    <span class="ex">pkgs.blas</span></a>
<a class="sourceLine" id="cb5-7" data-line-number="7">    <span class="ex">pkgs.cairo.dev</span></a>
<a class="sourceLine" id="cb5-8" data-line-number="8">    <span class="ex">pkgs.file</span></a>
<a class="sourceLine" id="cb5-9" data-line-number="9">    <span class="ex">pkgs.gcc</span></a>
<a class="sourceLine" id="cb5-10" data-line-number="10">    <span class="ex">pkgs.glib.dev</span></a>
<a class="sourceLine" id="cb5-11" data-line-number="11">    <span class="ex">pkgs.gmp</span></a>
<a class="sourceLine" id="cb5-12" data-line-number="12">    <span class="ex">pkgs.gnumake</span></a>
<a class="sourceLine" id="cb5-13" data-line-number="13">    <span class="ex">pkgs.haskellPackages.stack</span></a>
<a class="sourceLine" id="cb5-14" data-line-number="14">    <span class="ex">pkgs.iana-etc</span></a>
<a class="sourceLine" id="cb5-15" data-line-number="15">    <span class="ex">pkgs.liblapack</span></a>
<a class="sourceLine" id="cb5-16" data-line-number="16">    <span class="ex">pkgs.pango.dev</span></a>
<a class="sourceLine" id="cb5-17" data-line-number="17">    <span class="ex">pkgs.perl</span></a>
<a class="sourceLine" id="cb5-18" data-line-number="18">    <span class="ex">pkgs.pkgconfig</span></a>
<a class="sourceLine" id="cb5-19" data-line-number="19">    <span class="ex">pkgs.ncurses</span></a>
<a class="sourceLine" id="cb5-20" data-line-number="20">    <span class="ex">pkgs.zeromq</span></a>
<a class="sourceLine" id="cb5-21" data-line-number="21">    <span class="ex">pkgs.zlib.dev</span></a>
<a class="sourceLine" id="cb5-22" data-line-number="22">  ];</a>
<a class="sourceLine" id="cb5-23" data-line-number="23">  <span class="ex">profile</span> = <span class="st">&#39;&#39;</span></a>
<a class="sourceLine" id="cb5-24" data-line-number="24">    <span class="bu">export</span> <span class="va">C_INCLUDE_PATH=</span>/usr/include:<span class="va">$C_INClUDE_PATH</span></a>
<a class="sourceLine" id="cb5-25" data-line-number="25">  <span class="st">&#39;&#39;</span>;</a>
<a class="sourceLine" id="cb5-26" data-line-number="26">}</a></code></pre></div>
<p>Of course, building IHaskell is no fun if we can’t install it and see it in action. Providing the Jupyter notebook environment is an additional line:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode nix"><code class="sourceCode bash"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="bu">let</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2">  <span class="ex">pkgs</span> = import <span class="op">&lt;</span>nixpkgs<span class="op">&gt;</span> <span class="dt">{}</span><span class="kw">;</span></a>
<a class="sourceLine" id="cb6-3" data-line-number="3"><span class="kw">in</span> <span class="ex">pkgs.buildFHSUserEnv</span> {</a>
<a class="sourceLine" id="cb6-4" data-line-number="4">  <span class="ex">name</span> = <span class="st">&quot;fhs&quot;</span><span class="kw">;</span></a>
<a class="sourceLine" id="cb6-5" data-line-number="5">  <span class="ex">targetPkgs</span> = pkgs: [</a>
<a class="sourceLine" id="cb6-6" data-line-number="6">    <span class="ex">pkgs.blas</span></a>
<a class="sourceLine" id="cb6-7" data-line-number="7">    <span class="ex">pkgs.cairo.dev</span></a>
<a class="sourceLine" id="cb6-8" data-line-number="8">    <span class="ex">pkgs.file</span></a>
<a class="sourceLine" id="cb6-9" data-line-number="9">    <span class="ex">pkgs.gcc</span></a>
<a class="sourceLine" id="cb6-10" data-line-number="10">    <span class="ex">pkgs.glib.dev</span></a>
<a class="sourceLine" id="cb6-11" data-line-number="11">    <span class="ex">pkgs.gmp</span></a>
<a class="sourceLine" id="cb6-12" data-line-number="12">    <span class="ex">pkgs.gnumake</span></a>
<a class="sourceLine" id="cb6-13" data-line-number="13">    <span class="ex">pkgs.haskellPackages.stack</span></a>
<a class="sourceLine" id="cb6-14" data-line-number="14">    <span class="ex">pkgs.iana-etc</span></a>
<a class="sourceLine" id="cb6-15" data-line-number="15">    <span class="ex">pkgs.liblapack</span></a>
<a class="sourceLine" id="cb6-16" data-line-number="16">    <span class="ex">pkgs.pango.dev</span></a>
<a class="sourceLine" id="cb6-17" data-line-number="17">    <span class="ex">pkgs.perl</span></a>
<a class="sourceLine" id="cb6-18" data-line-number="18">    <span class="ex">pkgs.pkgconfig</span></a>
<a class="sourceLine" id="cb6-19" data-line-number="19">    <span class="kw">(</span><span class="ex">pkgs.python3.withPackages</span> (ps: [ ps.jupyter ps.notebook ]<span class="kw">)</span>)</a>
<a class="sourceLine" id="cb6-20" data-line-number="20">    <span class="ex">pkgs.ncurses</span></a>
<a class="sourceLine" id="cb6-21" data-line-number="21">    <span class="ex">pkgs.zeromq</span></a>
<a class="sourceLine" id="cb6-22" data-line-number="22">    <span class="ex">pkgs.zlib.dev</span></a>
<a class="sourceLine" id="cb6-23" data-line-number="23">  ];</a>
<a class="sourceLine" id="cb6-24" data-line-number="24">  <span class="ex">profile</span> = <span class="st">&#39;&#39;</span></a>
<a class="sourceLine" id="cb6-25" data-line-number="25">    <span class="bu">export</span> <span class="va">C_INCLUDE_PATH=</span>/usr/include:<span class="va">$C_INClUDE_PATH</span></a>
<a class="sourceLine" id="cb6-26" data-line-number="26">  <span class="st">&#39;&#39;</span>;</a>
<a class="sourceLine" id="cb6-27" data-line-number="27">}</a></code></pre></div>
<p>and we can install and run IHaskell as usual:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="ex">fhs-chrootenv</span>$ stack build</a>
<a class="sourceLine" id="cb7-2" data-line-number="2"><span class="ex">fhs-chrootenv</span>$ stack exec -- ihaskell install --stack</a>
<a class="sourceLine" id="cb7-3" data-line-number="3"><span class="ex">fhs-chrootenv</span>$ stack exec -- jupyter notebook</a></code></pre></div>
<p>Cool!</p>
<p>This expression is available <a href="https://github.com/vaibhavsagar/experiments/blob/master/stack-env-nix/ihaskell.nix">on GitHub</a>.</p>
]]></summary>
</entry>
<entry>
    <title>Revisiting 'Monadic Parsing in Haskell'</title>
    <link href="http://vaibhavsagar.com/blog/2018/02/04/revisiting-monadic-parsing-haskell/index.html" />
    <id>http://vaibhavsagar.com/blog/2018/02/04/revisiting-monadic-parsing-haskell/index.html</id>
    <published>2018-02-04T00:00:00Z</published>
    <updated>2018-02-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on  4 February 2018
    
</div>
<div class="info">
    
        Tags: <a href="/blog/tags/haskell/index.html">haskell</a>, <a href="/blog/tags/programming/index.html">programming</a>, <a href="/blog/tags/monads/index.html">monads</a>
    
</div>

<p><em>Translated to <a href="http://clipartmag.com/ru-revisiting-monadic-parsing-haskell">Russian</a> by <a href="http://clipartmag.com/">Clipart Team</a></em></p>
<p><a href="http://www.cs.nott.ac.uk/~pszgmh/pearl.pdf">‘Monadic Parsing in Haskell’</a> is a short paper that laid the groundwork for libraries like Parsec and Attoparsec. Although it was published in 1998 (almost 20 years ago!) it has aged gracefully and the code samples will run with almost no changes. However, the state of the art has advanced since then and I think the use of modern Haskell can make this material simpler to follow and implement.</p>
<p>Monadic parsing in Haskell is what sold me on all three. Before Haskell my experiences with parsing had involved buggy regexes for lexers and wrangling tools like <code>bison</code> and <code>flex</code>, and although I’d heard that Haskell was good for parsing I couldn’t see how this could be the case when I couldn’t find any robust regex libraries! An aside in some documentation pointed me to Attoparsec and when I saw the <a href="https://github.com/bos/attoparsec/blob/master/examples/RFC2616.hs">example RFC2616 parser</a> it seemed like a magic trick. How could it be so small? After a few weeks of trying it myself I was convinced and I’ve never looked back. This was the first application of monads I encountered that actually made my life simpler, and I started to realise that there was more to monads than smugness and being inaccessible to newcomers.</p>
<p>The first change I want to make is the type definition. The paper uses the type</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">newtype</span> <span class="dt">Parser</span> a <span class="fu">=</span> <span class="dt">Parser</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> [(a,<span class="dt">String</span>)])</a></code></pre></div>
<p>and although this is a famous enough definition that it has <a href="http://www.willamette.edu/~fruehr/haskell/seuss.html">its own rhyme</a>, I think the flexibility of lists is wasted here. The authors don’t use it, and instead define a ‘deterministic choice’ operator <code>(+++)</code> that gives at most one result and use that everywhere instead. There is already a perfectly good datatype in Haskell for lists of at most one element, <code>Maybe</code>, so I’ll use that instead of <code>[]</code>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="kw">newtype</span> <span class="dt">Parser</span> a <span class="fu">=</span> <span class="dt">Parser</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (a, <span class="dt">String</span>))</a></code></pre></div>
<p>If we rename <code>String</code> to <code>s</code> and <code>Maybe</code> to <code>m</code>, a more interesting pattern is revealed:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">newtype</span> <span class="dt">Parser</span> s m a <span class="fu">=</span> <span class="dt">Parser</span> (s <span class="ot">-&gt;</span> m (a, s))</a></code></pre></div>
<p>This is <a href="https://hackage.haskell.org/package/transformers/docs/Control-Monad-Trans-State-Strict.html#t:StateT"><code>StateT</code></a>! Recognising this pattern makes instance definitions much easier, so much easier in fact that GHC can do it for us automatically with <code>-XGeneralizedNewtypeDeriving</code>! For completeness I will resist the temptation to do this, but you can try it yourself with</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="ot">{-# LANGUAGE GeneralizedNewtypeDeriving #-}</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2"><span class="kw">newtype</span> <span class="dt">Parser</span> a <span class="fu">=</span> <span class="dt">Parser</span> (<span class="dt">StateT</span> <span class="dt">String</span> <span class="dt">Maybe</span> a) <span class="kw">deriving</span> (<span class="dt">Functor</span>, <span class="dt">Applicative</span>, <span class="dt">Alternative</span>, <span class="dt">Monad</span>)</a></code></pre></div>
<p>The second change is also for completeness: the authors jump straight into the <code>Monad</code> instance without defining <code>Functor</code> and <code>Applicative</code> first. To be fair, the <code>Applicative</code> abstraction hadn’t been <a href="http://www.staff.city.ac.uk/~ross/papers/Applicative.html">discovered</a> yet, and this is also the reason why the authors define <code>mzero</code> and <code>mplus</code> (which they call <code>(++)</code>) instead of the more general <code>Alternative</code> methods <code>empty</code> and <code>(&lt;|&gt;)</code>. Because of our <code>Maybe</code> change, defining <code>Alternative</code> means I won’t need to bother with their <code>(+++)</code>.</p>
<p>Finally, I’ll try to avoid do-notation where possible in favour of a more Applicative style using e.g. <code>&lt;*&gt;</code> (which can be pronounced ‘splat’ if you don’t already have a name for it) because most of these parsers don’t require it.</p>
<p>Let’s begin!</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="ot">{-# LANGUAGE InstanceSigs #-}</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2"></a>
<a class="sourceLine" id="cb5-3" data-line-number="3"><span class="kw">import</span> <span class="dt">Control.Applicative</span> (<span class="dt">Alternative</span>(..))</a>
<a class="sourceLine" id="cb5-4" data-line-number="4"><span class="kw">import</span> <span class="dt">Control.Monad.Trans.State.Strict</span></a>
<a class="sourceLine" id="cb5-5" data-line-number="5"><span class="kw">import</span> <span class="dt">Control.Monad</span> (guard)</a>
<a class="sourceLine" id="cb5-6" data-line-number="6"><span class="kw">import</span> <span class="dt">Data.Char</span> (isSpace, isDigit, ord)</a></code></pre></div>
<p>For convenience I’ve defined an <code>unParser</code> that unwraps a <code>Parser a</code> to its underlying <code>StateT String Maybe a</code>.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="kw">newtype</span> <span class="dt">Parser</span> a <span class="fu">=</span> <span class="dt">Parser</span> {<span class="ot"> unParser ::</span> <span class="dt">StateT</span> <span class="dt">String</span> <span class="dt">Maybe</span> a }</a>
<a class="sourceLine" id="cb6-2" data-line-number="2">runParser <span class="fu">=</span> runStateT <span class="fu">.</span> unParser</a></code></pre></div>
<p><code>fmap</code> is as simple as unwrapping the <code>Parser</code> and using the underlying <code>StateT</code>’s <code>fmap</code>.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Parser</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2"><span class="ot">    fmap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> b</a>
<a class="sourceLine" id="cb7-3" data-line-number="3">    fmap f p <span class="fu">=</span> <span class="dt">Parser</span> <span class="fu">$</span> f <span class="fu">&lt;$&gt;</span> unParser p</a></code></pre></div>
<p>More unwrapping for <code>Applicative</code> and <code>Alternative</code>.</p>
<p>The <a href="https://hackage.haskell.org/package/base/docs/Control-Applicative.html#t:Alternative"><code>Alternative</code></a> typeclass allows us to express the idea of running one parser or another parser, resulting in the first successful parse. <code>empty</code> handles the case where both parsers fail, and <code>(&lt;|&gt;)</code> (which can be pronounced ‘alt’) performs the alternation. This is convenient enough on its own, but <code>Alternative</code> also provides <code>many</code> and <code>some</code> which correspond exactly to <code>many</code> and <code>many1</code> from the paper:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="co">-- many v = some v &lt;|&gt; pure []</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2"><span class="co">-- some v = (:) &lt;$&gt; v &lt;*&gt; many v</span></a></code></pre></div>
<p>but only after replacing <code>[]</code> with <code>Maybe</code> like I’ve done here so that <code>(&lt;|&gt;)</code> corresponds to <code>(+++)</code>.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Applicative</span> <span class="dt">Parser</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2"><span class="ot">    pure ::</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> a</a>
<a class="sourceLine" id="cb9-3" data-line-number="3">    pure a  <span class="fu">=</span> <span class="dt">Parser</span> <span class="fu">$</span> pure a</a>
<a class="sourceLine" id="cb9-4" data-line-number="4"><span class="ot">    (&lt;*&gt;) ::</span> <span class="dt">Parser</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> b</a>
<a class="sourceLine" id="cb9-5" data-line-number="5">    f <span class="fu">&lt;*&gt;</span> a <span class="fu">=</span> <span class="dt">Parser</span> <span class="fu">$</span> unParser f <span class="fu">&lt;*&gt;</span> unParser a</a>
<a class="sourceLine" id="cb9-6" data-line-number="6"></a>
<a class="sourceLine" id="cb9-7" data-line-number="7"><span class="kw">instance</span> <span class="dt">Alternative</span> <span class="dt">Parser</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-8" data-line-number="8"><span class="ot">    empty ::</span> <span class="dt">Parser</span> a</a>
<a class="sourceLine" id="cb9-9" data-line-number="9">    empty   <span class="fu">=</span> <span class="dt">Parser</span> empty</a>
<a class="sourceLine" id="cb9-10" data-line-number="10"><span class="ot">    (&lt;|&gt;) ::</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> a</a>
<a class="sourceLine" id="cb9-11" data-line-number="11">    a <span class="fu">&lt;|&gt;</span> b <span class="fu">=</span> <span class="dt">Parser</span> <span class="fu">$</span> unParser a <span class="fu">&lt;|&gt;</span> unParser b</a></code></pre></div>
<p>The <code>Monad</code> definition is slightly more interesting, because we have to manually construct the <code>StateT</code> value, but this also boils down to unwrapping and rewrapping.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Monad</span> <span class="dt">Parser</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2"><span class="ot">    (&gt;&gt;=) ::</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Parser</span> b) <span class="ot">-&gt;</span> <span class="dt">Parser</span> b</a>
<a class="sourceLine" id="cb10-3" data-line-number="3">    a <span class="fu">&gt;&gt;=</span> f <span class="fu">=</span> <span class="dt">Parser</span> <span class="fu">$</span> <span class="dt">StateT</span> <span class="fu">$</span> \s <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb10-4" data-line-number="4">        (a&#39;, s&#39;) <span class="ot">&lt;-</span> runParser a s</a>
<a class="sourceLine" id="cb10-5" data-line-number="5">        runParser (f a&#39;) s&#39;</a></code></pre></div>
<p>Notice that <code>anyChar</code> is the only function below that manually constructs a <code>Parser</code>, and <code>satisfy</code> is the only one that requires the <code>Monad</code> interface.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="ot">anyChar ::</span> <span class="dt">Parser</span> <span class="dt">Char</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2">anyChar <span class="fu">=</span> <span class="dt">Parser</span> <span class="fu">.</span> <span class="dt">StateT</span> <span class="fu">$</span> \s <span class="ot">-&gt;</span> <span class="kw">case</span> s <span class="kw">of</span></a>
<a class="sourceLine" id="cb11-3" data-line-number="3">    []     <span class="ot">-&gt;</span> empty</a>
<a class="sourceLine" id="cb11-4" data-line-number="4">    (c<span class="fu">:</span>cs) <span class="ot">-&gt;</span> pure (c, cs)</a>
<a class="sourceLine" id="cb11-5" data-line-number="5"></a>
<a class="sourceLine" id="cb11-6" data-line-number="6"><span class="ot">satisfy ::</span> (<span class="dt">Char</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> <span class="dt">Parser</span> <span class="dt">Char</span></a>
<a class="sourceLine" id="cb11-7" data-line-number="7">satisfy pred <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb11-8" data-line-number="8">    c <span class="ot">&lt;-</span> anyChar</a>
<a class="sourceLine" id="cb11-9" data-line-number="9">    guard <span class="fu">$</span> pred c</a>
<a class="sourceLine" id="cb11-10" data-line-number="10">    pure c</a>
<a class="sourceLine" id="cb11-11" data-line-number="11"></a>
<a class="sourceLine" id="cb11-12" data-line-number="12"><span class="ot">char ::</span> <span class="dt">Char</span> <span class="ot">-&gt;</span> <span class="dt">Parser</span> <span class="dt">Char</span></a>
<a class="sourceLine" id="cb11-13" data-line-number="13">char <span class="fu">=</span> satisfy <span class="fu">.</span> (<span class="fu">==</span>)</a>
<a class="sourceLine" id="cb11-14" data-line-number="14"></a>
<a class="sourceLine" id="cb11-15" data-line-number="15"><span class="ot">string ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Parser</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb11-16" data-line-number="16">string []     <span class="fu">=</span> pure []</a>
<a class="sourceLine" id="cb11-17" data-line-number="17">string (c<span class="fu">:</span>cs) <span class="fu">=</span> (<span class="fu">:</span>) <span class="fu">&lt;$&gt;</span> char c <span class="fu">&lt;*&gt;</span> string cs</a></code></pre></div>
<p>Again, <code>many</code> and <code>many1</code> don’t need to be defined because they are provided for free!</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="ot">sepBy ::</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> b <span class="ot">-&gt;</span> <span class="dt">Parser</span> [a]</a>
<a class="sourceLine" id="cb12-2" data-line-number="2">sepBy p sep <span class="fu">=</span> (p <span class="ot">`sepBy1`</span> sep) <span class="fu">&lt;|&gt;</span> pure []</a>
<a class="sourceLine" id="cb12-3" data-line-number="3"></a>
<a class="sourceLine" id="cb12-4" data-line-number="4"><span class="ot">sepBy1 ::</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> b <span class="ot">-&gt;</span> <span class="dt">Parser</span> [a]</a>
<a class="sourceLine" id="cb12-5" data-line-number="5">sepBy1 p sep <span class="fu">=</span> (<span class="fu">:</span>) <span class="fu">&lt;$&gt;</span> p <span class="fu">&lt;*&gt;</span> many (sep <span class="fu">*&gt;</span> p)</a></code></pre></div>
<p>These are almost identical to the definitions in the paper. I’ve included <code>chainr</code> for completeness.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="ot">chainl ::</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> a</a>
<a class="sourceLine" id="cb13-2" data-line-number="2">chainl p op a <span class="fu">=</span> (p <span class="ot">`chainl1`</span> op) <span class="fu">&lt;|&gt;</span> pure a</a>
<a class="sourceLine" id="cb13-3" data-line-number="3"></a>
<a class="sourceLine" id="cb13-4" data-line-number="4"><span class="ot">chainl1 ::</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> <span class="dt">Parser</span> a</a>
<a class="sourceLine" id="cb13-5" data-line-number="5">chainl1 p op <span class="fu">=</span> p <span class="fu">&gt;&gt;=</span> rest</a>
<a class="sourceLine" id="cb13-6" data-line-number="6">    <span class="kw">where</span> </a>
<a class="sourceLine" id="cb13-7" data-line-number="7">        rest a <span class="fu">=</span> (<span class="kw">do</span></a>
<a class="sourceLine" id="cb13-8" data-line-number="8">            f <span class="ot">&lt;-</span> op</a>
<a class="sourceLine" id="cb13-9" data-line-number="9">            b <span class="ot">&lt;-</span> p</a>
<a class="sourceLine" id="cb13-10" data-line-number="10">            rest (f a b)) <span class="fu">&lt;|&gt;</span> pure a</a>
<a class="sourceLine" id="cb13-11" data-line-number="11"></a>
<a class="sourceLine" id="cb13-12" data-line-number="12"><span class="ot">chainr ::</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> a</a>
<a class="sourceLine" id="cb13-13" data-line-number="13">chainr p op a <span class="fu">=</span> (p <span class="ot">`chainr1`</span> op) <span class="fu">&lt;|&gt;</span> pure a</a>
<a class="sourceLine" id="cb13-14" data-line-number="14"></a>
<a class="sourceLine" id="cb13-15" data-line-number="15"><span class="ot">chainr1 ::</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> <span class="dt">Parser</span> a</a>
<a class="sourceLine" id="cb13-16" data-line-number="16">chainr1 p op <span class="fu">=</span> scan</a>
<a class="sourceLine" id="cb13-17" data-line-number="17">    <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-18" data-line-number="18">        scan   <span class="fu">=</span> p <span class="fu">&gt;&gt;=</span> rest</a>
<a class="sourceLine" id="cb13-19" data-line-number="19">        rest a <span class="fu">=</span> (<span class="kw">do</span></a>
<a class="sourceLine" id="cb13-20" data-line-number="20">            f <span class="ot">&lt;-</span> op</a>
<a class="sourceLine" id="cb13-21" data-line-number="21">            b <span class="ot">&lt;-</span> scan</a>
<a class="sourceLine" id="cb13-22" data-line-number="22">            rest (f a b)) <span class="fu">&lt;|&gt;</span> pure a</a></code></pre></div>
<p>The only difference here is the replacement of <code>(&gt;&gt;)</code> with <code>(*&gt;)</code>. These have the same effect, except that the latter works on <code>Applicative</code>s and also comes with a counterpart <code>(&lt;*)</code>. When writing parsers I find these especially useful because they allow me to combine multiple parsers together when I only care about the output of one of them, e.g. <code>ignored *&gt; ignored *&gt; value &lt;* ignored</code>. The calculator example uses this in <code>factor</code>.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="ot">space ::</span> <span class="dt">Parser</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb14-2" data-line-number="2">space <span class="fu">=</span> many (satisfy isSpace)</a>
<a class="sourceLine" id="cb14-3" data-line-number="3"></a>
<a class="sourceLine" id="cb14-4" data-line-number="4"><span class="ot">token ::</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> a</a>
<a class="sourceLine" id="cb14-5" data-line-number="5">token p <span class="fu">=</span> p <span class="fu">&lt;*</span> space</a>
<a class="sourceLine" id="cb14-6" data-line-number="6"></a>
<a class="sourceLine" id="cb14-7" data-line-number="7"><span class="ot">symbol ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Parser</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb14-8" data-line-number="8">symbol <span class="fu">=</span> token <span class="fu">.</span> string</a>
<a class="sourceLine" id="cb14-9" data-line-number="9"></a>
<a class="sourceLine" id="cb14-10" data-line-number="10"><span class="ot">apply ::</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (a, <span class="dt">String</span>)</a>
<a class="sourceLine" id="cb14-11" data-line-number="11">apply p <span class="fu">=</span> runParser (space <span class="fu">*&gt;</span> p)</a></code></pre></div>
<p>The calculator example is almost unchanged.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1">expr, term, factor,<span class="ot"> digit ::</span> <span class="dt">Parser</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb15-2" data-line-number="2">expr   <span class="fu">=</span> term   <span class="ot">`chainl1`</span> addop</a>
<a class="sourceLine" id="cb15-3" data-line-number="3">term   <span class="fu">=</span> factor <span class="ot">`chainl1`</span> mulop</a>
<a class="sourceLine" id="cb15-4" data-line-number="4">factor <span class="fu">=</span> digit <span class="fu">&lt;|&gt;</span> (symbol <span class="st">&quot;(&quot;</span> <span class="fu">*&gt;</span> expr <span class="fu">&lt;*</span> symbol <span class="st">&quot;)&quot;</span>)</a>
<a class="sourceLine" id="cb15-5" data-line-number="5">digit  <span class="fu">=</span> subtract (ord <span class="ch">&#39;0&#39;</span>) <span class="fu">.</span> ord <span class="fu">&lt;$&gt;</span> token (satisfy isDigit)</a>
<a class="sourceLine" id="cb15-6" data-line-number="6"></a>
<a class="sourceLine" id="cb15-7" data-line-number="7">addop,<span class="ot"> mulop ::</span> <span class="dt">Parser</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb15-8" data-line-number="8">addop <span class="fu">=</span> (symbol <span class="st">&quot;+&quot;</span> <span class="fu">*&gt;</span> pure (<span class="fu">+</span>)) <span class="fu">&lt;|&gt;</span> (symbol <span class="st">&quot;-&quot;</span> <span class="fu">*&gt;</span> pure (<span class="fu">-</span>))</a>
<a class="sourceLine" id="cb15-9" data-line-number="9">mulop <span class="fu">=</span> (symbol <span class="st">&quot;*&quot;</span> <span class="fu">*&gt;</span> pure (<span class="fu">*</span>)) <span class="fu">&lt;|&gt;</span> (symbol <span class="st">&quot;/&quot;</span> <span class="fu">*&gt;</span> pure (div))</a></code></pre></div>
<p>Finally, the payoff!</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1">runParser expr <span class="st">&quot;(1 + 2 * 4) / 3 + 5&quot;</span></a></code></pre></div>
<pre><code>Just (8,&quot;&quot;)</code></pre>
<p>What have we gained in 20 years? With only minor changes, the code is more composable and uses finer-grained abstractions. For example, if we change our minds about replacing <code>[]</code> with <code>Maybe</code>, we can switch it back and would only have to update the type signature of <code>apply</code>:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" data-line-number="1"><span class="ot">apply ::</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [(a, <span class="dt">String</span>)]</a>
<a class="sourceLine" id="cb18-2" data-line-number="2">apply p <span class="fu">=</span> runParser (space <span class="fu">*&gt;</span> p) <span class="co">-- the implementation stays the same!</span></a></code></pre></div>
<p>If we want better error messages, we could use a type such as <code>Either String</code> to keep track of locations and error messages. The <a href="http://hackage.haskell.org/package/yoctoparsec"><code>yoctoparsec</code></a> library takes this even further, allowing to you to choose your own stream type.</p>
<p>Another big difference is the <code>Applicative</code> family of functions, which we can leverage whenever we don’t have to branch on a previously parsed value (which turns out to be surprisingly often). I’m a huge fan of the <code>x &lt;$&gt; y &lt;*&gt; z</code> and the <code>ignored *&gt; value &lt;* ignored</code> idioms and I think it’s useful to be able to parse this way.</p>
<p>Otherwise, the code is largely the same and I think it’s pretty incredible that so little has changed in 20 years! This code is available as an <a href="https://github.com/vaibhavsagar/notebooks/blob/master/revisiting-monadic-parsing-haskell/Parser.ipynb">IHaskell notebook</a> if you would like to experiment with it yourself.</p>
<p><em>Edit: I just found <a href="https://lirias.kuleuven.be/bitstream/123456789/499951/1/main.pdf">‘From monoids to near-semirings: the essence of <code>MonadPlus</code> and <code>Alternative</code>’</a>, which demonstrates how my <code>Maybe</code>-based parser doesn’t strictly obey the <code>Alternative</code> laws. Something to keep in mind if you plan to use it or something like it!</em></p>
<p>Thanks to <a href="https://github.com/cqfd">Alan O’Donnell</a>, <a href="https://blogs.ncl.ac.uk/andreymokhov/">Andrey Mokhov</a>, <a href="https://anniecherkaev.com/">Annie Cherkaev</a>, <a href="https://jvns.ca/">Julia Evans</a>, and <a href="https://github.com/rampion/">Noah Luck Easterly</a> for comments and feedback!</p>
]]></summary>
</entry>
<entry>
    <title>Building Static Haskell Binaries with Nix</title>
    <link href="http://vaibhavsagar.com/blog/2018/01/03/static-haskell-nix/index.html" />
    <id>http://vaibhavsagar.com/blog/2018/01/03/static-haskell-nix/index.html</id>
    <published>2018-01-03T00:00:00Z</published>
    <updated>2018-01-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on  3 January 2018
    
</div>
<div class="info">
    
        Tags: <a href="/blog/tags/haskell/index.html">haskell</a>, <a href="/blog/tags/nix/index.html">nix</a>, <a href="/blog/tags/programming/index.html">programming</a>
    
</div>

<p><em>Skip to the end for a faster and easier way of getting this working.</em></p>
<p>The section of the Nixpkgs manual that talks about <a href="https://nixos.org/nixpkgs/manual/#creating-statically-linked-binaries">creating statically linked binaries</a> with Haskell ends with the caveat:</p>
<blockquote>
<p>It’s important to realize, however, that most system libraries in Nix are built as shared libraries only, i.e. there is just no static library available that Cabal could link!</p>
</blockquote>
<p>That sounds like a challenge. Especially when doing it on other platforms is <a href="http://www.kuznero.com/posts/haskell/building-statically-linked-binaries.html">so easy</a>.</p>
<p>On other platforms, building a static binary is meant to be as simple as</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb1-1" data-line-number="1">$ <span class="ex">cabal</span> install --only-dependencies</a>
<a class="sourceLine" id="cb1-2" data-line-number="2">$ <span class="ex">cabal</span> configure --disable-executable-dynamic --disable-shared --ghc-option=-optl=-static</a>
<a class="sourceLine" id="cb1-3" data-line-number="3">$ <span class="ex">cabal</span> build</a></code></pre></div>
<p>with the magic happening in the second step. On Nix, we do in fact have the necessary static libraries and we can provide them as build inputs but keeping track of the library paths gets hairy quickly. Fortunately Nix has an escape hatch called <code>buildFHSUserEnv</code> that we can use to simulate an environment that <code>cabal</code> is more familiar with.</p>
<p>Let’s put it through its paces by building a simple Scotty web app:</p>
<p><em>blank-me-up.cabal</em></p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1">name<span class="fu">:</span>                blank<span class="fu">-</span>me<span class="fu">-</span>up</a>
<a class="sourceLine" id="cb2-2" data-line-number="2">version<span class="fu">:</span>             <span class="fl">0.1</span><span class="fu">.</span><span class="fl">0.0</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3">license<span class="fu">:</span>             <span class="dt">BSD3</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4">build<span class="fu">-</span><span class="kw">type</span><span class="fu">:</span>          <span class="dt">Simple</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5">cabal<span class="fu">-</span>version<span class="fu">:</span>       <span class="fu">&gt;=</span><span class="fl">1.10</span></a>
<a class="sourceLine" id="cb2-6" data-line-number="6"></a>
<a class="sourceLine" id="cb2-7" data-line-number="7">executable blank<span class="fu">-</span>me<span class="fu">-</span>up</a>
<a class="sourceLine" id="cb2-8" data-line-number="8">  main<span class="fu">-</span>is<span class="fu">:</span>             Main.hs</a>
<a class="sourceLine" id="cb2-9" data-line-number="9">  build<span class="fu">-</span>depends<span class="fu">:</span>       base <span class="fu">&gt;=</span><span class="fl">4.9</span> <span class="fu">&amp;&amp;</span> <span class="fu">&lt;</span><span class="dv">5</span></a>
<a class="sourceLine" id="cb2-10" data-line-number="10">                     , scotty</a>
<a class="sourceLine" id="cb2-11" data-line-number="11">  default<span class="fu">-</span>language<span class="fu">:</span>    <span class="dt">Haskell2010</span></a></code></pre></div>
<p><em>Main.hs</em></p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2"></a>
<a class="sourceLine" id="cb3-3" data-line-number="3"><span class="kw">import</span> <span class="dt">Web.Scotty</span></a>
<a class="sourceLine" id="cb3-4" data-line-number="4"></a>
<a class="sourceLine" id="cb3-5" data-line-number="5"><span class="kw">import</span> <span class="dt">Data.Monoid</span> (mconcat)</a>
<a class="sourceLine" id="cb3-6" data-line-number="6"></a>
<a class="sourceLine" id="cb3-7" data-line-number="7">main <span class="fu">=</span> scotty <span class="dv">3000</span> <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-8" data-line-number="8">    get <span class="st">&quot;/:word&quot;</span> <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-9" data-line-number="9">        beam <span class="ot">&lt;-</span> param <span class="st">&quot;word&quot;</span></a>
<a class="sourceLine" id="cb3-10" data-line-number="10">        html <span class="fu">$</span> mconcat [<span class="st">&quot;&lt;h1&gt;Scotty, &quot;</span>, beam, <span class="st">&quot; me up!&lt;/h1&gt;&quot;</span>]</a></code></pre></div>
<p>We create <code>static.nix</code>:</p>
<p><em>static.nix</em></p>
<div class="sourceCode" id="cb4"><pre class="sourceCode nix"><code class="sourceCode bash"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="bu">let</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2">  <span class="ex">pkgs</span> = import <span class="op">&lt;</span>nixpkgs<span class="op">&gt;</span> <span class="dt">{}</span><span class="kw">;</span></a>
<a class="sourceLine" id="cb4-3" data-line-number="3"><span class="kw">in</span> <span class="ex">pkgs.buildFHSUserEnv</span> {</a>
<a class="sourceLine" id="cb4-4" data-line-number="4">  <span class="ex">name</span> = <span class="st">&quot;fhs&quot;</span><span class="kw">;</span></a>
<a class="sourceLine" id="cb4-5" data-line-number="5">  <span class="ex">targetPkgs</span> = pkgs: [</a>
<a class="sourceLine" id="cb4-6" data-line-number="6">    <span class="kw">(</span><span class="ex">pkgs.haskellPackages.ghcWithPackages</span> (p: with p<span class="kw">;</span><span class="bu"> [</span> cabal-install ]))</a>
<a class="sourceLine" id="cb4-7" data-line-number="7">    pkgs.gmp5.static</a>
<a class="sourceLine" id="cb4-8" data-line-number="8">    pkgs.glibc.static</a>
<a class="sourceLine" id="cb4-9" data-line-number="9">    pkgs.zlib.static</a>
<a class="sourceLine" id="cb4-10" data-line-number="10">    pkgs.zlib.dev</a>
<a class="sourceLine" id="cb4-11" data-line-number="11">  ];</a>
<a class="sourceLine" id="cb4-12" data-line-number="12">}</a></code></pre></div>
<p>This defines a chroot where statically linked versions of <code>gmp</code>, <code>glibc</code>, and <code>zlib</code> are available, as well as <code>zlib.h</code>. We enter this environment by running</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb5-1" data-line-number="1">$ <span class="va">$(</span><span class="ex">nix-build</span> static.nix<span class="va">)</span><span class="ex">/bin/fhs</span></a></code></pre></div>
<p>and then we can run the commands above with only slight modifications:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb6-1" data-line-number="1">$ <span class="ex">cabal</span> install --only-dependencies --extra-include-dirs=/usr/include --extra-lib-dirs=/usr/lib</a>
<a class="sourceLine" id="cb6-2" data-line-number="2">$ <span class="ex">cabal</span> configure --disable-executable-dynamic --disable-shared --ghc-option=-optl=-static --ghc-option=-optl=-L/usr/lib</a>
<a class="sourceLine" id="cb6-3" data-line-number="3">$ <span class="ex">cabal</span> build</a></code></pre></div>
<p>The difference is the extra options passed to the linker. After the last command, I get a whole bunch of warnings about</p>
<pre><code>&quot;Using &#39;&lt;function&gt;&#39; in statically linked applications requires at runtime the shared libraries from the glibc version used for linking&quot;</code></pre>
<p>but these don’t seem to cause any issues in practice. You can confirm that the executable has been statically linked by running</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb8-1" data-line-number="1">$ <span class="fu">ldd</span> dist/build/blank-me-up/blank-me-up</a>
<a class="sourceLine" id="cb8-2" data-line-number="2">        <span class="ex">not</span> a dynamic executable</a></code></pre></div>
<p>I’ve made this project available <a href="https://github.com/vaibhavsagar/experiments/tree/master/static-haskell-nix">here</a> if you’d like to tweak it. Since this was relatively straightforward, I think it might be possible to do this without <code>buildFHSUserEnv</code>. Maybe I will try that next.</p>
<p>Happy static linking!</p>
<p><strong>Edit 1:</strong> This turned out to be fairly easy. I took the output of</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb9-1" data-line-number="1">$ <span class="ex">cabal2nix</span> --shell . <span class="op">&gt;</span> default.nix</a></code></pre></div>
<p>and changed <code>enableSharedExecutables</code>, <code>enableSharedLibraries</code>, and <code>configureFlags</code> as follows:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode nix"><code class="sourceCode bash"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="ex">enableSharedExecutables</span> = false<span class="kw">;</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2"><span class="ex">enableSharedLibraries</span> = false<span class="kw">;</span></a>
<a class="sourceLine" id="cb10-3" data-line-number="3"><span class="ex">configureFlags</span> = [</a>
<a class="sourceLine" id="cb10-4" data-line-number="4">  <span class="st">&quot;--ghc-option=-optl=-static&quot;</span></a>
<a class="sourceLine" id="cb10-5" data-line-number="5">  <span class="st">&quot;--ghc-option=-optl=-L</span><span class="va">${pkgs</span><span class="er">.gmp6.override { withStatic </span><span class="va">=</span> true; <span class="va">}</span><span class="st">}/lib&quot;</span></a>
<a class="sourceLine" id="cb10-6" data-line-number="6">  <span class="st">&quot;--ghc-option=-optl=-L</span><span class="va">${pkgs</span><span class="er">.zlib.static</span><span class="va">}</span><span class="st">/lib&quot;</span></a>
<a class="sourceLine" id="cb10-7" data-line-number="7">  <span class="st">&quot;--ghc-option=-optl=-L</span><span class="va">${pkgs</span><span class="er">.glibc.static</span><span class="va">}</span><span class="st">/lib&quot;</span></a>
<a class="sourceLine" id="cb10-8" data-line-number="8">];</a></code></pre></div>
<p>This is also available in the linked repository.</p>
<p><strong>Edit 2</strong>: <a href="https://github.com/angerman">Moritz Angermann</a> improved these instructions to be more robust. Thanks Moritz!</p>
]]></summary>
</entry>
<entry>
    <title>I Haskell a Git</title>
    <link href="http://vaibhavsagar.com/blog/2017/08/13/i-haskell-a-git/index.html" />
    <id>http://vaibhavsagar.com/blog/2017/08/13/i-haskell-a-git/index.html</id>
    <published>2017-08-13T00:00:00Z</published>
    <updated>2017-08-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on 13 August 2017
    
</div>
<div class="info">
    
        Tags: <a href="/blog/tags/programming/index.html">programming</a>, <a href="/blog/tags/haskell/index.html">haskell</a>, <a href="/blog/tags/git/index.html">git</a>
    
</div>

<p>I struggled with Git for a long time, and every time I thought I had finally made sense of it, I would accidentally delete a repository or mess up a branch, causing me to question my grasp of what I was doing. I found it very difficult to form a mental model of the tool from the proliferation of seemingly endless command line flags that I had to use to achieve anything meaningful, and the cryptic errors that would inevitably result.</p>
<p>When I finally thought I understood what was going on, I offered to give a talk on it to the local functional group, because Git is functional, right? The co-organisers explained that it wouldn’t be an interesting or useful talk, but a talk on implementing Git in Haskell would be very welcome.</p>
<p>That was enough motivation to start working on a <a href="https://github.com/vaibhavsagar/duffer">Git library</a>, and it turns out that understanding Git from the inside out is far, far easier than whatever I was trying to do earlier. This blog post is my attempt to share that comfort and understanding with you.</p>
<p>I’ve chosen to write this as an IHaskell notebook that is available <a href="https://github.com/vaibhavsagar/notebooks/tree/master/git-from-scratch">here</a>, and I’ve included a <code>default.nix</code> to make things easier if you have Nix installed. You should be able to run</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb1-1" data-line-number="1">$ <span class="va">$(</span><span class="ex">nix-build</span> --no-out-link<span class="va">)</span><span class="ex">/bin/ihaskell-notebook</span></a></code></pre></div>
<p>to open a Jupyter notebook environment with all the dependencies you’ll need to follow along.</p>
<p>GHCi has a handy Vim-inspired feature where a command prefixed with <code>:!</code> is run in the shell, and IHaskell supports this as well, so I’ll be using that heavily to keep everything self-contained.</p>
<p>Let’s start by picking a Git repository. I picked Ethan Schoonover’s <a href="https://github.com/altercation/solarized/">solarized</a> because it’s nontrivial, well-known, and was last updated in 2011, so I’m confident that the hashes here won’t go out of date.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"></a>
<a class="sourceLine" id="cb2-3" data-line-number="3"><span class="co">-- Start with a clean slate.</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"><span class="fu">:!</span><span class="kw">if</span> [ <span class="fu">-</span>d solarized<span class="fu">/</span> ]; <span class="kw">then</span> rm <span class="fu">-</span>rf solarized; fi</a>
<a class="sourceLine" id="cb2-5" data-line-number="5"><span class="fu">:!</span>git clone https<span class="fu">://</span>github<span class="fu">.</span>com<span class="fu">/</span>altercation<span class="fu">/</span>solarized</a>
<a class="sourceLine" id="cb2-6" data-line-number="6"><span class="fu">:!</span>cd solarized</a>
<a class="sourceLine" id="cb2-7" data-line-number="7"><span class="fu">:!</span>git show <span class="co">--format=raw -s</span></a></code></pre></div>
<pre><code>Cloning into &#39;solarized&#39;...



commit e40cd4130e2a82f9b03ada1ca378b7701b1a9110
tree ecd0e58d6832566540a30dfd4878db518d5451d0
parent ab3c5646b41de1b6d95782371289db585ba8aa85
author Trevor Bramble &lt;inbox@trevorbramble.com&gt; 1372482098 -0700
committer Trevor Bramble &lt;inbox@trevorbramble.com&gt; 1372482214 -0700

    add tmux by @seebi!</code></pre>
<p><code>git show</code> displays the latest commit on the current branch, <code>--format=raw</code> shows it in raw format, and the <code>-s</code> flag suppresses the diff output, which (as we’ll see later) isn’t part of the commit.</p>
<p>The first thing we have to address is the fact that Git has two storage formats: loose objects and packfiles. In the loose object format, each Git object is stored in its own file under the <code>.git/objects</code> directory. In the packfile format, many Git objects are stored in a file under the <code>.git/objects/pack</code> directory with an associated pack index to make lookups feasible.</p>
<p>Loose objects are used below a certain size threshold as an on-disk format, and packfiles are used as a space optimisation and to transfer files over the network because transferring one large file has less overhead than transferring lots of small files. Loose objects are easier to work with, so I’m going to convert the packfiles into loose objects.</p>
<p>If you’d like to learn more about packfiles, my favourite resource is Aditya Mukerjee’s <a href="https://codewords.recurse.com/issues/three/unpacking-git-packfiles">Unpacking Git packfiles</a>.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="co">-- `git unpack-objects` doesn&#39;t do any unpacking if the objects already exist in the repository</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2"><span class="fu">:!</span>mv <span class="fu">.</span>git<span class="fu">/</span>objects<span class="fu">/</span>pack<span class="fu">/*</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb4-3" data-line-number="3"><span class="co">-- Stream the packfiles to `git unpack-objects`, which splits them into individual objects and stores them appropriately</span></a>
<a class="sourceLine" id="cb4-4" data-line-number="4"><span class="fu">:!</span>cat <span class="fu">*.</span>pack <span class="fu">|</span> git unpack<span class="fu">-</span>objects</a>
<a class="sourceLine" id="cb4-5" data-line-number="5"><span class="co">-- We don&#39;t need the packfiles any more</span></a>
<a class="sourceLine" id="cb4-6" data-line-number="6"><span class="fu">:!</span>rm <span class="fu">-</span>rf pack<span class="fu">-*</span></a></code></pre></div>
<p>Okay, the packfiles are gone and there are only loose objects now.</p>
<p><code>git show</code> is an example of a ‘porcelain’ command for users to interact with, as opposed to a ‘plumbing’ command that is more low-level and meant for Git itself to use under the hood. The latest commit on the current branch is known as the <code>HEAD</code> commit, and we should be able to use <code>git cat-file -p</code> to get essentially the same output as before (the <code>-p</code> flag means ‘pretty-print’).</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="fu">:!</span>git cat<span class="fu">-</span>file <span class="fu">-</span>p <span class="dt">HEAD</span></a></code></pre></div>
<pre><code>tree ecd0e58d6832566540a30dfd4878db518d5451d0
parent ab3c5646b41de1b6d95782371289db585ba8aa85
author Trevor Bramble &lt;inbox@trevorbramble.com&gt; 1372482098 -0700
committer Trevor Bramble &lt;inbox@trevorbramble.com&gt; 1372482214 -0700

add tmux by @seebi!</code></pre>
<p><code>HEAD</code> is in fact a file that lives at <code>.git/HEAD</code>. Let’s view its contents.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="fu">:!</span>cat <span class="fu">.</span>git<span class="fu">/</span><span class="dt">HEAD</span></a></code></pre></div>
<pre><code>ref: refs/heads/master</code></pre>
<p>This is essentially a symlink in text. <code>refs/heads/master</code> refers to <code>.git/refs/heads/master</code>. What are its contents?</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="fu">:!</span>cat <span class="fu">.</span>git<span class="fu">/</span>refs<span class="fu">/</span>heads<span class="fu">/</span>master</a></code></pre></div>
<pre><code>e40cd4130e2a82f9b03ada1ca378b7701b1a9110</code></pre>
<p>Okay, no more pointers! This is a SHA1 hash representing the commit we want. One last <code>git cat-file -p</code>…</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="fu">:!</span>git cat<span class="fu">-</span>file <span class="fu">-</span>p e40cd4130e2a82f9b03ada1ca378b7701b1a9110</a></code></pre></div>
<pre><code>tree ecd0e58d6832566540a30dfd4878db518d5451d0
parent ab3c5646b41de1b6d95782371289db585ba8aa85
author Trevor Bramble &lt;inbox@trevorbramble.com&gt; 1372482098 -0700
committer Trevor Bramble &lt;inbox@trevorbramble.com&gt; 1372482214 -0700

add tmux by @seebi!</code></pre>
<p>As expected, we get the same output as before. On to something different: <code>e40cd4130e2a82f9b03ada1ca378b7701b1a9110</code> is a reference to an object stored at <code>.git/objects/e4/0cd4130e2a82f9b03ada1ca378b7701b1a9110</code>. The first two characters of the hash are the directory name and the 38 remaining characters are the file name underneath that directory. It’s worth pointing out that all objects are stored in this format, and there’s no separation between object types or anything like that.</p>
<p>This unusual directory structure was chosen as a tradeoff between the number of directories under <code>.git/objects</code> and the number of files under each of those directories. One approach might have been to use 40-character file names and put all objects under <code>.git/objects</code>. However, some filesystems have operations that are <code>O(n)</code> in the number of files in a directory, and working with large repositories would get very slow in this case. Another approach would have been to use the first character of the hash as the directory name, which would lead to at most 16 directories under <code>.git/objects</code>. Git settled on the first two characters, which gives us at most 256 directories.</p>
<p>Let’s confirm that the file does exist, and then look at its contents.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="fu">:!</span>ls <span class="fu">.</span>git<span class="fu">/</span>objects<span class="fu">/</span>e4<span class="fu">/</span>0cd4130e2a82f9b03ada1ca378b7701b1a9110</a>
<a class="sourceLine" id="cb13-2" data-line-number="2"><span class="fu">:!</span>cat <span class="fu">.</span>git<span class="fu">/</span>objects<span class="fu">/</span>e4<span class="fu">/</span>0cd4130e2a82f9b03ada1ca378b7701b1a9110 <span class="fu">|</span> xxd</a></code></pre></div>
<pre><code>.git/objects/e4/0cd4130e2a82f9b03ada1ca378b7701b1a9110



00000000: 7801 958e 6d6a 0331 0c44 fbdb a750 0ed0  x...mj.1.D...P..
00000010: e22f d95a 2825 f40c b980 b452 e942 9d0d  ./.Z(%.....R.B..
00000020: ae53 92db d790 5ea0 bf06 1ec3 9b59 f7d6  .S....^......Y..
00000030: b601 31d3 d3e8 6660 ab7a 43d2 4229 6229  ..1...f`.zC.B)b)
00000040: 983d 27af 1f9a a992 0a06 52cc 18d4 bb0b  .=&#39;.......R.....
00000050: 773b 0f60 492b 965c 2407 b520 4517 ac14  w;.`I+.\$.. E...
00000060: 530d 9196 d927 1426 6642 c7d7 f1b9 7738  S....&#39;.&amp;fB....w8
00000070: 75fb 99f1 deb9 c997 c1eb 7696 fd76 9cd3  u.........v..v..
00000080: 93ca 03be ac7b 7b83 90ea 3c15 fd42 f0ec  .....{{...&lt;..B..
00000090: abf7 6ed2 f974 d8ff 1d31 e43f 8763 5518  ..n..t...1.?.cU.
000000a0: ed7a 03b9 c3f1 db4c b683 fb05 c805 4f81  .z.....L......O.</code></pre>
<p>Git compresses these files with zlib before storing them, and we’ll need to handle this. Fortunately there’s a tool called <code>zlib-flate</code> (part of the <code>qpdf</code> package) that we can use.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="fu">:!</span>zlib<span class="fu">-</span>flate <span class="fu">-</span>uncompress <span class="fu">&lt;</span> <span class="fu">.</span>git<span class="fu">/</span>objects<span class="fu">/</span>e4<span class="fu">/</span>0cd4130e2a82f9b03ada1ca378b7701b1a9110</a></code></pre></div>
<pre><code>commit 248tree ecd0e58d6832566540a30dfd4878db518d5451d0
parent ab3c5646b41de1b6d95782371289db585ba8aa85
author Trevor Bramble &lt;inbox@trevorbramble.com&gt; 1372482098 -0700
committer Trevor Bramble &lt;inbox@trevorbramble.com&gt; 1372482214 -0700

add tmux by @seebi!</code></pre>
<p>This is identical to the output of <code>git cat-file -p</code>, except for the <code>commit 248</code> at the beginning. That’s a header that Git uses to tell different types of objects apart, and <code>248</code> is the content length of this particular commit. There’s also a null byte after the content length that the shell is not displaying here, and this will become important when we write code to handle the header in a moment.</p>
<p>I’m done playing with the shell for now, and I want to write some code. The first thing I’d like to do is import some libraries and define helper functions for compresssion and decompression. Haskell’s <code>zlib</code> library works with lazy bytestrings but I use strict bytestrings in the rest of this code and I don’t want to keep converting back and forth, so I’ll define <code>compress</code> and <code>decompress</code> accordingly.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" data-line-number="1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Codec.Compression.Zlib</span> <span class="kw">as</span> <span class="dt">Z</span> (compress, decompress)</a>
<a class="sourceLine" id="cb17-2" data-line-number="2"><span class="kw">import</span>           <span class="dt">Data.ByteString.Lazy</span>        (fromStrict, toStrict)</a>
<a class="sourceLine" id="cb17-3" data-line-number="3"><span class="kw">import</span>           <span class="dt">Data.ByteString</span>             (<span class="dt">ByteString</span>)</a>
<a class="sourceLine" id="cb17-4" data-line-number="4"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.ByteString</span>        <span class="kw">as</span> <span class="dt">B</span></a>
<a class="sourceLine" id="cb17-5" data-line-number="5"></a>
<a class="sourceLine" id="cb17-6" data-line-number="6">compress,<span class="ot"> decompress ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">ByteString</span></a>
<a class="sourceLine" id="cb17-7" data-line-number="7">compress   <span class="fu">=</span> toStrict <span class="fu">.</span> Z.compress   <span class="fu">.</span> fromStrict</a>
<a class="sourceLine" id="cb17-8" data-line-number="8">decompress <span class="fu">=</span> toStrict <span class="fu">.</span> Z.decompress <span class="fu">.</span> fromStrict</a></code></pre></div>
<p>Now to recreate the <code>zlib-flate</code> output from earlier, and demonstrate the presence of that null byte in the header:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" data-line-number="1">commit <span class="ot">&lt;-</span> B.readFile <span class="st">&quot;.git/objects/e4/0cd4130e2a82f9b03ada1ca378b7701b1a9110&quot;</span></a>
<a class="sourceLine" id="cb18-2" data-line-number="2">print <span class="fu">$</span> decompress commit</a></code></pre></div>
<pre><code>&quot;commit 248\NULtree ecd0e58d6832566540a30dfd4878db518d5451d0\nparent ab3c5646b41de1b6d95782371289db585ba8aa85\nauthor Trevor Bramble &lt;inbox@trevorbramble.com&gt; 1372482098 -0700\ncommitter Trevor Bramble &lt;inbox@trevorbramble.com&gt; 1372482214 -0700\n\nadd tmux by @seebi!\n&quot;</code></pre>
<p>Next, I want to make sense of this content by parsing it. I’ll write parsers that take a sequence of bytes and produce values I can work with. I also want to define serialisers (or unparsers, as I like to think of them) that take those values and turn them back into the sequence of bytes we started with.</p>
<p>Haskell has a couple of great options for this, and I’ve decided to go with <code>attoparsec</code>. It does the right thing and accounts for a parsing failure by default instead of blowing up with a runtime error, but I’m pretty confident that my parsers won’t fail so I’ll define a helper function that gets rid of that behaviour.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb20-1" data-line-number="1"><span class="kw">import</span>           <span class="dt">Data.Attoparsec.ByteString</span> (<span class="dt">Parser</span>)</a>
<a class="sourceLine" id="cb20-2" data-line-number="2"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Attoparsec.ByteString.Char8</span> <span class="kw">as</span> <span class="dt">AC</span></a>
<a class="sourceLine" id="cb20-3" data-line-number="3"></a>
<a class="sourceLine" id="cb20-4" data-line-number="4"><span class="ot">parsed ::</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> a</a>
<a class="sourceLine" id="cb20-5" data-line-number="5">parsed parser <span class="fu">=</span> either error id <span class="fu">.</span> AC.parseOnly parser</a></code></pre></div>
<p>Let’s write our first parser! We’ll start with a simple one for the header. We want some sequence of characters, a space, a number, and a null byte, and parser combinators make implementing this straightforward.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb21-1" data-line-number="1"><span class="ot">parseHeader ::</span> <span class="dt">Parser</span> (<span class="dt">ByteString</span>, <span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb21-2" data-line-number="2">parseHeader <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb21-3" data-line-number="3">    objectType <span class="ot">&lt;-</span> AC.takeTill AC.isSpace</a>
<a class="sourceLine" id="cb21-4" data-line-number="4">    AC.space</a>
<a class="sourceLine" id="cb21-5" data-line-number="5">    len <span class="ot">&lt;-</span> AC.decimal</a>
<a class="sourceLine" id="cb21-6" data-line-number="6">    AC.char <span class="ch">&#39;\NUL&#39;</span></a>
<a class="sourceLine" id="cb21-7" data-line-number="7">    return (objectType, len)</a>
<a class="sourceLine" id="cb21-8" data-line-number="8"></a>
<a class="sourceLine" id="cb21-9" data-line-number="9">commit <span class="ot">&lt;-</span> decompress <span class="fu">&lt;$&gt;</span> B.readFile <span class="st">&quot;.git/objects/e4/0cd4130e2a82f9b03ada1ca378b7701b1a9110&quot;</span></a>
<a class="sourceLine" id="cb21-10" data-line-number="10"></a>
<a class="sourceLine" id="cb21-11" data-line-number="11">parsed parseHeader commit</a></code></pre></div>
<pre><code>(&quot;commit&quot;,248)</code></pre>
<p>The next parser I want is one for references. The correct way to do this is to look for 40 characters that are in the range 0-9 or a-f, but I’m lazy and I’m going to just grab 40 characters instead. Rabbit hole: write a parser that only parses valid SHA1 hashes.</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb23-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Ref</span> <span class="fu">=</span> <span class="dt">ByteString</span></a>
<a class="sourceLine" id="cb23-2" data-line-number="2"></a>
<a class="sourceLine" id="cb23-3" data-line-number="3"><span class="ot">parseHexRef ::</span> <span class="dt">Parser</span> <span class="dt">Ref</span></a>
<a class="sourceLine" id="cb23-4" data-line-number="4">parseHexRef <span class="fu">=</span> AC.take <span class="dv">40</span></a></code></pre></div>
<p>We now have all the smaller parsers we’ll need to plug together in order to parse a commit. We want to parse the <code>tree</code>, any number of <code>parent</code>s, an <code>author</code>, a <code>committer</code>, and a message. Why any number of parents? The initial commit of a repository won’t have any parents, and merge commits will have at least two, although there can be more (this is known as an <a href="https://www.destroyallsoftware.com/blog/2017/the-biggest-and-weirdest-commits-in-linux-kernel-git-history">octopus merge</a>).</p>
<p>The author and committer lines consist of a user’s name, their email, the unix timestamp, and the timezone. A better parser for this would validate each of those components, but to demonstrate I’m just going to grab the whole line. Rabbit hole: write the better person+time parser.</p>
<p>One thing I really like about parser combinators is that I can write a parser whose form imitates the content I’m trying to parse. This is purely a cute stylistic quirk, but I enjoy doing it anyway.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb24-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Commit</span> <span class="fu">=</span> <span class="dt">Commit</span></a>
<a class="sourceLine" id="cb24-2" data-line-number="2">    {<span class="ot"> commitTree      ::</span> <span class="dt">Ref</span></a>
<a class="sourceLine" id="cb24-3" data-line-number="3">    ,<span class="ot"> commitParents   ::</span> [<span class="dt">Ref</span>]</a>
<a class="sourceLine" id="cb24-4" data-line-number="4">    ,<span class="ot"> commitAuthor    ::</span> <span class="dt">ByteString</span></a>
<a class="sourceLine" id="cb24-5" data-line-number="5">    ,<span class="ot"> commitCommitter ::</span> <span class="dt">ByteString</span></a>
<a class="sourceLine" id="cb24-6" data-line-number="6">    ,<span class="ot"> commitMessage   ::</span> <span class="dt">ByteString</span></a>
<a class="sourceLine" id="cb24-7" data-line-number="7">    } <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</a>
<a class="sourceLine" id="cb24-8" data-line-number="8"></a>
<a class="sourceLine" id="cb24-9" data-line-number="9">parseCommit <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb24-10" data-line-number="10">    cTree      <span class="ot">&lt;-</span>           AC.string <span class="st">&quot;tree&quot;</span>      <span class="fu">*&gt;</span> AC.space <span class="fu">*&gt;</span> parseHexRef                   <span class="fu">&lt;*</span> AC.endOfLine</a>
<a class="sourceLine" id="cb24-11" data-line-number="11">    cParents   <span class="ot">&lt;-</span> AC.many&#39; (AC.string <span class="st">&quot;parent&quot;</span>    <span class="fu">*&gt;</span> AC.space <span class="fu">*&gt;</span> parseHexRef                   <span class="fu">&lt;*</span> AC.endOfLine)</a>
<a class="sourceLine" id="cb24-12" data-line-number="12">    cAuthor    <span class="ot">&lt;-</span>           AC.string <span class="st">&quot;author&quot;</span>    <span class="fu">*&gt;</span> AC.space <span class="fu">*&gt;</span> AC.takeTill (AC.inClass <span class="st">&quot;\n&quot;</span>) <span class="fu">&lt;*</span> AC.endOfLine</a>
<a class="sourceLine" id="cb24-13" data-line-number="13">    cCommitter <span class="ot">&lt;-</span>           AC.string <span class="st">&quot;committer&quot;</span> <span class="fu">*&gt;</span> AC.space <span class="fu">*&gt;</span> AC.takeTill (AC.inClass <span class="st">&quot;\n&quot;</span>) <span class="fu">&lt;*</span> AC.endOfLine</a>
<a class="sourceLine" id="cb24-14" data-line-number="14">    AC.endOfLine</a>
<a class="sourceLine" id="cb24-15" data-line-number="15">    cMessage   <span class="ot">&lt;-</span> AC.takeByteString</a>
<a class="sourceLine" id="cb24-16" data-line-number="16">    return <span class="fu">$</span> <span class="dt">Commit</span> cTree cParents cAuthor cCommitter cMessage</a>
<a class="sourceLine" id="cb24-17" data-line-number="17"></a>
<a class="sourceLine" id="cb24-18" data-line-number="18">parsed (parseHeader <span class="fu">*&gt;</span> parseCommit) commit</a></code></pre></div>
<pre><code>Commit {commitTree = &quot;ecd0e58d6832566540a30dfd4878db518d5451d0&quot;, commitParents = [&quot;ab3c5646b41de1b6d95782371289db585ba8aa85&quot;], commitAuthor = &quot;Trevor Bramble &lt;inbox@trevorbramble.com&gt; 1372482098 -0700&quot;, commitCommitter = &quot;Trevor Bramble &lt;inbox@trevorbramble.com&gt; 1372482214 -0700&quot;, commitMessage = &quot;add tmux by @seebi!\n&quot;}</code></pre>
<p>Now to write our first serialiser that takes values of the Commit type and turns them back into bytestrings. Again, with some formatting liberties I can make this look a lot like the content I want to output. I can quickly check that it <a href="http://teh.id.au/posts/2017/06/07/round-trip-property/">round-trips</a> to see that both my parser and serialiser work properly.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb26-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Data.Monoid</span> ((&lt;&gt;), mappend, mconcat)</a>
<a class="sourceLine" id="cb26-2" data-line-number="2"><span class="kw">import</span> <span class="dt">Data.Byteable</span></a>
<a class="sourceLine" id="cb26-3" data-line-number="3"></a>
<a class="sourceLine" id="cb26-4" data-line-number="4"><span class="kw">instance</span> <span class="dt">Byteable</span> <span class="dt">Commit</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb26-5" data-line-number="5">    toBytes (<span class="dt">Commit</span> cTree cParents cAuthor cCommitter cMessage) <span class="fu">=</span> mconcat</a>
<a class="sourceLine" id="cb26-6" data-line-number="6">        [                        <span class="st">&quot;tree &quot;</span>      <span class="fu">&lt;&gt;</span> cTree      <span class="fu">&lt;&gt;</span> <span class="st">&quot;\n&quot;</span></a>
<a class="sourceLine" id="cb26-7" data-line-number="7">        , mconcat (map (\cRef <span class="ot">-&gt;</span> <span class="st">&quot;parent &quot;</span>    <span class="fu">&lt;&gt;</span> cRef       <span class="fu">&lt;&gt;</span> <span class="st">&quot;\n&quot;</span>) cParents)</a>
<a class="sourceLine" id="cb26-8" data-line-number="8">        ,                        <span class="st">&quot;author &quot;</span>    <span class="fu">&lt;&gt;</span> cAuthor    <span class="fu">&lt;&gt;</span> <span class="st">&quot;\n&quot;</span></a>
<a class="sourceLine" id="cb26-9" data-line-number="9">        ,                        <span class="st">&quot;committer &quot;</span> <span class="fu">&lt;&gt;</span> cCommitter <span class="fu">&lt;&gt;</span> <span class="st">&quot;\n&quot;</span></a>
<a class="sourceLine" id="cb26-10" data-line-number="10">        ,                                                      <span class="st">&quot;\n&quot;</span></a>
<a class="sourceLine" id="cb26-11" data-line-number="11">        ,                                        cMessage</a>
<a class="sourceLine" id="cb26-12" data-line-number="12">        ]</a>
<a class="sourceLine" id="cb26-13" data-line-number="13"></a>
<a class="sourceLine" id="cb26-14" data-line-number="14">parsedCommit <span class="fu">=</span> parsed (parseHeader <span class="fu">*&gt;</span> parseCommit) commit</a>
<a class="sourceLine" id="cb26-15" data-line-number="15">(parsed parseCommit <span class="fu">.</span> toBytes <span class="fu">$</span> parsedCommit) <span class="fu">==</span> parsedCommit</a></code></pre></div>
<pre><code>True</code></pre>
<p>Let’s backtrack and also define a serialiser for our headers.</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb28-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Data.ByteString.UTF8</span> (fromString, toString)</a>
<a class="sourceLine" id="cb28-2" data-line-number="2"></a>
<a class="sourceLine" id="cb28-3" data-line-number="3"><span class="ot">withHeader ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">ByteString</span></a>
<a class="sourceLine" id="cb28-4" data-line-number="4">withHeader oType content <span class="fu">=</span> mconcat [oType, <span class="st">&quot; &quot;</span>, fromString <span class="fu">.</span> show <span class="fu">$</span> B.length content, <span class="st">&quot;\NUL&quot;</span>, content]</a>
<a class="sourceLine" id="cb28-5" data-line-number="5"></a>
<a class="sourceLine" id="cb28-6" data-line-number="6">withHeader <span class="st">&quot;commit&quot;</span> (toBytes parsedCommit)</a></code></pre></div>
<pre><code>commit 248tree ecd0e58d6832566540a30dfd4878db518d5451d0
parent ab3c5646b41de1b6d95782371289db585ba8aa85
author Trevor Bramble &lt;inbox@trevorbramble.com&gt; 1372482098 -0700
committer Trevor Bramble &lt;inbox@trevorbramble.com&gt; 1372482214 -0700

add tmux by @seebi!</code></pre>
<p>Great, it looks like that does the right thing. We’ll test it more thoroughly later.</p>
<p>So far I’ve avoided the question of where the hashes come from. Git is a content-addressable store (CAS) and the content of our Git objects uniquely determines their hash. This is very much like a hash table, and that’s a useful way to think about Git: a hashtable on the filesystem.</p>
<p>More specifically, the SHA1 hash of a Git object before compression is used as the reference. Let me demonstrate.</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb30-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Data.Digest.Pure.SHA</span></a>
<a class="sourceLine" id="cb30-2" data-line-number="2"></a>
<a class="sourceLine" id="cb30-3" data-line-number="3"><span class="ot">hash ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Ref</span></a>
<a class="sourceLine" id="cb30-4" data-line-number="4">hash <span class="fu">=</span> fromString <span class="fu">.</span> showDigest <span class="fu">.</span> sha1 <span class="fu">.</span> fromStrict</a>
<a class="sourceLine" id="cb30-5" data-line-number="5"></a>
<a class="sourceLine" id="cb30-6" data-line-number="6">hash (withHeader <span class="st">&quot;commit&quot;</span> (toBytes parsedCommit))</a></code></pre></div>
<pre><code>e40cd4130e2a82f9b03ada1ca378b7701b1a9110</code></pre>
<p>This is the same hash as the one we’ve been using to get at the commit so far, which is consistent with my explanation.</p>
<p>I think this is a good point to mention that Git commits form a <a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">directed acyclic graph</a>, and this property is ensured by the way hashes are computed: since a commit hash depends on the content of the <code>parent</code> fields, a commit with an ancestor referring back to it would somehow need that ancestor (and therefore all its successors) to know the final commit hash <em>before it has been determined</em>. However, since SHA1 has recently been <a href="https://shattered.io/">broken in practice</a>, it might be eventually possible to generate a Git commit cycle and I’m curious to see how the tool would behave in its presence.</p>
<p>Now that we’re done with commits, let’s look at trees. A tree is what Git calls a directory listing. I think the tree reference <code>ecd0e58d6832566540a30dfd4878db518d5451d0</code> in the above commit is a good one to start with.</p>
<p>A tree object consists of some number of tree entries, and each tree entry represents a directory/file, with a reference to another Git object that stores the actual content of the directory/file. I think of these as <a href="https://en.wikipedia.org/wiki/Trie">tries</a>, with file contents at the leaves.</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb32-1" data-line-number="1"><span class="fu">:!</span>git cat<span class="fu">-</span>file <span class="fu">-</span>p ecd0e58d6832566540a30dfd4878db518d5451d0</a></code></pre></div>
<pre><code>100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391	.gitmodules
100644 blob ec00a76061539cf774614788270214499696f871	CHANGELOG.mkd
100644 blob f95aaf80007d225f00d3109987ee42ef2c2e0c0a	DEVELOPERS.mkd
100644 blob ee08d7e44f15108ef5359550399dad55955b56ca	LICENSE
100644 blob d18ee9450251ea1b9a02ebd4d6fce022df9eb5e4	README.md
040000 tree 1981c76881c6a14e14d067a44247acd1bf6bbc3a	adobe-swatches-solarized
040000 tree 825c732bdd3a62aeb543ca89026a26a2ee0fba26	apple-colorpalette-solarized
040000 tree 7bab2828df5de23262a821cc48fe0ccf8bd2a9ae	emacs-colors-solarized
040000 tree f5fe8c3e20b2577223f617683a52eac31c5c9f30	files
040000 tree 5b60111510dbb3d8560cf58a36a20a99fc175658	gedit
040000 tree 60c9df3d6e1994b76d72c061a02639af3d925655	gimp-palette-solarized
040000 tree 979cf43752e4d698c7b5b47cff665142a274c133	img
040000 tree 3ff6d431303b66cc50e45b6fabd72302f210aebc	intellij-colors-solarized
040000 tree 8f387a531ad08f146c86e4b6007b898064ad4d7f	iterm2-colors-solarized
040000 tree 1e37592e62c85909be4c5e5eb774f177766e8422	mutt-colors-solarized
040000 tree 8f321f917040d903f701a2b33aeee26aed2ee544	netbeans-colors-solarized
040000 tree 0d408465820822f6a2afccf43e9627375fedc278	osx-terminal.app-colors-solarized
040000 tree 63dfa6c40d214f8e0f76d39f7a2283e053940a19	putty-colors-solarized
040000 tree 453921a267d3eb855e40c7de73aee46088563f3e	qtcreator
040000 tree 5dd6832a324187f8f521bef928891fb87cf845f6	seestyle-colors-solarized
040000 tree 3c15973ed107e7b37d1c4885f82984658ecbdf6a	textmate-colors-solarized
040000 tree 4db152b36a47e31a872e778c02161f537888e44b	textwrangler-bbedit-colors-solarized
040000 tree 09b5f2f69e1596c6ff66fb187ea6bdc385845152	tmux
040000 tree 635ebbb919fcbbaf6fe958998553bf3f5fe09210	utils
040000 tree b87a2100b0a79424cd4b2a4e4ef03274b130a206	vim-colors-solarized
040000 tree 8dea7190b79c05404aa6a1f0d67c5c6671d66fe1	visualstudio-colors-solarized
040000 tree 0a531826e913a4b11823ee1be6e1b367f826006f	xchat
040000 tree 2870bdf394a6b6b3bd10c263ffe9396a0d3d3366	xfce4-terminal
040000 tree 5d1a212e2fd9cdc2b678e3be56cf776b2f16cfe2	xresources</code></pre>
<p>The number at the beginning of each entry represents the entry permissions, and is a subset of Unix file permissions. <code>100644</code> corresponds to a blob, which is the Git object corresponding to a file, and <code>040000</code> corresponds to a tree. Other numbers exist but are uncommon. The rest of the tree entry is the entry reference and the entry name.</p>
<p>As before, we should be able to decompress the file and get essentially the same output as before, right?</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb34-1" data-line-number="1">tree <span class="ot">&lt;-</span> decompress <span class="fu">&lt;$&gt;</span> B.readFile <span class="st">&quot;.git/objects/ec/d0e58d6832566540a30dfd4878db518d5451d0&quot;</span></a>
<a class="sourceLine" id="cb34-2" data-line-number="2">print tree</a></code></pre></div>
<pre><code>&quot;tree 1282\NUL100644 .gitmodules\NUL\230\157\226\155\178\209\214CK\139)\174wZ\216\194\228\140S\145\&amp;100644 CHANGELOG.mkd\NUL\236\NUL\167`aS\156\247taG\136&#39;\STX\DC4I\150\150\248q100644 DEVELOPERS.mkd\NUL\249Z\175\128\NUL}\&quot;_\NUL\211\DLE\153\135\238B\239,.\f\n100644 LICENSE\NUL\238\b\215\228O\NAK\DLE\142\245\&amp;5\149P9\157\173U\149[V\202\&amp;100644 README.md\NUL\209\142\233E\STXQ\234\ESC\154\STX\235\212\214\252\224\&quot;\223\158\181\228\&amp;40000 adobe-swatches-solarized\NUL\EM\129\199h\129\198\161N\DC4\208g\164BG\172\209\191k\188:40000 apple-colorpalette-solarized\NUL\130\\s+\221:b\174\181C\202\137\STXj&amp;\162\238\SI\186&amp;40000 emacs-colors-solarized\NUL{\171((\223]\226\&amp;2b\168!\204H\254\f\207\139\210\169\174\&amp;40000 files\NUL\245\254\140&gt; \178Wr#\246\ETBh:R\234\195\FS\\\159\&amp;040000 gedit\NUL[`\DC1\NAK\DLE\219\179\216V\f\245\138\&amp;6\162\n\153\252\ETBVX40000 gimp-palette-solarized\NUL`\201\223=n\EM\148\183mr\192a\160&amp;9\175=\146VU40000 img\NUL\151\156\244\&amp;7R\228\214\152\199\181\180|\255fQB\162t\193\&amp;340000 intellij-colors-solarized\NUL?\246\212\&amp;10;f\204P\228[o\171\215#\STX\242\DLE\174\188\&amp;40000 iterm2-colors-solarized\NUL\143\&amp;8zS\SUB\208\143\DC4l\134\228\182\NUL{\137\128d\173M\DEL40000 mutt-colors-solarized\NUL\RS7Y.b\200Y\t\190L^^\183t\241wvn\132\&quot;40000 netbeans-colors-solarized\NUL\143\&amp;2\US\145p@\217\ETX\247\SOH\162\179:\238\226j\237.\229D40000 osx-terminal.app-colors-solarized\NUL\r@\132e\130\b\&quot;\246\162\175\204\244&gt;\150&#39;7_\237\194x40000 putty-colors-solarized\NULc\223\166\196\r!O\142\SIv\211\159z\&quot;\131\224S\148\n\EM40000 qtcreator\NULE9!\162g\211\235\133^@\199\222s\174\228`\136V?&gt;40000 seestyle-colors-solarized\NUL]\214\131*2A\135\248\245!\190\249(\137\US\184|\248E\246\&amp;40000 textmate-colors-solarized\NUL&lt;\NAK\151&gt;\209\a\231\179}\FSH\133\248)\132e\142\203\223j40000 textwrangler-bbedit-colors-solarized\NULM\177R\179jG\227\SUB\135.w\140\STX\SYN\USSx\136\228K40000 tmux\NUL\t\181\242\246\158\NAK\150\198\255f\251\CAN~\166\189\195\133\132QR40000 utils\NULc^\187\185\EM\252\187\175o\233X\153\133S\191?_\224\146\DLE40000 vim-colors-solarized\NUL\184z!\NUL\176\167\148$\205K*NN\240\&amp;2t\177\&amp;0\162\ACK40000 visualstudio-colors-solarized\NUL\141\234q\144\183\156\ENQ@J\166\161\240\214|\\fq\214o\225\&amp;40000 xchat\NUL\nS\CAN&amp;\233\DC3\164\177\CAN#\238\ESC\230\225\179g\248&amp;\NULo40000 xfce4-terminal\NUL(p\189\243\148\166\182\179\189\DLE\194c\255\233\&amp;9j\r=3f40000 xresources\NUL]\SUB!./\217\205\194\182x\227\190V\207wk/\SYN\207\226&quot;</code></pre>
<p>Although this looks very much like gibberish, it is the same content as above with one big difference: instead of the 40-byte hexadecimal representation of a SHA1 hash, the 20-byte representation is used. The <code>tree &lt;length&gt;</code> header is present, as is the entry permission. Each entry name is followed by a <code>\NUL</code> to facilitate parsing.</p>
<p>We are now able to define a parser for tree objects. Rabbit hole: the tree entries need to be sorted in a certain quirky order, and we would like to disallow duplicates. Use a different data structure and manual <code>Ord</code> definitions to ensure this.</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb36-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Data.ByteString.Base16</span> (encode)</a>
<a class="sourceLine" id="cb36-2" data-line-number="2"></a>
<a class="sourceLine" id="cb36-3" data-line-number="3"><span class="ot">parseBinRef ::</span> <span class="dt">Parser</span> <span class="dt">Ref</span></a>
<a class="sourceLine" id="cb36-4" data-line-number="4">parseBinRef <span class="fu">=</span> encode <span class="fu">&lt;$&gt;</span> AC.take <span class="dv">20</span></a>
<a class="sourceLine" id="cb36-5" data-line-number="5"></a>
<a class="sourceLine" id="cb36-6" data-line-number="6"><span class="kw">data</span> <span class="dt">Tree</span> <span class="fu">=</span> <span class="dt">Tree</span> {<span class="ot"> treeEntries ::</span> [<span class="dt">TreeEntry</span>] } <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</a>
<a class="sourceLine" id="cb36-7" data-line-number="7"></a>
<a class="sourceLine" id="cb36-8" data-line-number="8"><span class="kw">data</span> <span class="dt">TreeEntry</span> <span class="fu">=</span> <span class="dt">TreeEntry</span></a>
<a class="sourceLine" id="cb36-9" data-line-number="9">    {<span class="ot"> treeEntryPerms ::</span> <span class="dt">ByteString</span></a>
<a class="sourceLine" id="cb36-10" data-line-number="10">    ,<span class="ot"> treeEntryName  ::</span> <span class="dt">ByteString</span></a>
<a class="sourceLine" id="cb36-11" data-line-number="11">    ,<span class="ot"> treeEntryRef   ::</span> <span class="dt">Ref</span></a>
<a class="sourceLine" id="cb36-12" data-line-number="12">    } <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</a>
<a class="sourceLine" id="cb36-13" data-line-number="13"></a>
<a class="sourceLine" id="cb36-14" data-line-number="14"><span class="ot">parseTreeEntry ::</span> <span class="dt">Parser</span> <span class="dt">TreeEntry</span></a>
<a class="sourceLine" id="cb36-15" data-line-number="15">parseTreeEntry <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb36-16" data-line-number="16">    perms <span class="ot">&lt;-</span> fromString <span class="fu">&lt;$&gt;</span> AC.many1&#39; AC.digit</a>
<a class="sourceLine" id="cb36-17" data-line-number="17">    AC.space</a>
<a class="sourceLine" id="cb36-18" data-line-number="18">    name  <span class="ot">&lt;-</span> AC.takeWhile (<span class="fu">/=</span><span class="ch">&#39;\NUL&#39;</span>)</a>
<a class="sourceLine" id="cb36-19" data-line-number="19">    AC.char <span class="ch">&#39;\NUL&#39;</span></a>
<a class="sourceLine" id="cb36-20" data-line-number="20">    ref   <span class="ot">&lt;-</span> parseBinRef</a>
<a class="sourceLine" id="cb36-21" data-line-number="21">    return <span class="fu">$</span> <span class="dt">TreeEntry</span> perms name ref</a>
<a class="sourceLine" id="cb36-22" data-line-number="22"></a>
<a class="sourceLine" id="cb36-23" data-line-number="23"><span class="ot">parseTree ::</span> <span class="dt">Parser</span> <span class="dt">Tree</span></a>
<a class="sourceLine" id="cb36-24" data-line-number="24">parseTree <span class="fu">=</span> <span class="dt">Tree</span> <span class="fu">&lt;$&gt;</span> AC.many&#39; parseTreeEntry</a>
<a class="sourceLine" id="cb36-25" data-line-number="25"></a>
<a class="sourceLine" id="cb36-26" data-line-number="26">parsedTree <span class="fu">=</span> parsed (parseHeader <span class="fu">*&gt;</span> parseTree) tree</a>
<a class="sourceLine" id="cb36-27" data-line-number="27">parsedTree</a></code></pre></div>
<pre><code>Tree {treeEntries = [TreeEntry {treeEntryPerms = &quot;100644&quot;, treeEntryName = &quot;.gitmodules&quot;, treeEntryRef = &quot;e69de29bb2d1d6434b8b29ae775ad8c2e48c5391&quot;},TreeEntry {treeEntryPerms = &quot;100644&quot;, treeEntryName = &quot;CHANGELOG.mkd&quot;, treeEntryRef = &quot;ec00a76061539cf774614788270214499696f871&quot;},TreeEntry {treeEntryPerms = &quot;100644&quot;, treeEntryName = &quot;DEVELOPERS.mkd&quot;, treeEntryRef = &quot;f95aaf80007d225f00d3109987ee42ef2c2e0c0a&quot;},TreeEntry {treeEntryPerms = &quot;100644&quot;, treeEntryName = &quot;LICENSE&quot;, treeEntryRef = &quot;ee08d7e44f15108ef5359550399dad55955b56ca&quot;},TreeEntry {treeEntryPerms = &quot;100644&quot;, treeEntryName = &quot;README.md&quot;, treeEntryRef = &quot;d18ee9450251ea1b9a02ebd4d6fce022df9eb5e4&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;adobe-swatches-solarized&quot;, treeEntryRef = &quot;1981c76881c6a14e14d067a44247acd1bf6bbc3a&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;apple-colorpalette-solarized&quot;, treeEntryRef = &quot;825c732bdd3a62aeb543ca89026a26a2ee0fba26&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;emacs-colors-solarized&quot;, treeEntryRef = &quot;7bab2828df5de23262a821cc48fe0ccf8bd2a9ae&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;files&quot;, treeEntryRef = &quot;f5fe8c3e20b2577223f617683a52eac31c5c9f30&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;gedit&quot;, treeEntryRef = &quot;5b60111510dbb3d8560cf58a36a20a99fc175658&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;gimp-palette-solarized&quot;, treeEntryRef = &quot;60c9df3d6e1994b76d72c061a02639af3d925655&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;img&quot;, treeEntryRef = &quot;979cf43752e4d698c7b5b47cff665142a274c133&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;intellij-colors-solarized&quot;, treeEntryRef = &quot;3ff6d431303b66cc50e45b6fabd72302f210aebc&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;iterm2-colors-solarized&quot;, treeEntryRef = &quot;8f387a531ad08f146c86e4b6007b898064ad4d7f&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;mutt-colors-solarized&quot;, treeEntryRef = &quot;1e37592e62c85909be4c5e5eb774f177766e8422&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;netbeans-colors-solarized&quot;, treeEntryRef = &quot;8f321f917040d903f701a2b33aeee26aed2ee544&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;osx-terminal.app-colors-solarized&quot;, treeEntryRef = &quot;0d408465820822f6a2afccf43e9627375fedc278&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;putty-colors-solarized&quot;, treeEntryRef = &quot;63dfa6c40d214f8e0f76d39f7a2283e053940a19&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;qtcreator&quot;, treeEntryRef = &quot;453921a267d3eb855e40c7de73aee46088563f3e&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;seestyle-colors-solarized&quot;, treeEntryRef = &quot;5dd6832a324187f8f521bef928891fb87cf845f6&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;textmate-colors-solarized&quot;, treeEntryRef = &quot;3c15973ed107e7b37d1c4885f82984658ecbdf6a&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;textwrangler-bbedit-colors-solarized&quot;, treeEntryRef = &quot;4db152b36a47e31a872e778c02161f537888e44b&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;tmux&quot;, treeEntryRef = &quot;09b5f2f69e1596c6ff66fb187ea6bdc385845152&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;utils&quot;, treeEntryRef = &quot;635ebbb919fcbbaf6fe958998553bf3f5fe09210&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;vim-colors-solarized&quot;, treeEntryRef = &quot;b87a2100b0a79424cd4b2a4e4ef03274b130a206&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;visualstudio-colors-solarized&quot;, treeEntryRef = &quot;8dea7190b79c05404aa6a1f0d67c5c6671d66fe1&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;xchat&quot;, treeEntryRef = &quot;0a531826e913a4b11823ee1be6e1b367f826006f&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;xfce4-terminal&quot;, treeEntryRef = &quot;2870bdf394a6b6b3bd10c263ffe9396a0d3d3366&quot;},TreeEntry {treeEntryPerms = &quot;40000&quot;, treeEntryName = &quot;xresources&quot;, treeEntryRef = &quot;5d1a212e2fd9cdc2b678e3be56cf776b2f16cfe2&quot;}]}</code></pre>
<p>It’s similarly straightforward to define a serialiser. All we have to do is serialise the tree entries and concatenate them.</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb38-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Data.ByteString.Base16</span> (decode)</a>
<a class="sourceLine" id="cb38-2" data-line-number="2"></a>
<a class="sourceLine" id="cb38-3" data-line-number="3"><span class="kw">instance</span> <span class="dt">Byteable</span> <span class="dt">TreeEntry</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb38-4" data-line-number="4">    toBytes (<span class="dt">TreeEntry</span> perms name ref) <span class="fu">=</span> mconcat [perms, <span class="st">&quot; &quot;</span>, name, <span class="st">&quot;\NUL&quot;</span>, fst <span class="fu">$</span> decode ref]</a>
<a class="sourceLine" id="cb38-5" data-line-number="5"></a>
<a class="sourceLine" id="cb38-6" data-line-number="6"><span class="kw">instance</span> <span class="dt">Byteable</span> <span class="dt">Tree</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb38-7" data-line-number="7">    toBytes (<span class="dt">Tree</span> entries) <span class="fu">=</span> mconcat (map toBytes entries)</a>
<a class="sourceLine" id="cb38-8" data-line-number="8"></a>
<a class="sourceLine" id="cb38-9" data-line-number="9">(parsed parseTree <span class="fu">.</span> toBytes <span class="fu">$</span> parsedTree) <span class="fu">==</span> parsedTree</a></code></pre></div>
<pre><code>True</code></pre>
<p>Next we move to blobs. I’m using the reference associated with <code>CHANGELOG.mkd</code> because <code>.gitmodules</code> is empty, and limiting the output to the first ten lines for now because we’ll see the whole thing later anyway.</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb40-1" data-line-number="1"><span class="fu">:!</span>git cat<span class="fu">-</span>file <span class="fu">-</span>p ec00a76061539cf774614788270214499696f871 <span class="fu">|</span> head <span class="fu">-</span>n10</a></code></pre></div>
<pre><code>Solarized Changelog
===================

## Current release 1.0.0beta2

1.0.0beta2
----------

### Summary</code></pre>
<p>A blob is some bytes with a header.</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb42-1" data-line-number="1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.ByteString.Char8</span> <span class="kw">as</span> <span class="dt">BC</span></a>
<a class="sourceLine" id="cb42-2" data-line-number="2">blob <span class="ot">&lt;-</span> decompress <span class="fu">&lt;$&gt;</span> B.readFile <span class="st">&quot;.git/objects/ec/00a76061539cf774614788270214499696f871&quot;</span></a>
<a class="sourceLine" id="cb42-3" data-line-number="3">print <span class="fu">$</span> BC.unlines <span class="fu">.</span> take <span class="dv">10</span> <span class="fu">.</span> BC.lines <span class="fu">$</span> blob</a></code></pre></div>
<pre><code>&quot;blob 5549\NULSolarized Changelog\n===================\n\n## Current release 1.0.0beta2\n\n1.0.0beta2\n----------\n\n### Summary\n\n&quot;</code></pre>
<p>Parsing blobs is easy!</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb44-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Blob</span> <span class="fu">=</span> <span class="dt">Blob</span> {<span class="ot"> blobContent ::</span> <span class="dt">ByteString</span> } <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</a>
<a class="sourceLine" id="cb44-2" data-line-number="2"></a>
<a class="sourceLine" id="cb44-3" data-line-number="3"><span class="ot">parseBlob ::</span> <span class="dt">Parser</span> <span class="dt">Blob</span></a>
<a class="sourceLine" id="cb44-4" data-line-number="4">parseBlob <span class="fu">=</span> <span class="dt">Blob</span> <span class="fu">&lt;$&gt;</span> AC.takeByteString</a>
<a class="sourceLine" id="cb44-5" data-line-number="5"></a>
<a class="sourceLine" id="cb44-6" data-line-number="6">parsedBlob <span class="fu">=</span> parsed (parseHeader <span class="fu">*&gt;</span> parseBlob) blob</a>
<a class="sourceLine" id="cb44-7" data-line-number="7">parsedBlob</a></code></pre></div>
<pre><code>Blob {blobContent = &quot;Solarized Changelog\n===================\n\n## Current release 1.0.0beta2\n\n1.0.0beta2\n----------\n\n### Summary\n\nSwitch to the alternative red hue (final and only hue change), included a whole\nheap of new ports and updates to the existing Vim colorscheme. The list of all \ncurrently included ports, highlighted items are new, updates noted:\n\n#### Editors &amp; IDEs\n\n*   \\[UPDATED\\] **Vim**\n*   \\[NEW\\] ***Emacs***\n*   \\[NEW\\] ***IntelliJ IDEA***\n*   \\[NEW\\] ***NetBeans***\n*   \\[NEW\\] ***SeeStyle theme for Coda &amp; SubEthaEdit***\n*   \\[NEW\\] ***TextMate***\n*   \\[NEW\\] ***Visual Studio***\n\n#### Terminal Emulators\n\n* \\[UPDATED\\] **iTerm2 colorschemes**\n* \\[UPDATED\\] **OS X Terminal.app colors**\n* \\[UPDATED\\] **Xresources colors**\n\n#### Other Applications\n\n* \\[UPDATED\\] **Mutt mail client colorschemes**\n\n#### Palettes\n\n* \\[UPDATED\\] **Adobe Photoshop Swatches**\n* \\[UPDATED\\] **Apple Color Picker Palette**\n* \\[UPDATED\\] **Gimp Palette**\n\n\n### Critical Changes\n\nThese changes may require you to change your configuration.\n\n*   **GLOBAL : IMPROVEMENT : New red accent color value**\n    Modified red from L\\*a\\*b lightness value 45 to 50 to bring it in\n    line with the other accent colors and address bleed into dark background on \n    some displays, as well as reducing shift of red against base03 when viewed \n    with glasses (chromatic aberration). All instances of the colorscheme and \n    palettes updated to new red and avalailable for use/import without further \n    modification. Forks and ports should pull new changes and/or update ported \n    red value accordingly.  The new red:\n\n            red #dc322f\n\n*   **VIM : CHANGE : Default mode now 16 color**\n    Default terminal mode is now ***16 colors***. Most of the users of terminal \n    mode seem comfortabel and capable changing terminal colors. This is the \n    preferred method of implementing Solarized in Terminal mode. If you wish to \n    instead use the degraded 256 color palette, you may do so with the \n    following line in your .vimrc:\n\n            let g:solarized_termcolors=256\n\n    You no longer need to specify \&quot;let g:solarized_termcolors=16\&quot; as it is now \n    the default; leaving it in your .vimrc won&#39;t hurt anything, however.\n\n*   **VIM : IMPROVEMENT : New Toggle Background Plugin**\n    Added new Toggle Background plugin. Will load automatically and show up as \n    a menu item in the `Window` menu in gui vim. Automatically maps to\n    `&lt;F5&gt;` if available (won&#39;t clobber that mapping if you&#39;re using it).\n    Also available as a command `:ToggleBG`.  To manually map to\n    something other than `&lt;F5&gt;`:\n\n    To set your own mapping in your .vimrc file, simply add the following line \n    to support normal, insert and visual mode usage, changing the\n    \&quot;`&lt;F5&gt;`\&quot; value to the key or key combination you wish to use:\n\n        call togglebg#map(\&quot;&lt;F5&gt;\&quot;)\n\n    Note that you&#39;ll want to use a single function key or equivalent if you want \n    the plugin to work in all modes (normal, insert, visual).\n\n*   **VIM : IMPROVEMENT : Special &amp; Non-text items now more visible**\n    Special characters such as trailing whitespace, tabs, newlines, when \n    displayed using \&quot;:set list\&quot; can be set to one of three levels depending on \n    your needs.\n\n            let g:solarized_visibility =  \&quot;normal\&quot;|   \&quot;high\&quot; or \&quot;low\&quot;\n\n    I&#39;ll be honest: I still prefer low visibility. I like them barely there.  \n    They show up in lines that are highlighted as by the cursor line, which \n    works for me. If you are with me on this, put the following in your .vimrc:\n\n            let g:solarized_visibility =  \&quot;low\&quot;\n\n### Non Critical Changes\n\nThese changes should not impact your usage of the Solarized.\n\n*   **PALETTES : IMPROVEMENT : Colorspace tagged and untagged versions**\n    Changed default OS X color picker palatte swatches to tagged colors (sRGB) \n    and included alternate palette with untagged color swatches for advanced \n    users (v1.0.0beta1 had untagged as default).\n\n*   **VIM : BUGFIX : Better display in Terminal.app, other emulators**\n    Terminal.app and other common terminal emulators that report 8 color mode \n    had display issues due to order of synt highlighting definitions and color \n    values specified. These have been conformed and reordered in such a way \n    that there is a more graceful degrading of the Solarized color palette on \n    8 color terminals. Infact, the experience should be almost identical to gui \n    other than lack of bold typeface.\n\n*   **VIM : BUGFIX : Better distinction between status bar and split windows**\n    Status bar was previously too similar to the cursor line and window splits.  \n    This has now been changed significantly to improve the clarity of what is \n    status, cursor line and window separator.\n\n*   **VIM : STREAMLINED : Removed simultaneous gui/cterm definitions**\n*   Refactored solarized.vim to eliminate simultaneous definition of gui and \n    cterm values.\n\n*   **VIM : BUGFIX : Removed italicized front in terminal mode**\n    Removed default italicized font in terminal mode in the Solarized Vim\n    colorscheme (many terminal emulators display Vim italics as reversed type).  \n    Italics still used in GUI mode by default and can still be turned off in \n    both modes by setting a variable: `let g:solarized_italic=0`.\n\n1.0.0beta1\n----------\n\nFirst public release. Included:\n\n* Adobe Photoshop Swatches\n* Apple Color Picker Palette\n* Gimp Palette\n* iTerm2 colorschemes\n* Mutt mail client colorschemes\n* OS X Terminal.app colors\n* Vim Colorscheme\n* Xresources colors\n\n\n\n***\n\nMODIFIED: 2011 Apr 16\n&quot;}</code></pre>
<p>As is serialising them.</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb46-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Byteable</span> <span class="dt">Blob</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb46-2" data-line-number="2">    toBytes (<span class="dt">Blob</span> content) <span class="fu">=</span> content</a>
<a class="sourceLine" id="cb46-3" data-line-number="3"></a>
<a class="sourceLine" id="cb46-4" data-line-number="4">(parsed parseBlob <span class="fu">.</span> toBytes <span class="fu">$</span> parsedBlob) <span class="fu">==</span> parsedBlob</a></code></pre></div>
<pre><code>True</code></pre>
<p>Finally we move to Git tags, which are a way to associate a name with a reference. Git has a handy <code>show-ref --tags</code> command we can use to list them:</p>
<div class="sourceCode" id="cb48"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb48-1" data-line-number="1"><span class="fu">:!</span>git show<span class="fu">-</span>ref <span class="co">--tags</span></a></code></pre></div>
<pre><code>31ff7f5064824d2231648119feb6dfda1a3c89f5 refs/tags/v1.0.0beta1
a3037b428f29f0c032aeeeedb4758501bc32444d refs/tags/v1.0beta</code></pre>
<p>There are two types of tags: lightweight tags and annotated tags. Lightweight tags are just files very much like <code>refs/heads/master</code> containing a ref, and annotated tags have a message associated with them like a commit. Only annotated tags are Git objects.</p>
<div class="sourceCode" id="cb50"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb50-1" data-line-number="1"><span class="fu">:!</span>git cat<span class="fu">-</span>file <span class="fu">-</span>p 31ff7f5064824d2231648119feb6dfda1a3c89f5</a></code></pre></div>
<pre><code>object 90581c7bfbcd279768580eec595d0ab3c094cc02
type commit
tag v1.0.0beta1
tagger Ethan Schoonover &lt;es@ethanschoonover.com&gt; 1300994142 -0700

Initial public beta release 1.0.0beta1</code></pre>
<p>Although tags are mostly used with commits, it’s possible to tag any Git object. You can even tag another tag, although I can’t see why you might want to.</p>
<div class="sourceCode" id="cb52"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb52-1" data-line-number="1">tag <span class="ot">&lt;-</span> decompress <span class="fu">&lt;$&gt;</span> B.readFile <span class="st">&quot;.git/objects/31/ff7f5064824d2231648119feb6dfda1a3c89f5&quot;</span></a>
<a class="sourceLine" id="cb52-2" data-line-number="2">print tag</a></code></pre></div>
<pre><code>&quot;tag 182\NULobject 90581c7bfbcd279768580eec595d0ab3c094cc02\ntype commit\ntag v1.0.0beta1\ntagger Ethan Schoonover &lt;es@ethanschoonover.com&gt; 1300994142 -0700\n\nInitial public beta release 1.0.0beta1\n&quot;</code></pre>
<p>Our parser for these is very similar to our commit parser. I’ve taken a quick break from my ‘write the worst parser possible’ strategy to make sure that our tags can only tag objects of type ‘commit’, ‘tree’, ‘blob’, or ‘tag’.</p>
<div class="sourceCode" id="cb54"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb54-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Tag</span> <span class="fu">=</span> <span class="dt">Tag</span></a>
<a class="sourceLine" id="cb54-2" data-line-number="2">    {<span class="ot"> tagObject     ::</span> <span class="dt">Ref</span></a>
<a class="sourceLine" id="cb54-3" data-line-number="3">    ,<span class="ot"> tagType       ::</span> <span class="dt">ByteString</span></a>
<a class="sourceLine" id="cb54-4" data-line-number="4">    ,<span class="ot"> tagTag        ::</span> <span class="dt">ByteString</span></a>
<a class="sourceLine" id="cb54-5" data-line-number="5">    ,<span class="ot"> tagTagger     ::</span> <span class="dt">ByteString</span></a>
<a class="sourceLine" id="cb54-6" data-line-number="6">    ,<span class="ot"> tagAnnotation ::</span> <span class="dt">ByteString</span></a>
<a class="sourceLine" id="cb54-7" data-line-number="7">    } <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</a>
<a class="sourceLine" id="cb54-8" data-line-number="8"></a>
<a class="sourceLine" id="cb54-9" data-line-number="9"><span class="ot">parseTag ::</span> <span class="dt">Parser</span> <span class="dt">Tag</span></a>
<a class="sourceLine" id="cb54-10" data-line-number="10">parseTag <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb54-11" data-line-number="11">    tObject     <span class="ot">&lt;-</span> AC.string <span class="st">&quot;object&quot;</span> <span class="fu">*&gt;</span> AC.space <span class="fu">*&gt;</span> parseHexRef                                                 <span class="fu">&lt;*</span> AC.endOfLine</a>
<a class="sourceLine" id="cb54-12" data-line-number="12">    tType       <span class="ot">&lt;-</span> AC.string <span class="st">&quot;type&quot;</span>   <span class="fu">*&gt;</span> AC.space <span class="fu">*&gt;</span> AC.choice (map AC.string [<span class="st">&quot;commit&quot;</span>, <span class="st">&quot;tree&quot;</span>, <span class="st">&quot;blob&quot;</span>, <span class="st">&quot;tag&quot;</span>]) <span class="fu">&lt;*</span> AC.endOfLine</a>
<a class="sourceLine" id="cb54-13" data-line-number="13">    tTag        <span class="ot">&lt;-</span> AC.string <span class="st">&quot;tag&quot;</span>    <span class="fu">*&gt;</span> AC.space <span class="fu">*&gt;</span> AC.takeTill (AC.inClass <span class="st">&quot;\n&quot;</span>)                               <span class="fu">&lt;*</span> AC.endOfLine</a>
<a class="sourceLine" id="cb54-14" data-line-number="14">    tTagger     <span class="ot">&lt;-</span> AC.string <span class="st">&quot;tagger&quot;</span> <span class="fu">*&gt;</span> AC.space <span class="fu">*&gt;</span> AC.takeTill (AC.inClass <span class="st">&quot;\n&quot;</span>)                               <span class="fu">&lt;*</span> AC.endOfLine</a>
<a class="sourceLine" id="cb54-15" data-line-number="15">    AC.endOfLine</a>
<a class="sourceLine" id="cb54-16" data-line-number="16">    tAnnotation <span class="ot">&lt;-</span> AC.takeByteString</a>
<a class="sourceLine" id="cb54-17" data-line-number="17">    return <span class="fu">$</span> <span class="dt">Tag</span> tObject tType tTag tTagger tAnnotation</a>
<a class="sourceLine" id="cb54-18" data-line-number="18"></a>
<a class="sourceLine" id="cb54-19" data-line-number="19">parsedTag <span class="fu">=</span> parsed (parseHeader <span class="fu">*&gt;</span> parseTag) tag</a>
<a class="sourceLine" id="cb54-20" data-line-number="20">parsedTag</a></code></pre></div>
<pre><code>Tag {tagObject = &quot;90581c7bfbcd279768580eec595d0ab3c094cc02&quot;, tagType = &quot;commit&quot;, tagTag = &quot;v1.0.0beta1&quot;, tagTagger = &quot;Ethan Schoonover &lt;es@ethanschoonover.com&gt; 1300994142 -0700&quot;, tagAnnotation = &quot;Initial public beta release 1.0.0beta1\n&quot;}</code></pre>
<p>Our last serialiser follows.</p>
<div class="sourceCode" id="cb56"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb56-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Byteable</span> <span class="dt">Tag</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb56-2" data-line-number="2">    toBytes (<span class="dt">Tag</span> tObject tType tTag tTagger tAnnotation) <span class="fu">=</span> mconcat</a>
<a class="sourceLine" id="cb56-3" data-line-number="3">        [ <span class="st">&quot;object &quot;</span> <span class="fu">&lt;&gt;</span> tObject     <span class="fu">&lt;&gt;</span> <span class="st">&quot;\n&quot;</span></a>
<a class="sourceLine" id="cb56-4" data-line-number="4">        , <span class="st">&quot;type &quot;</span>   <span class="fu">&lt;&gt;</span> tType       <span class="fu">&lt;&gt;</span> <span class="st">&quot;\n&quot;</span></a>
<a class="sourceLine" id="cb56-5" data-line-number="5">        , <span class="st">&quot;tag &quot;</span>    <span class="fu">&lt;&gt;</span> tTag        <span class="fu">&lt;&gt;</span> <span class="st">&quot;\n&quot;</span></a>
<a class="sourceLine" id="cb56-6" data-line-number="6">        , <span class="st">&quot;tagger &quot;</span> <span class="fu">&lt;&gt;</span> tTagger     <span class="fu">&lt;&gt;</span> <span class="st">&quot;\n&quot;</span></a>
<a class="sourceLine" id="cb56-7" data-line-number="7">        ,                             <span class="st">&quot;\n&quot;</span></a>
<a class="sourceLine" id="cb56-8" data-line-number="8">        ,              tAnnotation</a>
<a class="sourceLine" id="cb56-9" data-line-number="9">        ]</a>
<a class="sourceLine" id="cb56-10" data-line-number="10"></a>
<a class="sourceLine" id="cb56-11" data-line-number="11">(parsed parseTag <span class="fu">.</span> toBytes <span class="fu">$</span> parsedTag) <span class="fu">==</span> parsedTag</a></code></pre></div>
<pre><code>True</code></pre>
<p>Okay, now to bring it all together. We can define an umbrella <code>GitObject</code> type and the associated parser, serialiser, and hasher for it.</p>
<div class="sourceCode" id="cb58"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb58-1" data-line-number="1"><span class="kw">data</span> <span class="dt">GitObject</span></a>
<a class="sourceLine" id="cb58-2" data-line-number="2">    <span class="fu">=</span> <span class="dt">GitCommit</span> <span class="dt">Commit</span></a>
<a class="sourceLine" id="cb58-3" data-line-number="3">    <span class="fu">|</span> <span class="dt">GitTree</span>   <span class="dt">Tree</span></a>
<a class="sourceLine" id="cb58-4" data-line-number="4">    <span class="fu">|</span> <span class="dt">GitBlob</span>   <span class="dt">Blob</span></a>
<a class="sourceLine" id="cb58-5" data-line-number="5">    <span class="fu">|</span> <span class="dt">GitTag</span>    <span class="dt">Tag</span></a>
<a class="sourceLine" id="cb58-6" data-line-number="6">    <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</a>
<a class="sourceLine" id="cb58-7" data-line-number="7"></a>
<a class="sourceLine" id="cb58-8" data-line-number="8"><span class="ot">parseGitObject ::</span> <span class="dt">Parser</span> <span class="dt">GitObject</span></a>
<a class="sourceLine" id="cb58-9" data-line-number="9">parseGitObject <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb58-10" data-line-number="10">    headerLen <span class="ot">&lt;-</span> parseHeader</a>
<a class="sourceLine" id="cb58-11" data-line-number="11">    <span class="kw">case</span> (fst headerLen) <span class="kw">of</span></a>
<a class="sourceLine" id="cb58-12" data-line-number="12">        <span class="st">&quot;commit&quot;</span> <span class="ot">-&gt;</span> <span class="dt">GitCommit</span> <span class="fu">&lt;$&gt;</span> parseCommit</a>
<a class="sourceLine" id="cb58-13" data-line-number="13">        <span class="st">&quot;tree&quot;</span>   <span class="ot">-&gt;</span> <span class="dt">GitTree</span>   <span class="fu">&lt;$&gt;</span> parseTree</a>
<a class="sourceLine" id="cb58-14" data-line-number="14">        <span class="st">&quot;blob&quot;</span>   <span class="ot">-&gt;</span> <span class="dt">GitBlob</span>   <span class="fu">&lt;$&gt;</span> parseBlob</a>
<a class="sourceLine" id="cb58-15" data-line-number="15">        <span class="st">&quot;tag&quot;</span>    <span class="ot">-&gt;</span> <span class="dt">GitTag</span>    <span class="fu">&lt;$&gt;</span> parseTag</a>
<a class="sourceLine" id="cb58-16" data-line-number="16">        _        <span class="ot">-&gt;</span> error <span class="st">&quot;not a git object&quot;</span></a>
<a class="sourceLine" id="cb58-17" data-line-number="17"></a>
<a class="sourceLine" id="cb58-18" data-line-number="18"><span class="kw">instance</span> <span class="dt">Byteable</span> <span class="dt">GitObject</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb58-19" data-line-number="19">    toBytes obj <span class="fu">=</span> <span class="kw">case</span> obj <span class="kw">of</span></a>
<a class="sourceLine" id="cb58-20" data-line-number="20">        <span class="dt">GitCommit</span> c <span class="ot">-&gt;</span> withHeader <span class="st">&quot;commit&quot;</span> (toBytes c)</a>
<a class="sourceLine" id="cb58-21" data-line-number="21">        <span class="dt">GitTree</span>   t <span class="ot">-&gt;</span> withHeader <span class="st">&quot;tree&quot;</span>   (toBytes t)</a>
<a class="sourceLine" id="cb58-22" data-line-number="22">        <span class="dt">GitBlob</span>   b <span class="ot">-&gt;</span> withHeader <span class="st">&quot;blob&quot;</span>   (toBytes b)</a>
<a class="sourceLine" id="cb58-23" data-line-number="23">        <span class="dt">GitTag</span>    t <span class="ot">-&gt;</span> withHeader <span class="st">&quot;tag&quot;</span>    (toBytes t)</a>
<a class="sourceLine" id="cb58-24" data-line-number="24"></a>
<a class="sourceLine" id="cb58-25" data-line-number="25"><span class="ot">hashObject ::</span> <span class="dt">GitObject</span> <span class="ot">-&gt;</span> <span class="dt">Ref</span></a>
<a class="sourceLine" id="cb58-26" data-line-number="26">hashObject <span class="fu">=</span> hash <span class="fu">.</span> toBytes</a></code></pre></div>
<p>Let’s do a quick test to check that our definitions work.</p>
<div class="sourceCode" id="cb59"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb59-1" data-line-number="1">hashObject <span class="fu">.</span> parsed parseGitObject <span class="fu">.</span> decompress <span class="fu">&lt;$&gt;</span> B.readFile <span class="st">&quot;.git/objects/31/ff7f5064824d2231648119feb6dfda1a3c89f5&quot;</span></a></code></pre></div>
<pre><code>31ff7f5064824d2231648119feb6dfda1a3c89f5</code></pre>
<p>Excellent, although we are lacking a helper to turn a reference into a Git object filepath. Let’s define that.</p>
<div class="sourceCode" id="cb61"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb61-1" data-line-number="1"><span class="kw">import</span> <span class="dt">System.FilePath</span> ((&lt;/&gt;))</a>
<a class="sourceLine" id="cb61-2" data-line-number="2"></a>
<a class="sourceLine" id="cb61-3" data-line-number="3"><span class="ot">refPath ::</span> FilePath <span class="ot">-&gt;</span> <span class="dt">Ref</span> <span class="ot">-&gt;</span> FilePath</a>
<a class="sourceLine" id="cb61-4" data-line-number="4">refPath gitDir ref <span class="fu">=</span> <span class="kw">let</span></a>
<a class="sourceLine" id="cb61-5" data-line-number="5">   (dir,file) <span class="fu">=</span> splitAt <span class="dv">2</span> (toString ref)</a>
<a class="sourceLine" id="cb61-6" data-line-number="6">   <span class="kw">in</span> gitDir <span class="fu">&lt;/&gt;</span> <span class="st">&quot;objects&quot;</span> <span class="fu">&lt;/&gt;</span> dir <span class="fu">&lt;/&gt;</span> file</a>
<a class="sourceLine" id="cb61-7" data-line-number="7"></a>
<a class="sourceLine" id="cb61-8" data-line-number="8">refPath <span class="st">&quot;.git&quot;</span> <span class="st">&quot;31ff7f5064824d2231648119feb6dfda1a3c89f5&quot;</span></a></code></pre></div>
<pre><code>&quot;.git/objects/31/ff7f5064824d2231648119feb6dfda1a3c89f5&quot;</code></pre>
<p>Now we can define a <code>readObject</code> action that takes a reference and returns a parsed Git object.</p>
<div class="sourceCode" id="cb63"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb63-1" data-line-number="1"><span class="ot">readObject ::</span> FilePath <span class="ot">-&gt;</span> <span class="dt">Ref</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">GitObject</span></a>
<a class="sourceLine" id="cb63-2" data-line-number="2">readObject gitDir ref <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb63-3" data-line-number="3">    <span class="kw">let</span> path <span class="fu">=</span> refPath gitDir ref</a>
<a class="sourceLine" id="cb63-4" data-line-number="4">    content <span class="ot">&lt;-</span> decompress <span class="fu">&lt;$&gt;</span> B.readFile path</a>
<a class="sourceLine" id="cb63-5" data-line-number="5">    return <span class="fu">$</span> parsed parseGitObject content</a>
<a class="sourceLine" id="cb63-6" data-line-number="6"></a>
<a class="sourceLine" id="cb63-7" data-line-number="7">readObject <span class="st">&quot;.git&quot;</span> <span class="st">&quot;31ff7f5064824d2231648119feb6dfda1a3c89f5&quot;</span></a></code></pre></div>
<pre><code>GitTag (Tag {tagObject = &quot;90581c7bfbcd279768580eec595d0ab3c094cc02&quot;, tagType = &quot;commit&quot;, tagTag = &quot;v1.0.0beta1&quot;, tagTagger = &quot;Ethan Schoonover &lt;es@ethanschoonover.com&gt; 1300994142 -0700&quot;, tagAnnotation = &quot;Initial public beta release 1.0.0beta1\n&quot;})</code></pre>
<p>Next we define a <code>writeObject</code> action that takes a Git object and stores it under the right path if it doesn’t already exist. The “doesn’t already exist” bit is the magic of Git: we can safely assume that an object with the same hash is the same object. Every time a tree or blob changes, only the changed objects are written to the disk, and this is how Git manages to be space-efficient.</p>
<div class="sourceCode" id="cb65"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb65-1" data-line-number="1"><span class="kw">import</span> <span class="dt">System.Directory</span> (doesPathExist, createDirectoryIfMissing)</a>
<a class="sourceLine" id="cb65-2" data-line-number="2"><span class="kw">import</span> <span class="dt">System.FilePath</span>  (takeDirectory)</a>
<a class="sourceLine" id="cb65-3" data-line-number="3"><span class="kw">import</span> <span class="dt">Control.Monad</span>    (when, unless)</a>
<a class="sourceLine" id="cb65-4" data-line-number="4"></a>
<a class="sourceLine" id="cb65-5" data-line-number="5"><span class="ot">writeObject ::</span> FilePath <span class="ot">-&gt;</span> <span class="dt">GitObject</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Ref</span></a>
<a class="sourceLine" id="cb65-6" data-line-number="6">writeObject gitDir object <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb65-7" data-line-number="7">    <span class="kw">let</span> ref  <span class="fu">=</span>  hashObject object</a>
<a class="sourceLine" id="cb65-8" data-line-number="8">    <span class="kw">let</span> path <span class="fu">=</span>  refPath gitDir ref</a>
<a class="sourceLine" id="cb65-9" data-line-number="9">    exists   <span class="ot">&lt;-</span> doesPathExist path</a>
<a class="sourceLine" id="cb65-10" data-line-number="10">    unless exists <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb65-11" data-line-number="11">        <span class="kw">let</span> dir <span class="fu">=</span> takeDirectory path</a>
<a class="sourceLine" id="cb65-12" data-line-number="12">        createDirectoryIfMissing <span class="dt">True</span> dir</a>
<a class="sourceLine" id="cb65-13" data-line-number="13">        B.writeFile path <span class="fu">.</span> compress <span class="fu">$</span> toBytes object</a>
<a class="sourceLine" id="cb65-14" data-line-number="14">    return ref</a></code></pre></div>
<p>Okay, time for the grand finale! We’re going to read and then write every object in this Git repository. If we’ve implemented everything correctly, the number of references before and after will be unchanged, and they will be the same references.</p>
<div class="sourceCode" id="cb66"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb66-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Data.Traversable</span> (for)</a>
<a class="sourceLine" id="cb66-2" data-line-number="2"><span class="kw">import</span> <span class="dt">System.Directory</span> (listDirectory)</a>
<a class="sourceLine" id="cb66-3" data-line-number="3"></a>
<a class="sourceLine" id="cb66-4" data-line-number="4">allRefs <span class="ot">&lt;-</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb66-5" data-line-number="5">    prefixes <span class="ot">&lt;-</span> filter (\d <span class="ot">-&gt;</span> length d <span class="fu">==</span> <span class="dv">2</span>) <span class="fu">&lt;$&gt;</span> listDirectory <span class="st">&quot;.git/objects/&quot;</span></a>
<a class="sourceLine" id="cb66-6" data-line-number="6">    concat <span class="fu">&lt;$&gt;</span> for prefixes (\p <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb66-7" data-line-number="7">        map (fromString <span class="fu">.</span> (p<span class="fu">++</span>)) <span class="fu">&lt;$&gt;</span> listDirectory (<span class="st">&quot;.git/objects&quot;</span> <span class="fu">&lt;/&gt;</span> p))</a>
<a class="sourceLine" id="cb66-8" data-line-number="8"></a>
<a class="sourceLine" id="cb66-9" data-line-number="9">print <span class="fu">$</span> length allRefs</a>
<a class="sourceLine" id="cb66-10" data-line-number="10"></a>
<a class="sourceLine" id="cb66-11" data-line-number="11">test <span class="ot">&lt;-</span> for allRefs <span class="fu">$</span> \ref <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb66-12" data-line-number="12">    obj  <span class="ot">&lt;-</span> readObject  <span class="st">&quot;.git&quot;</span> ref</a>
<a class="sourceLine" id="cb66-13" data-line-number="13">    ref&#39; <span class="ot">&lt;-</span> writeObject <span class="st">&quot;.git&quot;</span> obj</a>
<a class="sourceLine" id="cb66-14" data-line-number="14">    return <span class="fu">$</span> ref <span class="fu">==</span> ref&#39;</a>
<a class="sourceLine" id="cb66-15" data-line-number="15"></a>
<a class="sourceLine" id="cb66-16" data-line-number="16">and test</a>
<a class="sourceLine" id="cb66-17" data-line-number="17"></a>
<a class="sourceLine" id="cb66-18" data-line-number="18">allRefs&#39; <span class="ot">&lt;-</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb66-19" data-line-number="19">    prefixes <span class="ot">&lt;-</span> filter (\d <span class="ot">-&gt;</span> length d <span class="fu">==</span> <span class="dv">2</span>) <span class="fu">&lt;$&gt;</span> listDirectory <span class="st">&quot;.git/objects/&quot;</span></a>
<a class="sourceLine" id="cb66-20" data-line-number="20">    concat <span class="fu">&lt;$&gt;</span> for prefixes (\p <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb66-21" data-line-number="21">        map (fromString <span class="fu">.</span> (p<span class="fu">++</span>)) <span class="fu">&lt;$&gt;</span> listDirectory (<span class="st">&quot;.git/objects&quot;</span> <span class="fu">&lt;/&gt;</span> p))</a>
<a class="sourceLine" id="cb66-22" data-line-number="22"></a>
<a class="sourceLine" id="cb66-23" data-line-number="23">print <span class="fu">$</span> length allRefs&#39;</a>
<a class="sourceLine" id="cb66-24" data-line-number="24"></a>
<a class="sourceLine" id="cb66-25" data-line-number="25">allRefs <span class="fu">==</span> allRefs&#39;</a></code></pre></div>
<pre><code>2186



True



2186



True</code></pre>
<p>And that’s essentially all there is to Git! I’ve skipped over most of the additional quirks, features, and optimisations but I hope I’ve established that even with the relatively small amount of code above you can implement a working and usable Git API.</p>
<p>You’ll notice that one thing I haven’t mentioned at all is diffing or merging. That’s because Git doesn’t store diffs! They are computed on the fly when you ask for them. The packfile format does do diffing as a space optimisation, but I think it’s important to point out that you can have a perfectly cromulent implementation without them because that is what surprised me the most when I learned this for the first time.</p>
<p>A good mental model of Git empowered me to use it better. I’d heard that binary files and Git don’t go well together, but I only understood why recently: Git stores every version of every file, and binary files don’t compress very well (unlike text files), so they take up huge amounts of space. I’d also read about <a href="https://github.com/CocoaPods/CocoaPods/issues/4989#issuecomment-193772935">CocoaPods causing issues for GitHub</a>, and now I know that this is because the tree objects representing the <code>Specs</code> directory were very large and constantly getting updated, leading to a lot of stress on GitHub’s servers.</p>
<p>What else can you do with this power? You can…</p>
<ul>
<li><a href="https://github.com/vaibhavsagar/git-internals-workshop">Craft your own repositories</a></li>
<li>Run analytics on your commit graph when <code>git log</code> won’t cut it!</li>
<li><a href="https://github.com/vaibhavsagar/suppandi">Write a web API for your repository!</a></li>
<li><a href="https://github.com/mirage/irmin">Use Git as the backend of your application and get diffing/merging for free!</a></li>
</ul>
<p>The possibilities are endless!</p>
<p>If you’d like to learn more, you’re in luck! writing on this topic is plentiful and of extremely high quality. I started with the Git Book’s <a href="https://git-scm.com/book/en/v2/Git-Internals-Git-Objects">chapter on Git Internals</a> and referred frequently to Vincent Hanquez’s <a href="https://github.com/vincenthz/hs-git/">hs-git</a> and Stefan Saasen’s <a href="http://stefan.saasen.me/articles/git-clone-in-haskell-from-the-bottom-up/">overwhelmingly thorough article</a> that implements enough of Git to do a <code>git clone</code> (!). Other resources include Mary Rose Cook’s excellent <a href="https://maryrosecook.com/blog/post/git-from-the-inside-out">Git from the inside out</a> and <a href="http://gitlet.maryrosecook.com/docs/gitlet.html">Gitlet</a> as well as John Wiegley’s <a href="https://jwiegley.github.io/git-from-the-bottom-up/">Git from the Bottom Up</a>. If nothing else, I hope the sheer proliferation of Git innards writing is enough to convince you that this is a useful and rewarding approach to learning about it.</p>
<p>Thanks to <a href="https://anniecherkaev.com/">Annie Cherkaev</a>, <a href="https://fineshambles.com/">Iain McCoy</a>, <a href="https://jaseemabid.github.io/">Jaseem Abid</a>, <a href="https://jship.github.io/">Jason Shipman</a>, <a href="http://teh.id.au/">Tim Humphries</a>, and <a href="https://viljetic.de/">Tomislav Viljetic</a> for comments, clarification, and suggestions.</p>
]]></summary>
</entry>
<entry>
    <title>Easy Pull Requests</title>
    <link href="http://vaibhavsagar.com/blog/2017/07/31/easy-pull-requests/index.html" />
    <id>http://vaibhavsagar.com/blog/2017/07/31/easy-pull-requests/index.html</id>
    <published>2017-07-31T00:00:00Z</published>
    <updated>2017-07-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on 31 July 2017
    
</div>
<div class="info">
    
        Tags: <a href="/blog/tags/programming/index.html">programming</a>
    
</div>

<p>There are many reasons to start contributing to open source:</p>
<ul>
<li>to give back to the community</li>
<li>to fix a bug in software you depend on</li>
<li>warm fuzzies</li>
</ul>
<p>But you don’t always have the time or energy to understand a new codebase well enough to make a meaningful change to it. And even if you do, it’s not clear that this is the best use of your time.</p>
<p>Your pull request might linger untouched for months, like the source control equivalent of shouting into the void. Alternatively, the maintainer might be having a bad day and dismiss your pull request or expect you to do some arcane Git voodoo to bring it up to their exacting standards. All this can turn the gift of patches into a boring and unpleasant chore.</p>
<p>For a long time I mistakenly believed the the only <strong>real</strong> contributions were those that included code to fix bugs or add new features. Eventually I realised there were simpler ways of getting my name in commit logs and my open source contributions vastly increased.</p>
<p>I decided to focus on easy pull requests as a precursor to, or instead of, engaging more fully with a project. What do I mean by this?</p>
<h2 id="documentation-and-typo-fixes">Documentation and typo fixes</h2>
<p>Lindsey Kuper has <a href="http://composition.al/blog/2013/05/31/one-character-patches/">a great post on these</a>. They are my favourite because I am a pedant. Witness <a href="https://github.com/pulls?utf8=%E2%9C%93&amp;q=is%3Apr+author%3Avaibhavsagar+is%3Aclosed+README">the absurd number of README updates</a> I have to my name. They’re as easy as noticing a typo, clicking the pencil icon, and fixing it. Editing project documentation is similarly straightforward.</p>
<p>This is the quickest way I know of to contribute and gauge a project’s health at the same time. If your typo fix doesn’t get merged quickly, then a more substantial change probably won’t either and you’ll have found that out quickly.</p>
<h2 id="linter-suggestions">Linter suggestions</h2>
<p>One day I decided to run HLint, a Haskell linter, on a couple of projects and open PRs accordingly. I had <a href="https://github.com/pulls?q=is%3Apr+author%3Avaibhavsagar+HLint+is%3Aclosed">mixed results</a>.</p>
<p>This technique isn’t Haskell specific, and I think it is especially well-suited to Python and Go projects where there is a ‘blessed’ style to work off and tools like <code>flake8</code> and <code>gofmt</code> are available.</p>
<p>If your change gets accepted, then you’ll be improving code quality and paving the way for future contributors. If it doesn’t, then you might have a discussion about good style that might lead to a documentation PR! If the maintainers are hostile, then you’re probably better off elsewhere.</p>
<h2 id="automated-testing">Automated testing</h2>
<p>I’m a big fan of automation, and I’d consider it one of the themes of this blog. A large number of projects don’t have good automated test suites, and even those that do sometimes let their CI setup rot over time. If this is the case, setting up Travis or Circle CI is a low-effort (if occasionally high-frustration) way of vastly improving a project. If information about how to test a specific project isn’t readily available, this is also a great opportunity for a README update (see above).</p>
<p>Again: if you don’t get a quick response, or at least a positive one, I think it’s a good sign that this project is not worth your time and at least you won’t have put a ton of effort into finding that out.</p>
<p>Of course, these aren’t the only types of easy contributions you can make: other ideas are documenting the undocumented, adding or refactoring tests, and using the issue tracker to call attention to bugs. Neil Mitchell has a great presentation on <a href="http://ndmitchell.com/downloads/slides-drive-by_haskell_contributions-09_jun_2017.pdf">‘Drive-by Haskell Contributions’</a>, although the general approach is applicable to your programming language of choice.</p>
<p>I hope I’ve given you a few ideas about contributing to open source and how you can make effective use of your time, and I’d love to see more easy pull requests by you!</p>
<p>Thanks to <a href="https://jvns.ca/">Julia Evans</a>, <a href="https://haroldtreen.com/">Harold Treen</a>, and <a href="http://digitalfreepen.com">Rudi Chen</a> for comments and feedback.</p>
]]></summary>
</entry>
<entry>
    <title>An All-in-One DAG Toolkit</title>
    <link href="http://vaibhavsagar.com/blog/2017/06/10/dag-toolkit/index.html" />
    <id>http://vaibhavsagar.com/blog/2017/06/10/dag-toolkit/index.html</id>
    <published>2017-06-10T00:00:00Z</published>
    <updated>2017-06-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on 10 June 2017
    
</div>
<div class="info">
    
        Tags: <a href="/blog/tags/programming/index.html">programming</a>
    
</div>

<p><em><a href="http://howtorecover.me">HTR</a> has kindly <a href="http://howtorecover.me/instrumentarii-dag-all-one">translated this post</a> to Russian.</em></p>
<p>I’d like to tell you about an algorithm that I’m frankly annoyed I didn’t discover earlier.</p>
<p>The algorithm is <a href="https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm">Tarjan’s Strongly Connected Components</a> (or SCCs) algorithm, and as the name suggests, it decomposes a directed graph into its strongly connected components. A <a href="https://en.wikipedia.org/wiki/Directed_graph">directed graph</a> is one where the edges have a direction associated with them, and a <a href="https://en.wikipedia.org/wiki/Strongly_connected_component">strongly connected component</a> of a graph is a subgraph where each node can be reached from every other node, i.e. there’s a directed cycle somewhere in this subgraph.</p>
<style>
img[src*='#center'] {
    display: block;
    margin: auto;
}
p.caption {
    text-align: center;
    font-size: 80%;
}
</style>
<figure>
<img src="https://upload.wikimedia.org/wikipedia/commons/5/5c/Scc.png#center" alt="Strongly Connected Components" /><figcaption>Strongly Connected Components</figcaption>
</figure>
<p>So why does this matter? I don’t recall ever having the desire to deeply know the SCCs of a particular graph.</p>
<p>Let’s look at a different problem. Given a directed graph, how do we know if it is acyclic? The context here is that I was wondering how difficult it would be literally draw a Git commit history as a graph and render that to a repo. Git commits form a <a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">directed acyclic graph</a> (DAG), which is a directed graph without cycles, and I wanted to validate a user-drawn graph as well as process it.</p>
<figure>
<img src="https://upload.wikimedia.org/wikipedia/commons/f/fe/Tred-G.svg#center" alt="Directed Acyclic Graph" /><figcaption>Directed Acyclic Graph</figcaption>
</figure>
<p>Consulting <a href="https://stackoverflow.com/questions/583876/how-do-i-check-if-a-directed-graph-is-acyclic">the oracle</a> yielded the concept of a <a href="https://en.wikipedia.org/wiki/Topological_sorting">topological sort</a>, which is where vertices are ordered such that for all vertices <em>u</em> and <em>v</em>, if there is an edge from <em>u</em> to <em>v</em>, <em>u</em> appears earlier than <em>v</em> in the sorted output. The directed edges for a Git commit graph are in the opposite direction from what we want though, because they point from children to parents. What we really want is a reverse topological sort. It would also be nice if I could somehow highlight the subgraphs of an invalid graph that are responsible for it being invalid.</p>
<figure>
<img src="https://upload.wikimedia.org/wikipedia/commons/c/c6/Topological_Ordering.svg#center" alt="Topological Sort" /><figcaption>Topological Sort</figcaption>
</figure>
<p>This is where we come back to the SCCs of a graph. If there are any SCCs of more than one vertex, the graph is not a DAG and those SCCs are the cause of this. Collapsing the SCCs of a directed graph to a single vertex always leads to a DAG and this is known as the condensation of a directed graph, which I think is a nice way to visualise the relationship between SCCs and DAGs.</p>
<figure>
<img src="https://upload.wikimedia.org/wikipedia/commons/2/20/Graph_Condensation.svg#center" alt="Condensation" /><figcaption>Condensation</figcaption>
</figure>
<p>Alright, so we do actually want to know the SCCs of this graph, but first we want to try to sort it topologically and reverse that order if that is possible, otherwise we calculate the SCCs and identify the offending ones. This seems a bit messy for graph properties that seem somewhat related. How cool would it be if there were an algorithm that could calculate the SCCs and a reverse topological sort for us <em>at the same time</em>?</p>
<p>It turns out that Tarjan’s SCCs algorithm does exactly that! You’d think that its performance might not be great because it does two things at once, but it is linear in the number of edges and vertices, and has better constant factors than <a href="https://en.wikipedia.org/wiki/Kosaraju&#39;s_algorithm">Kosaraju’s algorithm</a>, which only computes SCCs. Here it is as pseudocode:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode noweb"><code class="sourceCode noweb"><a class="sourceLine" id="cb1-1" data-line-number="1"> algorithm tarjan is</a>
<a class="sourceLine" id="cb1-2" data-line-number="2">  input: graph G = (V, E)</a>
<a class="sourceLine" id="cb1-3" data-line-number="3">  output: set of strongly connected components (sets of vertices)</a>
<a class="sourceLine" id="cb1-4" data-line-number="4"></a>
<a class="sourceLine" id="cb1-5" data-line-number="5">  index := 0</a>
<a class="sourceLine" id="cb1-6" data-line-number="6">  S := empty array</a>
<a class="sourceLine" id="cb1-7" data-line-number="7">  for each v in V do</a>
<a class="sourceLine" id="cb1-8" data-line-number="8">    if (v.index is undefined) then</a>
<a class="sourceLine" id="cb1-9" data-line-number="9">      strongconnect(v)</a>
<a class="sourceLine" id="cb1-10" data-line-number="10">    end if</a>
<a class="sourceLine" id="cb1-11" data-line-number="11">  end for</a>
<a class="sourceLine" id="cb1-12" data-line-number="12"></a>
<a class="sourceLine" id="cb1-13" data-line-number="13">  function strongconnect(v)</a>
<a class="sourceLine" id="cb1-14" data-line-number="14">    // Set the depth index for v to the smallest unused index</a>
<a class="sourceLine" id="cb1-15" data-line-number="15">    v.index := index</a>
<a class="sourceLine" id="cb1-16" data-line-number="16">    v.lowlink := index</a>
<a class="sourceLine" id="cb1-17" data-line-number="17">    index := index + 1</a>
<a class="sourceLine" id="cb1-18" data-line-number="18">    S.push(v)</a>
<a class="sourceLine" id="cb1-19" data-line-number="19">    v.onStack := true</a>
<a class="sourceLine" id="cb1-20" data-line-number="20"></a>
<a class="sourceLine" id="cb1-21" data-line-number="21">    // Consider successors of v</a>
<a class="sourceLine" id="cb1-22" data-line-number="22">    for each (v, w) in E do</a>
<a class="sourceLine" id="cb1-23" data-line-number="23">      if (w.index is undefined) then</a>
<a class="sourceLine" id="cb1-24" data-line-number="24">        // Successor w has not yet been visited; recurse on it</a>
<a class="sourceLine" id="cb1-25" data-line-number="25">        strongconnect(w)</a>
<a class="sourceLine" id="cb1-26" data-line-number="26">        v.lowlink  := min(v.lowlink, w.lowlink)</a>
<a class="sourceLine" id="cb1-27" data-line-number="27">      else if (w.onStack) then</a>
<a class="sourceLine" id="cb1-28" data-line-number="28">        // Successor w is in stack S and hence in the current SCC</a>
<a class="sourceLine" id="cb1-29" data-line-number="29">        // Note: The next line may look odd - but is correct.</a>
<a class="sourceLine" id="cb1-30" data-line-number="30">        // It says w.index not w.lowlink; that is deliberate and from the original paper</a>
<a class="sourceLine" id="cb1-31" data-line-number="31">        v.lowlink  := min(v.lowlink, w.index)</a>
<a class="sourceLine" id="cb1-32" data-line-number="32">      end if</a>
<a class="sourceLine" id="cb1-33" data-line-number="33">    end for</a>
<a class="sourceLine" id="cb1-34" data-line-number="34"></a>
<a class="sourceLine" id="cb1-35" data-line-number="35">    // If v is a root node, pop the stack and generate an SCC</a>
<a class="sourceLine" id="cb1-36" data-line-number="36">    if (v.lowlink = v.index) then</a>
<a class="sourceLine" id="cb1-37" data-line-number="37">      start a new strongly connected component</a>
<a class="sourceLine" id="cb1-38" data-line-number="38">      repeat</a>
<a class="sourceLine" id="cb1-39" data-line-number="39">        w := S.pop()</a>
<a class="sourceLine" id="cb1-40" data-line-number="40">        w.onStack := false</a>
<a class="sourceLine" id="cb1-41" data-line-number="41">        add w to current strongly connected component</a>
<a class="sourceLine" id="cb1-42" data-line-number="42">      while (w != v)</a>
<a class="sourceLine" id="cb1-43" data-line-number="43">      output the current strongly connected component</a>
<a class="sourceLine" id="cb1-44" data-line-number="44">    end if</a>
<a class="sourceLine" id="cb1-45" data-line-number="45">  end function</a></code></pre></div>
<p>The algorithm does a depth-first search, keeping track of two properties for each vertex: when it was encountered (the <em>index</em>) and the lowest index of any vertex reachable from this vertex (the <em>lowlink</em>). It pushes vertices on to a stack as it goes and outputs a strongly connected component when it cannot find any vertices it has not seen before.</p>
<p>As presented it is very imperative and I like Haskell, but fortunately <a href="/blog/2017/05/29/imperative-haskell/">imperative Haskell</a> is pretty straightforward and I have an implementation <a href="https://github.com/vaibhavsagar/courses/blob/master/algorithms1/week4/SCC.ipynb">here</a>.</p>
<p>This seems like an incredibly niche use case, but validating and processing DAGs in this way happens surprisingly frequently. Consider a build process where inputs and outputs are nodes and their relationships are directed edges. The presence of an SCC with more than one vertex indicates a cyclic dependency, and dependencies need to be built before the nodes that depend on them, which implies a reverse topological sort. This generalises to dataflow programming, where loops need to be identified (and usually eliminated). I like to think of this algorithm as an all-in-one DAG toolkit.</p>
<p>We can also use it to solve <a href="https://en.wikipedia.org/wiki/2-satisfiability">2SAT</a>, which is the problem of determining whether boolean variables in series of constraints of the form <code>a || b</code> can be assigned T and F values such that all constraints hold. This is discussed <a href="https://kartikkukreja.wordpress.com/2013/05/16/solving-2-sat-in-linear-time/">here</a> but boils down to encoding the constraints as nodes and edges, calculating the SCCs, and processing the output in reverse topologically sorted order. An advantage to doing it this way is that the process can stop at the first SCC that indicates unsatisfiability. I have an implementation of this <a href="https://github.com/vaibhavsagar/courses/blob/master/algorithms2/week6/Week6.ipynb">here</a>.</p>
<p>Discovering this algorithm got me excited about theoretical computer science and reminded me that algorithms can be fun, interesting, and an opportunity to marvel at the music of the spheres. I’m curious to know what other equally awesome algorithms are out there. Which one’s your favourite?</p>
<p>Thanks to <a href="https://anniecherkaev.com/">Annie Cherkaev</a> for the title and feedback, and <a href="https://twitter.com/imccoy">Iain McCoy</a> for suggesting <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.45.3876">a more functional approach</a>.</p>
]]></summary>
</entry>
<entry>
    <title>Imperative Haskell</title>
    <link href="http://vaibhavsagar.com/blog/2017/05/29/imperative-haskell/index.html" />
    <id>http://vaibhavsagar.com/blog/2017/05/29/imperative-haskell/index.html</id>
    <published>2017-05-29T00:00:00Z</published>
    <updated>2017-05-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on 29 May 2017
    
</div>
<div class="info">
    
        Tags: <a href="/blog/tags/haskell/index.html">haskell</a>, <a href="/blog/tags/programming/index.html">programming</a>
    
</div>

<p><em>This post covers essentially the same material as a 5-minute presentation I gave at <a href="https://www.recurse.com/scout/click?t=5ac465e5d3396a7e491e42afac4c5c90">RC</a>, because giving that talk over and over again doesn’t scale and there are things I would like to cover that are difficult within that time limit.</em></p>
<p>I was working through Tim Roughgarden’s <a href="https://www.coursera.org/learn/algorithm-design-analysis/">Algorithms 1</a> (which has now been replaced by two smaller courses) and attempting to do all the exercises in Haskell when I bumped up against an uncomfortable truth. Haskell’s ‘quicksort’:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1">qsort []     <span class="fu">=</span> []</a>
<a class="sourceLine" id="cb1-2" data-line-number="2">qsort (x<span class="fu">:</span>xs) <span class="fu">=</span> lt <span class="fu">++</span> [x] <span class="fu">++</span> gt</a>
<a class="sourceLine" id="cb1-3" data-line-number="3">    <span class="kw">where</span> lt <span class="fu">=</span> qsort [e <span class="fu">|</span> e <span class="ot">&lt;-</span> xs, e <span class="fu">&lt;</span>  x]</a>
<a class="sourceLine" id="cb1-4" data-line-number="4">          gt <span class="fu">=</span> qsort [e <span class="fu">|</span> e <span class="ot">&lt;-</span> xs, e <span class="fu">&gt;=</span> x]</a></code></pre></div>
<p>isn’t a true quicksort! Specifically, it doesn’t sort the elements in place, and the assignment I was working on involved counting the number of comparisons, so I couldn’t get away with my fake quicksort. With my tail between my legs, I gave up on my pure Haskell approach and implemented a solution in Python:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="im">import</span> sys</a>
<a class="sourceLine" id="cb2-2" data-line-number="2">sys.setrecursionlimit(<span class="dv">10000</span>)</a>
<a class="sourceLine" id="cb2-3" data-line-number="3"></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"><span class="kw">def</span> partition_first(array, l, r):</a>
<a class="sourceLine" id="cb2-5" data-line-number="5">    p <span class="op">=</span> array[l]</a>
<a class="sourceLine" id="cb2-6" data-line-number="6">    i <span class="op">=</span> l <span class="op">+</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb2-7" data-line-number="7">    <span class="cf">for</span> j <span class="kw">in</span> <span class="bu">range</span>(l<span class="op">+</span><span class="dv">1</span>, r):</a>
<a class="sourceLine" id="cb2-8" data-line-number="8">        <span class="cf">if</span> array[j] <span class="op">&lt;</span> p:</a>
<a class="sourceLine" id="cb2-9" data-line-number="9">            array[j], array[i] <span class="op">=</span> array[i], array[j]</a>
<a class="sourceLine" id="cb2-10" data-line-number="10">            i <span class="op">+=</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb2-11" data-line-number="11">    array[l], array[i<span class="dv">-1</span>] <span class="op">=</span> array[i<span class="dv">-1</span>], array[l]</a>
<a class="sourceLine" id="cb2-12" data-line-number="12">    <span class="cf">return</span> (i<span class="dv">-1</span>)</a>
<a class="sourceLine" id="cb2-13" data-line-number="13"></a>
<a class="sourceLine" id="cb2-14" data-line-number="14"><span class="kw">def</span> partition_last(array, l, r):</a>
<a class="sourceLine" id="cb2-15" data-line-number="15">    array[r<span class="dv">-1</span>], array[l] <span class="op">=</span> array[l], array[r<span class="dv">-1</span>]</a>
<a class="sourceLine" id="cb2-16" data-line-number="16">    <span class="cf">return</span> partition_first(array, l, r)</a>
<a class="sourceLine" id="cb2-17" data-line-number="17"></a>
<a class="sourceLine" id="cb2-18" data-line-number="18"><span class="kw">def</span> partition_median(array, l, r):</a>
<a class="sourceLine" id="cb2-19" data-line-number="19">    p_idx <span class="op">=</span> choose_median(array, l, r)</a>
<a class="sourceLine" id="cb2-20" data-line-number="20">    array[p_idx], array[l] <span class="op">=</span> array[l], array[p_idx]</a>
<a class="sourceLine" id="cb2-21" data-line-number="21">    <span class="cf">return</span> partition_first(array, l, r)</a>
<a class="sourceLine" id="cb2-22" data-line-number="22"></a>
<a class="sourceLine" id="cb2-23" data-line-number="23"><span class="kw">def</span> choose_median(array, l, r):</a>
<a class="sourceLine" id="cb2-24" data-line-number="24">    head <span class="op">=</span> array[l]</a>
<a class="sourceLine" id="cb2-25" data-line-number="25">    last <span class="op">=</span> array[r<span class="dv">-1</span>]</a>
<a class="sourceLine" id="cb2-26" data-line-number="26">    length <span class="op">=</span> r<span class="op">-</span>l</a>
<a class="sourceLine" id="cb2-27" data-line-number="27">    <span class="cf">if</span> length <span class="op">%</span> <span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span>:</a>
<a class="sourceLine" id="cb2-28" data-line-number="28">        mid_idx <span class="op">=</span> l <span class="op">+</span> (length<span class="op">//</span><span class="dv">2</span>) <span class="op">-</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb2-29" data-line-number="29">    <span class="cf">else</span>:</a>
<a class="sourceLine" id="cb2-30" data-line-number="30">        mid_idx <span class="op">=</span> l <span class="op">+</span> (length<span class="op">//</span><span class="dv">2</span>)</a>
<a class="sourceLine" id="cb2-31" data-line-number="31">    mid <span class="op">=</span> array[mid_idx]</a>
<a class="sourceLine" id="cb2-32" data-line-number="32">    options <span class="op">=</span> [(l, head), (mid_idx, mid), (r<span class="dv">-1</span>, last)]</a>
<a class="sourceLine" id="cb2-33" data-line-number="33">    options.remove(<span class="bu">max</span>(options, key<span class="op">=</span><span class="kw">lambda</span> v: v[<span class="dv">1</span>]))</a>
<a class="sourceLine" id="cb2-34" data-line-number="34">    options.remove(<span class="bu">min</span>(options, key<span class="op">=</span><span class="kw">lambda</span> v: v[<span class="dv">1</span>]))</a>
<a class="sourceLine" id="cb2-35" data-line-number="35">    <span class="cf">return</span> options[<span class="dv">0</span>][<span class="dv">0</span>]</a>
<a class="sourceLine" id="cb2-36" data-line-number="36"></a>
<a class="sourceLine" id="cb2-37" data-line-number="37"><span class="kw">def</span> quicksort(array, start, end, partition):</a>
<a class="sourceLine" id="cb2-38" data-line-number="38">    <span class="kw">global</span> comparisons</a>
<a class="sourceLine" id="cb2-39" data-line-number="39">    <span class="cf">if</span> end<span class="op">&lt;=</span>start: <span class="cf">return</span></a>
<a class="sourceLine" id="cb2-40" data-line-number="40">    <span class="cf">else</span>:</a>
<a class="sourceLine" id="cb2-41" data-line-number="41">        p_idx <span class="op">=</span> partition(array, start, end)</a>
<a class="sourceLine" id="cb2-42" data-line-number="42">        comparisons <span class="op">+=</span> (end<span class="op">-</span>start<span class="dv">-1</span>)</a>
<a class="sourceLine" id="cb2-43" data-line-number="43">        quicksort(array, start, p_idx, partition)</a>
<a class="sourceLine" id="cb2-44" data-line-number="44">        quicksort(array, p_idx<span class="op">+</span><span class="dv">1</span>, end, partition)</a>
<a class="sourceLine" id="cb2-45" data-line-number="45"></a>
<a class="sourceLine" id="cb2-46" data-line-number="46"></a>
<a class="sourceLine" id="cb2-47" data-line-number="47">comparisons <span class="op">=</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb2-48" data-line-number="48">inp1 <span class="op">=</span> contents.copy()</a>
<a class="sourceLine" id="cb2-49" data-line-number="49">quicksort(inp1, <span class="dv">0</span>, <span class="bu">len</span>(inp1), partition_first)</a>
<a class="sourceLine" id="cb2-50" data-line-number="50"><span class="bu">print</span>(comparisons)</a>
<a class="sourceLine" id="cb2-51" data-line-number="51"></a>
<a class="sourceLine" id="cb2-52" data-line-number="52">comparisons <span class="op">=</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb2-53" data-line-number="53">inp2 <span class="op">=</span> contents.copy()</a>
<a class="sourceLine" id="cb2-54" data-line-number="54">quicksort(inp2, <span class="dv">0</span>, <span class="bu">len</span>(inp2), partition_last)</a>
<a class="sourceLine" id="cb2-55" data-line-number="55"><span class="bu">print</span>(comparisons)</a>
<a class="sourceLine" id="cb2-56" data-line-number="56"></a>
<a class="sourceLine" id="cb2-57" data-line-number="57">comparisons <span class="op">=</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb2-58" data-line-number="58">inp3 <span class="op">=</span> contents.copy()</a>
<a class="sourceLine" id="cb2-59" data-line-number="59">quicksort(inp3, <span class="dv">0</span>, <span class="bu">len</span>(inp3), partition_median)</a>
<a class="sourceLine" id="cb2-60" data-line-number="60"><span class="bu">print</span>(comparisons)</a></code></pre></div>
<p>This implementation is not particularly Pythonic: note the recursion limit and the use of a global variable. I actually forgot to reset the variable to 0 between iterations, which was fun to track down. But it works!</p>
<p>So far, so good. This isn’t something we’d be able to do in Haskell, right? And even if we could, the equivalent implementation would be so different as to be unrecognisable. At least this is what I thought until I took a closer look at <a href="https://hackage.haskell.org/package/base-4.9.1.0/docs/Control-Monad-ST.html">Control.Monad.ST</a> and <a href="https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-STRef.html">Data.STRef</a>.</p>
<p>One of my biggest gripes with Haskell is the quality of the documentation. <code>Control.Monad.ST</code> is introduced as</p>
<blockquote>
<p>This library provides support for strict state threads, as described in the PLDI ’94 paper by John Launchbury and Simon Peyton Jones <em>Lazy Functional State Threads</em>.</p>
</blockquote>
<p>and <code>Data.STRef</code> is introduced as</p>
<blockquote>
<p>Mutable references in the (strict) ST monad.</p>
</blockquote>
<p>I don’t want to read a paper to figure out how to use these libraries, and in fact I don’t have to! In recognition of this, I humbly present alternative descriptions for <code>Control.Monad.ST</code>:</p>
<blockquote>
<p>You asked for mutable state, here it is!</p>
</blockquote>
<p>and <code>Data.STRef</code>:</p>
<blockquote>
<p>Variables that you can actually vary!!!1!1!one!1eleventyone</p>
</blockquote>
<p>Code utilising these libraries can look very familiar to people used to imperative languages, e.g. past me. Here’s the above quicksort rewritten in Haskell:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="ot">{-# LANGUAGE RankNTypes #-}</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2"></a>
<a class="sourceLine" id="cb3-3" data-line-number="3"><span class="kw">import</span> <span class="dt">Control.Monad.ST</span></a>
<a class="sourceLine" id="cb3-4" data-line-number="4"><span class="kw">import</span> <span class="dt">Data.STRef</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5"><span class="kw">import</span> <span class="dt">Data.Vector</span> (fromList, toList, freeze, thaw)</a>
<a class="sourceLine" id="cb3-6" data-line-number="6"><span class="kw">import</span> <span class="dt">Control.Monad</span></a>
<a class="sourceLine" id="cb3-7" data-line-number="7"><span class="kw">import</span> <span class="dt">Data.Vector.Mutable</span> (<span class="dt">STVector</span>, read, write, swap)</a>
<a class="sourceLine" id="cb3-8" data-line-number="8"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Vector</span> <span class="kw">as</span> <span class="dt">V</span> (<span class="dt">Vector</span>, length)</a>
<a class="sourceLine" id="cb3-9" data-line-number="9"><span class="kw">import</span> <span class="dt">Data.List</span> (sortOn)</a>
<a class="sourceLine" id="cb3-10" data-line-number="10"><span class="kw">import</span> <span class="dt">Prelude</span> <span class="kw">hiding</span> (read)</a>
<a class="sourceLine" id="cb3-11" data-line-number="11"></a>
<a class="sourceLine" id="cb3-12" data-line-number="12">vector <span class="fu">=</span> fromList contents</a>
<a class="sourceLine" id="cb3-13" data-line-number="13"></a>
<a class="sourceLine" id="cb3-14" data-line-number="14">partitionFirst array l r <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-15" data-line-number="15">    p <span class="ot">&lt;-</span> read array l</a>
<a class="sourceLine" id="cb3-16" data-line-number="16">    i <span class="ot">&lt;-</span> newSTRef (l<span class="fu">+</span><span class="dv">1</span>)</a>
<a class="sourceLine" id="cb3-17" data-line-number="17">    forM_ [l<span class="fu">+</span><span class="dv">1</span><span class="fu">..</span>(r<span class="fu">-</span><span class="dv">1</span>)] <span class="fu">$</span> \j <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-18" data-line-number="18">        arrayJ <span class="ot">&lt;-</span> read array j</a>
<a class="sourceLine" id="cb3-19" data-line-number="19">        i&#39;     <span class="ot">&lt;-</span> readSTRef i</a>
<a class="sourceLine" id="cb3-20" data-line-number="20">        when (arrayJ <span class="fu">&lt;</span> p) <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-21" data-line-number="21">            swap array i&#39; j</a>
<a class="sourceLine" id="cb3-22" data-line-number="22">            modifySTRef&#39; i (<span class="fu">+</span><span class="dv">1</span>)</a>
<a class="sourceLine" id="cb3-23" data-line-number="23">    i&#39; <span class="ot">&lt;-</span> readSTRef i</a>
<a class="sourceLine" id="cb3-24" data-line-number="24">    swap array (i&#39;<span class="fu">-</span><span class="dv">1</span>) l</a>
<a class="sourceLine" id="cb3-25" data-line-number="25">    return (i&#39;<span class="fu">-</span><span class="dv">1</span>)</a>
<a class="sourceLine" id="cb3-26" data-line-number="26"></a>
<a class="sourceLine" id="cb3-27" data-line-number="27">partitionLast array l r <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-28" data-line-number="28">    swap array (r<span class="fu">-</span><span class="dv">1</span>) l</a>
<a class="sourceLine" id="cb3-29" data-line-number="29">    partitionFirst array l r</a>
<a class="sourceLine" id="cb3-30" data-line-number="30"></a>
<a class="sourceLine" id="cb3-31" data-line-number="31">partitionMedian array l r <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-32" data-line-number="32">    p <span class="ot">&lt;-</span> chooseMedian array l r</a>
<a class="sourceLine" id="cb3-33" data-line-number="33">    swap array p l</a>
<a class="sourceLine" id="cb3-34" data-line-number="34">    partitionFirst array l r</a>
<a class="sourceLine" id="cb3-35" data-line-number="35"></a>
<a class="sourceLine" id="cb3-36" data-line-number="36">chooseMedian array l r <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-37" data-line-number="37">    h <span class="ot">&lt;-</span> read array l</a>
<a class="sourceLine" id="cb3-38" data-line-number="38">    t <span class="ot">&lt;-</span> read array (r<span class="fu">-</span><span class="dv">1</span>)</a>
<a class="sourceLine" id="cb3-39" data-line-number="39">    <span class="kw">let</span> len <span class="fu">=</span> r<span class="fu">-</span>l</a>
<a class="sourceLine" id="cb3-40" data-line-number="40">    <span class="kw">let</span> mid <span class="fu">=</span> <span class="kw">if</span> (len <span class="ot">`mod`</span> <span class="dv">2</span>) <span class="fu">==</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb3-41" data-line-number="41">        <span class="kw">then</span> l <span class="fu">+</span> (len <span class="ot">`div`</span> <span class="dv">2</span>) <span class="fu">-</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb3-42" data-line-number="42">        <span class="kw">else</span> l <span class="fu">+</span> (len <span class="ot">`div`</span> <span class="dv">2</span>)</a>
<a class="sourceLine" id="cb3-43" data-line-number="43">    m <span class="ot">&lt;-</span> read array mid</a>
<a class="sourceLine" id="cb3-44" data-line-number="44">    <span class="kw">let</span> options <span class="fu">=</span> sortOn snd [(l, h), (mid, m), (r<span class="fu">-</span><span class="dv">1</span>, t)]</a>
<a class="sourceLine" id="cb3-45" data-line-number="45">    return (fst (options <span class="fu">!!</span> <span class="dv">1</span>))</a>
<a class="sourceLine" id="cb3-46" data-line-number="46"></a>
<a class="sourceLine" id="cb3-47" data-line-number="47">quicksort array start end partition comparisons <span class="fu">=</span> when (start <span class="fu">&lt;</span> end) <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-48" data-line-number="48">    i <span class="ot">&lt;-</span> partition array start end</a>
<a class="sourceLine" id="cb3-49" data-line-number="49">    modifySTRef&#39; comparisons (<span class="fu">+</span> (end<span class="fu">-</span>start<span class="fu">-</span><span class="dv">1</span>))</a>
<a class="sourceLine" id="cb3-50" data-line-number="50">    quicksort array start i   partition comparisons</a>
<a class="sourceLine" id="cb3-51" data-line-number="51">    quicksort array (i<span class="fu">+</span><span class="dv">1</span>) end partition comparisons</a>
<a class="sourceLine" id="cb3-52" data-line-number="52"></a>
<a class="sourceLine" id="cb3-53" data-line-number="53"><span class="ot">quicksort&#39; ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> <span class="dt">V.Vector</span> a <span class="ot">-&gt;</span> (forall s a<span class="fu">.</span> (<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> <span class="dt">STVector</span> s a <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">ST</span> s <span class="dt">Int</span>) <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb3-54" data-line-number="54">quicksort&#39; vector partition <span class="fu">=</span> runST <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-55" data-line-number="55">    array  <span class="ot">&lt;-</span> thaw vector</a>
<a class="sourceLine" id="cb3-56" data-line-number="56">    comps  <span class="ot">&lt;-</span> newSTRef <span class="dv">0</span></a>
<a class="sourceLine" id="cb3-57" data-line-number="57">    quicksort array <span class="dv">0</span> (V.length vector) partition comps</a>
<a class="sourceLine" id="cb3-58" data-line-number="58">    readSTRef comps</a>
<a class="sourceLine" id="cb3-59" data-line-number="59"></a>
<a class="sourceLine" id="cb3-60" data-line-number="60">quicksort&#39; vector partitionFirst</a>
<a class="sourceLine" id="cb3-61" data-line-number="61">quicksort&#39; vector partitionLast</a>
<a class="sourceLine" id="cb3-62" data-line-number="62">quicksort&#39; vector partitionMedian</a></code></pre></div>
<p>This is roughly the same length as the Python implementation, and even improves on it in some ways: no recursion limit fiddling and no global variables.</p>
<p>If we can write Haskell that resembles Python, and Python is executable pseudocode, can we cut out the middleman and translate pseudocode directly to Haskell? Let’s take a look at another problem.</p>
<p>I needed to calculate the size of the strongly connected components of a graph for another assignment, and I decided to use Tarjan’s Strongly Connected Components algorithm. The pseudocode for that (as taken from Wikipedia) is:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode noweb"><code class="sourceCode noweb"><a class="sourceLine" id="cb4-1" data-line-number="1"> algorithm tarjan is</a>
<a class="sourceLine" id="cb4-2" data-line-number="2">  input: graph G = (V, E)</a>
<a class="sourceLine" id="cb4-3" data-line-number="3">  output: set of strongly connected components (sets of vertices)</a>
<a class="sourceLine" id="cb4-4" data-line-number="4"></a>
<a class="sourceLine" id="cb4-5" data-line-number="5">  index := 0</a>
<a class="sourceLine" id="cb4-6" data-line-number="6">  S := empty array</a>
<a class="sourceLine" id="cb4-7" data-line-number="7">  for each v in V do</a>
<a class="sourceLine" id="cb4-8" data-line-number="8">    if (v.index is undefined) then</a>
<a class="sourceLine" id="cb4-9" data-line-number="9">      strongconnect(v)</a>
<a class="sourceLine" id="cb4-10" data-line-number="10">    end if</a>
<a class="sourceLine" id="cb4-11" data-line-number="11">  end for</a>
<a class="sourceLine" id="cb4-12" data-line-number="12"></a>
<a class="sourceLine" id="cb4-13" data-line-number="13">  function strongconnect(v)</a>
<a class="sourceLine" id="cb4-14" data-line-number="14">    // Set the depth index for v to the smallest unused index</a>
<a class="sourceLine" id="cb4-15" data-line-number="15">    v.index := index</a>
<a class="sourceLine" id="cb4-16" data-line-number="16">    v.lowlink := index</a>
<a class="sourceLine" id="cb4-17" data-line-number="17">    index := index + 1</a>
<a class="sourceLine" id="cb4-18" data-line-number="18">    S.push(v)</a>
<a class="sourceLine" id="cb4-19" data-line-number="19">    v.onStack := true</a>
<a class="sourceLine" id="cb4-20" data-line-number="20"></a>
<a class="sourceLine" id="cb4-21" data-line-number="21">    // Consider successors of v</a>
<a class="sourceLine" id="cb4-22" data-line-number="22">    for each (v, w) in E do</a>
<a class="sourceLine" id="cb4-23" data-line-number="23">      if (w.index is undefined) then</a>
<a class="sourceLine" id="cb4-24" data-line-number="24">        // Successor w has not yet been visited; recurse on it</a>
<a class="sourceLine" id="cb4-25" data-line-number="25">        strongconnect(w)</a>
<a class="sourceLine" id="cb4-26" data-line-number="26">        v.lowlink  := min(v.lowlink, w.lowlink)</a>
<a class="sourceLine" id="cb4-27" data-line-number="27">      else if (w.onStack) then</a>
<a class="sourceLine" id="cb4-28" data-line-number="28">        // Successor w is in stack S and hence in the current SCC</a>
<a class="sourceLine" id="cb4-29" data-line-number="29">        // Note: The next line may look odd - but is correct.</a>
<a class="sourceLine" id="cb4-30" data-line-number="30">        // It says w.index not w.lowlink; that is deliberate and from the original paper</a>
<a class="sourceLine" id="cb4-31" data-line-number="31">        v.lowlink  := min(v.lowlink, w.index)</a>
<a class="sourceLine" id="cb4-32" data-line-number="32">      end if</a>
<a class="sourceLine" id="cb4-33" data-line-number="33">    end for</a>
<a class="sourceLine" id="cb4-34" data-line-number="34"></a>
<a class="sourceLine" id="cb4-35" data-line-number="35">    // If v is a root node, pop the stack and generate an SCC</a>
<a class="sourceLine" id="cb4-36" data-line-number="36">    if (v.lowlink = v.index) then</a>
<a class="sourceLine" id="cb4-37" data-line-number="37">      start a new strongly connected component</a>
<a class="sourceLine" id="cb4-38" data-line-number="38">      repeat</a>
<a class="sourceLine" id="cb4-39" data-line-number="39">        w := S.pop()</a>
<a class="sourceLine" id="cb4-40" data-line-number="40">        w.onStack := false</a>
<a class="sourceLine" id="cb4-41" data-line-number="41">        add w to current strongly connected component</a>
<a class="sourceLine" id="cb4-42" data-line-number="42">      while (w != v)</a>
<a class="sourceLine" id="cb4-43" data-line-number="43">      output the current strongly connected component</a>
<a class="sourceLine" id="cb4-44" data-line-number="44">    end if</a>
<a class="sourceLine" id="cb4-45" data-line-number="45">  end function</a></code></pre></div>
<p>and here’s what that looks like in Haskell:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Array</span> <span class="kw">as</span> <span class="dt">A</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Graph</span> <span class="kw">as</span> <span class="dt">G</span></a>
<a class="sourceLine" id="cb5-3" data-line-number="3"></a>
<a class="sourceLine" id="cb5-4" data-line-number="4"><span class="kw">import</span> <span class="dt">Control.Monad</span>       (forM_, when)</a>
<a class="sourceLine" id="cb5-5" data-line-number="5"><span class="kw">import</span> <span class="dt">Control.Monad.ST</span></a>
<a class="sourceLine" id="cb5-6" data-line-number="6"><span class="kw">import</span> <span class="dt">Data.STRef</span></a>
<a class="sourceLine" id="cb5-7" data-line-number="7"><span class="kw">import</span> <span class="dt">Data.Vector.Mutable</span> (<span class="dt">STVector</span>, read, replicate, write)</a>
<a class="sourceLine" id="cb5-8" data-line-number="8"><span class="kw">import</span> <span class="dt">Prelude</span> <span class="kw">hiding</span>      (read, replicate)</a>
<a class="sourceLine" id="cb5-9" data-line-number="9"></a>
<a class="sourceLine" id="cb5-10" data-line-number="10">tarjan graph <span class="fu">=</span> runST <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb5-11" data-line-number="11">    index    <span class="ot">&lt;-</span> newSTRef <span class="dv">0</span></a>
<a class="sourceLine" id="cb5-12" data-line-number="12">    stack    <span class="ot">&lt;-</span> newSTRef []</a>
<a class="sourceLine" id="cb5-13" data-line-number="13">    stackSet <span class="ot">&lt;-</span> replicate size <span class="dt">False</span></a>
<a class="sourceLine" id="cb5-14" data-line-number="14">    indices  <span class="ot">&lt;-</span> replicate size <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb5-15" data-line-number="15">    lowlinks <span class="ot">&lt;-</span> replicate size <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb5-16" data-line-number="16">    output   <span class="ot">&lt;-</span> newSTRef []</a>
<a class="sourceLine" id="cb5-17" data-line-number="17"></a>
<a class="sourceLine" id="cb5-18" data-line-number="18">    forM_ (G.vertices graph) <span class="fu">$</span> \v <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb5-19" data-line-number="19">        vIndex <span class="ot">&lt;-</span> read indices v</a>
<a class="sourceLine" id="cb5-20" data-line-number="20">        when (vIndex <span class="fu">==</span> <span class="dt">Nothing</span>) <span class="fu">$</span></a>
<a class="sourceLine" id="cb5-21" data-line-number="21">            strongConnect v graph index stack stackSet indices lowlinks output</a>
<a class="sourceLine" id="cb5-22" data-line-number="22"></a>
<a class="sourceLine" id="cb5-23" data-line-number="23">    reverse <span class="fu">&lt;$&gt;</span> readSTRef output</a>
<a class="sourceLine" id="cb5-24" data-line-number="24">    <span class="kw">where</span> size <span class="fu">=</span> snd (A.bounds graph) <span class="fu">+</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb5-25" data-line-number="25"></a>
<a class="sourceLine" id="cb5-26" data-line-number="26">strongConnect v graph index stack stackSet indices lowlinks output <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb5-27" data-line-number="27">    i <span class="ot">&lt;-</span> readSTRef index</a>
<a class="sourceLine" id="cb5-28" data-line-number="28">    write indices  v (<span class="dt">Just</span> i)</a>
<a class="sourceLine" id="cb5-29" data-line-number="29">    write lowlinks v (<span class="dt">Just</span> i)</a>
<a class="sourceLine" id="cb5-30" data-line-number="30">    modifySTRef&#39; index (<span class="fu">+</span><span class="dv">1</span>)</a>
<a class="sourceLine" id="cb5-31" data-line-number="31">    push v</a>
<a class="sourceLine" id="cb5-32" data-line-number="32"></a>
<a class="sourceLine" id="cb5-33" data-line-number="33">    forM_ (graph <span class="fu">A.!</span> v) <span class="fu">$</span> \w <span class="ot">-&gt;</span> read indices w <span class="fu">&gt;&gt;=</span> \found <span class="ot">-&gt;</span> <span class="kw">case</span> found <span class="kw">of</span></a>
<a class="sourceLine" id="cb5-34" data-line-number="34">        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb5-35" data-line-number="35">            strongConnect w graph index stack stackSet indices lowlinks output</a>
<a class="sourceLine" id="cb5-36" data-line-number="36">            write lowlinks v <span class="fu">=&lt;&lt;</span> (min <span class="fu">&lt;$&gt;</span> read lowlinks v <span class="fu">&lt;*&gt;</span> read lowlinks w)</a>
<a class="sourceLine" id="cb5-37" data-line-number="37">        <span class="dt">Just</span>{}  <span class="ot">-&gt;</span> read stackSet w <span class="fu">&gt;&gt;=</span> \wOnStack <span class="ot">-&gt;</span> when wOnStack <span class="fu">$</span></a>
<a class="sourceLine" id="cb5-38" data-line-number="38">            write lowlinks v <span class="fu">=&lt;&lt;</span> (min <span class="fu">&lt;$&gt;</span> read lowlinks v <span class="fu">&lt;*&gt;</span> read indices  w)</a>
<a class="sourceLine" id="cb5-39" data-line-number="39"></a>
<a class="sourceLine" id="cb5-40" data-line-number="40">    vLowLink <span class="ot">&lt;-</span> read lowlinks v</a>
<a class="sourceLine" id="cb5-41" data-line-number="41">    vIndex   <span class="ot">&lt;-</span> read indices  v</a>
<a class="sourceLine" id="cb5-42" data-line-number="42">    when (vLowLink <span class="fu">==</span> vIndex) <span class="fu">$</span> modifySTRef&#39; output <span class="fu">.</span> (<span class="fu">:</span>) <span class="fu">=&lt;&lt;</span> addSCC v []</a>
<a class="sourceLine" id="cb5-43" data-line-number="43">    <span class="kw">where</span></a>
<a class="sourceLine" id="cb5-44" data-line-number="44">        addSCC v scc <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb5-45" data-line-number="45">            w <span class="ot">&lt;-</span> pop</a>
<a class="sourceLine" id="cb5-46" data-line-number="46">            <span class="kw">let</span> scc&#39; <span class="fu">=</span> w<span class="fu">:</span>scc</a>
<a class="sourceLine" id="cb5-47" data-line-number="47">            <span class="kw">if</span> w <span class="fu">==</span> v <span class="kw">then</span> return scc&#39; <span class="kw">else</span> addSCC v scc&#39;</a>
<a class="sourceLine" id="cb5-48" data-line-number="48"></a>
<a class="sourceLine" id="cb5-49" data-line-number="49">        push e <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb5-50" data-line-number="50">            modifySTRef&#39; stack (e<span class="fu">:</span>)</a>
<a class="sourceLine" id="cb5-51" data-line-number="51">            write stackSet e <span class="dt">True</span></a>
<a class="sourceLine" id="cb5-52" data-line-number="52"></a>
<a class="sourceLine" id="cb5-53" data-line-number="53">        pop <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb5-54" data-line-number="54">            e <span class="ot">&lt;-</span> head <span class="fu">&lt;$&gt;</span> readSTRef stack</a>
<a class="sourceLine" id="cb5-55" data-line-number="55">            modifySTRef&#39; stack tail</a>
<a class="sourceLine" id="cb5-56" data-line-number="56">            write stackSet e <span class="dt">False</span></a>
<a class="sourceLine" id="cb5-57" data-line-number="57">            return e</a></code></pre></div>
<p>Aside from explicitly declaring our variables and passing them around, I think this looks pretty close.</p>
<p>How do we square this with Haskell’s reputation for purity and referential transparency? That’s the subject of <a href="https://www.microsoft.com/en-us/research/publication/lazy-functional-state-threads/">the paper mentioned above</a> that you don’t have to read (but totally can if you want)! They figured out a way to provide a principled pure interface to mutable state by passing the references as arguments into each function that makes use of them and leveraging the type system to make sure any impurity is well contained. The correctness of this approach was <a href="http://iris-project.org/pdfs/2017-icfp-runST-submission.pdf">very recently verified</a>. If desired, we can replace any of the functions with purer and more idiomatic definitions without changing the output, and that satisfies the definition of referential transparency!</p>
<p>Why don’t we do this all the time, when Haskell is at least a serviceable imperative language? Because writing imperative programs is hard! They don’t compose as well, have less useful type signatures, and are harder to reason about. Getting away from those things is why we have Haskell to begin with! The real question should be: how can we avoid doing things this way as much as possible?</p>
<p>Before I discovered this part of Haskell, I had this perception of Haskell (and declarative programming more generally) as “imperative programming but less” from a practical perspective. I thought that although writing declarative code in Python was purely (heh) a matter of discipline, writing imperative code in Haskell required completely reconceptualising the algorithm. Thanks to <code>ST</code>, I now know that this not the case, which is a huge relief. If required, I can do a literal translation of the algorithm, and clean it up (or not) later. In fact Haskell is “imperative programming and more”, and that’s awesome!</p>
<p>Thanks to <a href="http://blog.podsnap.com/">Peter Fraenkel</a>, <a href="https://jvns.ca/">Julia Evans</a>, and <a href="http://msteigerwalt.com/">Michelle Steigerwalt</a> for feedback.</p>
<p><em>If you’d rather try to make sense of the <a href="https://github.com/vaibhavsagar/presentations/tree/master/imperative-haskell">set of disconnected files</a> that constitutes my slides for that presentation, you can do that instead, although I wouldn’t recommend it.</em></p>
]]></summary>
</entry>
<entry>
    <title>Discovering Continuations with Typed Holes</title>
    <link href="http://vaibhavsagar.com/blog/2017/05/22/discovering-continuations/index.html" />
    <id>http://vaibhavsagar.com/blog/2017/05/22/discovering-continuations/index.html</id>
    <published>2017-05-22T00:00:00Z</published>
    <updated>2017-05-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on 22 May 2017
    
</div>
<div class="info">
    
        Tags: <a href="/blog/tags/haskell/index.html">haskell</a>, <a href="/blog/tags/programming/index.html">programming</a>, <a href="/blog/tags/monads/index.html">monads</a>
    
</div>

<p>I’ve been trying to wrap my head around continuations for a while. I was reading <a href="https://github.com/quchen/articles/blob/master/cont_monad.md">David Luposchainsky’s excellent article</a> on them and playing with his definitions in an IHaskell notebook when I found that typed holes are an excellent hammer to attack this particular nail with.</p>
<p>If you haven’t encountered them before, <a href="https://wiki.haskell.org/GHC/Typed_holes">typed holes</a> are a feature where you put one or more variables starting with <code>_</code> on the right hand side of a definition to get GHC to tell you the type of the value that fits in that hole, and you can narrow the hole as necessary to get the type of a subexpression until you have enough information to complete the definition. I like to think of this as a way of collaboratively filling in a definition with the compiler, instead of my usual approach which is to write a definition, listen carefully to GHC’s complaints, and amend my definition accordingly. Typed holes are fully supported by GHCi and the full suite of editor integrations, but I personally find the edit/reload/squint cycle more tedious than coming up with the definition in IHaskell and then moving it to a module and adding type signatures after I’m satisfied that it works.</p>
<p>I think his type definition makes an excellent starting point:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">newtype</span> <span class="dt">Cont</span> r a <span class="fu">=</span> <span class="dt">Cont</span> {<span class="ot"> (&gt;&gt;-) ::</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r }</a></code></pre></div>
<p>This defines a type <code>Cont</code> with an infix constructor <code>&gt;&gt;-</code> (that looks suspiciously similar to <code>&gt;&gt;=</code>) that takes a function from <code>a</code> to <code>r</code> and provides an <code>r</code>. One intuition for what this means is that a value of this type knows about an <code>a</code> but for whatever reason refuses to be upfront about it and demands to know what you’re going to do with it and then does it for you, providing you with a final result <code>r</code>. Another intuition is that this is a generalisation of callbacks: a value of this type expects a callback to utilise the <code>a</code>. Anyway, on to my favourite part of working with mysterious data types: defining <code>Functor</code>, <code>Applicative</code>, and <code>Monad</code> instances for them! If you’ve done this before, you’ll know that these typeclasses have certain laws that their instances are meant to obey, and it turns out that this type is polymorphic enough that we can just follow the typed holes and the resulting definitions will be lawful. You don’t have to take my word for it and should verify this for yourself, but I won’t be discussing the laws here. Let’s begin!</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Functor</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2">    fmap f cont <span class="fu">=</span> _</a></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<pre class='err-msg'>&lt;interactive&gt;:2:19: error:<br/>    • Found hole: _ :: Cont r b<br/>      Where: ‘r’ is a rigid type variable bound by the instance declaration at &lt;interactive&gt;:1:10<br/>             ‘b’ is a rigid type variable bound by<br/>               the type signature for:<br/>                 fmap :: forall a b. (a -&gt; b) -&gt; Cont r a -&gt; Cont r b<br/>               at &lt;interactive&gt;:2:5<br/>    • In the expression: _<br/>      In an equation for ‘fmap’: fmap f cont = _<br/>      In the instance declaration for ‘Functor (Cont r)’<br/>    • Relevant bindings include<br/>        cont :: Cont r a (bound at &lt;interactive&gt;:2:12)<br/>        f :: a -&gt; b (bound at &lt;interactive&gt;:2:10)<br/>        fmap :: (a -&gt; b) -&gt; Cont r a -&gt; Cont r b (bound at &lt;interactive&gt;:2:5)</pre>
<p>We didn’t really need a typed hole to tell us this, but at least we know what we have to work with. We know we have to provide a <code>Cont</code> value, so let’s narrow our typed hole that way.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Functor</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2">    fmap f cont <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> _</a></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<pre class='err-msg'>&lt;interactive&gt;:2:26: error:<br/>    • Found hole: _ :: (b -&gt; r) -&gt; r<br/>      Where: ‘r’ is a rigid type variable bound by the instance declaration at &lt;interactive&gt;:1:10<br/>             ‘b’ is a rigid type variable bound by<br/>               the type signature for:<br/>                 fmap :: forall a b. (a -&gt; b) -&gt; Cont r a -&gt; Cont r b<br/>               at &lt;interactive&gt;:2:5<br/>    • In the second argument of ‘(<span>&dollar;</span>)’, namely ‘_’<br/>      In the expression: Cont <span>&dollar;</span> _<br/>      In an equation for ‘fmap’: fmap f cont = Cont <span>&dollar;</span> _<br/>    • Relevant bindings include<br/>        cont :: Cont r a (bound at &lt;interactive&gt;:2:12)<br/>        f :: a -&gt; b (bound at &lt;interactive&gt;:2:10)<br/>        fmap :: (a -&gt; b) -&gt; Cont r a -&gt; Cont r b (bound at &lt;interactive&gt;:2:5)</pre>
<p>The type of our hole is more helpful here. Now we know (if we were previously uncertain) that we somehow need to use <code>f</code> to turn the <code>a</code> into a <code>b</code>. We also know that <code>Cont</code> takes a parameter, let’s add that in and see if it helps.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Functor</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2">    fmap f cont <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> _</a></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<pre class='err-msg'>&lt;interactive&gt;:2:32: error:<br/>    • Found hole: _ :: r<br/>      Where: ‘r’ is a rigid type variable bound by the instance declaration at &lt;interactive&gt;:1:10<br/>    • In the expression: _<br/>      In the second argument of ‘(<span>&dollar;</span>)’, namely ‘\ k -&gt; _’<br/>      In the expression: Cont <span>&dollar;</span> \ k -&gt; _<br/>    • Relevant bindings include<br/>        k :: b -&gt; r (bound at &lt;interactive&gt;:2:27)<br/>        cont :: Cont r a (bound at &lt;interactive&gt;:2:12)<br/>        f :: a -&gt; b (bound at &lt;interactive&gt;:2:10)<br/>        fmap :: (a -&gt; b) -&gt; Cont r a -&gt; Cont r b (bound at &lt;interactive&gt;:2:5)</pre>
<p>In general, we know all of our definitions will be of the form <code>Cont $ \k -&gt; _</code> and that’s a safe starting point. We now know that we need to use <code>k</code> on the result of applying <code>f</code> to some <code>a</code> to finally result in an <code>r</code>, but where does the <code>a</code> come from? The only thing we can do at this point is ‘unwrap’ the <code>cont</code> using <code>&gt;&gt;-</code>. What happens when we do that?</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Functor</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2">    fmap f cont <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> cont <span class="fu">&gt;&gt;-</span> _</a></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<pre class='err-msg'>&lt;interactive&gt;:2:41: error:<br/>    • Found hole: _ :: a -&gt; r<br/>      Where: ‘r’ is a rigid type variable bound by the instance declaration at &lt;interactive&gt;:1:10<br/>             ‘a’ is a rigid type variable bound by<br/>               the type signature for:<br/>                 fmap :: forall a b. (a -&gt; b) -&gt; Cont r a -&gt; Cont r b<br/>               at &lt;interactive&gt;:2:5<br/>    • In the second argument of ‘&gt;&gt;-’, namely ‘_’<br/>      In the expression: cont &gt;&gt;- _<br/>      In the second argument of ‘(<span>&dollar;</span>)’, namely ‘\ k -&gt; cont &gt;&gt;- _’<br/>    • Relevant bindings include<br/>        k :: b -&gt; r (bound at &lt;interactive&gt;:2:27)<br/>        cont :: Cont r a (bound at &lt;interactive&gt;:2:12)<br/>        f :: a -&gt; b (bound at &lt;interactive&gt;:2:10)<br/>        fmap :: (a -&gt; b) -&gt; Cont r a -&gt; Cont r b (bound at &lt;interactive&gt;:2:5)</pre>
<p>It looks like we might have everything we need to complete this definition! We can create a function of type <code>a -&gt; r</code> by composing <code>k</code> and <code>f</code>.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Functor</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2">    fmap f cont <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> cont <span class="fu">&gt;&gt;-</span> (k <span class="fu">.</span> f)</a></code></pre></div>
<p>It worked! This definition states that <code>fmap</code> works by creating a continuation that expects a callback of the new type. This is pretty exciting! Let’s continue to <code>Applicative</code>.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Applicative</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">    pure a <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> _</a></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<pre class='err-msg'>&lt;interactive&gt;:2:27: error:<br/>    • Found hole: _ :: r<br/>      Where: ‘r’ is a rigid type variable bound by the instance declaration at &lt;interactive&gt;:1:10<br/>    • In the expression: _<br/>      In the second argument of ‘(<span>&dollar;</span>)’, namely ‘\ k -&gt; _’<br/>      In the expression: Cont <span>&dollar;</span> \ k -&gt; _<br/>    • Relevant bindings include<br/>        k :: a -&gt; r (bound at &lt;interactive&gt;:2:22)<br/>        a :: a (bound at &lt;interactive&gt;:2:10)<br/>        pure :: a -&gt; Cont r a (bound at &lt;interactive&gt;:2:5)</pre>
<p>That was pretty easy. We need an <code>r</code> and we have an <code>a</code> and a <code>k</code> that takes an <code>a</code> to an <code>r</code>.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Applicative</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2">    pure a <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> k a</a></code></pre></div>
<p>This matches our intuition from above: creating a continuation involves hiding a value behind a function that can access it. On to <code>&lt;*&gt;</code>!</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Applicative</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2">    pure a  <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> k a</a>
<a class="sourceLine" id="cb9-3" data-line-number="3">    f <span class="fu">&lt;*&gt;</span> a <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> _</a></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<pre class='err-msg'>&lt;interactive&gt;:3:28: error:<br/>    • Found hole: _ :: r<br/>      Where: ‘r’ is a rigid type variable bound by the instance declaration at &lt;interactive&gt;:1:10<br/>    • In the expression: _<br/>      In the second argument of ‘(<span>&dollar;</span>)’, namely ‘\ k -&gt; _’<br/>      In the expression: Cont <span>&dollar;</span> \ k -&gt; _<br/>    • Relevant bindings include<br/>        k :: b -&gt; r (bound at &lt;interactive&gt;:3:23)<br/>        a :: Cont r a (bound at &lt;interactive&gt;:3:11)<br/>        f :: Cont r (a -&gt; b) (bound at &lt;interactive&gt;:3:5)<br/>        (&lt;*&gt;) :: Cont r (a -&gt; b) -&gt; Cont r a -&gt; Cont r b (bound at &lt;interactive&gt;:3:5)</pre>
<p>From above, we know we can ‘unwrap’ <code>Cont</code> values using <code>&gt;&gt;-</code>.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Applicative</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2">    pure a  <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> k a</a>
<a class="sourceLine" id="cb10-3" data-line-number="3">    f <span class="fu">&lt;*&gt;</span> a <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> f <span class="fu">&gt;&gt;-</span> _</a></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<pre class='err-msg'>&lt;interactive&gt;:3:34: error:<br/>    • Found hole: _ :: (a -&gt; b) -&gt; r<br/>      Where: ‘r’ is a rigid type variable bound by the instance declaration at &lt;interactive&gt;:1:10<br/>             ‘b’ is a rigid type variable bound by<br/>               the type signature for:<br/>                 (&lt;*&gt;) :: forall a b. Cont r (a -&gt; b) -&gt; Cont r a -&gt; Cont r b<br/>               at &lt;interactive&gt;:3:7<br/>             ‘a’ is a rigid type variable bound by<br/>               the type signature for:<br/>                 (&lt;*&gt;) :: forall a b. Cont r (a -&gt; b) -&gt; Cont r a -&gt; Cont r b<br/>               at &lt;interactive&gt;:3:7<br/>    • In the second argument of ‘&gt;&gt;-’, namely ‘_’<br/>      In the expression: f &gt;&gt;- _<br/>      In the second argument of ‘(<span>&dollar;</span>)’, namely ‘\ k -&gt; f &gt;&gt;- _’<br/>    • Relevant bindings include<br/>        k :: b -&gt; r (bound at &lt;interactive&gt;:3:23)<br/>        a :: Cont r a (bound at &lt;interactive&gt;:3:11)<br/>        f :: Cont r (a -&gt; b) (bound at &lt;interactive&gt;:3:5)<br/>        (&lt;*&gt;) :: Cont r (a -&gt; b) -&gt; Cont r a -&gt; Cont r b (bound at &lt;interactive&gt;:3:5)</pre>
<p>Let’s keep going.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Applicative</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2">    pure a  <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> k a</a>
<a class="sourceLine" id="cb11-3" data-line-number="3">    f <span class="fu">&lt;*&gt;</span> a <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> f <span class="fu">&gt;&gt;-</span> \f&#39; <span class="ot">-&gt;</span> a <span class="fu">&gt;&gt;-</span> \a&#39; <span class="ot">-&gt;</span> _</a></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<pre class='err-msg'>&lt;interactive&gt;:3:54: error:<br/>    • Found hole: _ :: r<br/>      Where: ‘r’ is a rigid type variable bound by the instance declaration at &lt;interactive&gt;:1:10<br/>    • In the expression: _<br/>      In the second argument of ‘&gt;&gt;-’, namely ‘\ a' -&gt; _’<br/>      In the expression: a &gt;&gt;- \ a' -&gt; _<br/>    • Relevant bindings include<br/>        a' :: a (bound at &lt;interactive&gt;:3:48)<br/>        f' :: a -&gt; b (bound at &lt;interactive&gt;:3:35)<br/>        k :: b -&gt; r (bound at &lt;interactive&gt;:3:23)<br/>        a :: Cont r a (bound at &lt;interactive&gt;:3:11)<br/>        f :: Cont r (a -&gt; b) (bound at &lt;interactive&gt;:3:5)<br/>        (&lt;*&gt;) :: Cont r (a -&gt; b) -&gt; Cont r a -&gt; Cont r b (bound at &lt;interactive&gt;:3:5)</pre>
<p>Perfect, we want an <code>r</code> and we have</p>
<ul>
<li>an <code>a</code> (<code>a'</code>)</li>
<li>a function from <code>a</code> to <code>b</code> (<code>f'</code>)</li>
<li>a function from <code>b</code> to <code>r</code> (<code>k</code>)</li>
</ul>
<p>Let’s put them together.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Applicative</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-2" data-line-number="2">    pure a  <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> k a</a>
<a class="sourceLine" id="cb12-3" data-line-number="3">    f <span class="fu">&lt;*&gt;</span> a <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> f <span class="fu">&gt;&gt;-</span> \f&#39; <span class="ot">-&gt;</span> a <span class="fu">&gt;&gt;-</span> \a&#39; <span class="ot">-&gt;</span> k (f&#39; a&#39;)</a></code></pre></div>
<p>Okay, we unwrap the function and the argument and rewrap them in a fresh continuation, not too differently from how we defined <code>fmap</code>. Sweet! On to the big M!</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Monad</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-2" data-line-number="2">    a <span class="fu">&gt;&gt;=</span> f <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> _</a></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<pre class='err-msg'>&lt;interactive&gt;:2:28: error:<br/>    • Found hole: _ :: r<br/>      Where: ‘r’ is a rigid type variable bound by the instance declaration at &lt;interactive&gt;:1:10<br/>    • In the expression: _<br/>      In the second argument of ‘(<span>&dollar;</span>)’, namely ‘\ k -&gt; _’<br/>      In the expression: Cont <span>&dollar;</span> \ k -&gt; _<br/>    • Relevant bindings include<br/>        k :: b -&gt; r (bound at &lt;interactive&gt;:2:23)<br/>        f :: a -&gt; Cont r b (bound at &lt;interactive&gt;:2:11)<br/>        a :: Cont r a (bound at &lt;interactive&gt;:2:5)<br/>        (&gt;&gt;=) :: Cont r a -&gt; (a -&gt; Cont r b) -&gt; Cont r b (bound at &lt;interactive&gt;:2:5)</pre>
<p>As before, our first order of business is to unwrap the <code>a</code>.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Monad</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></a>
<a class="sourceLine" id="cb14-2" data-line-number="2">    a <span class="fu">&gt;&gt;=</span> f <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> a <span class="fu">&gt;&gt;-</span> \a&#39; <span class="ot">-&gt;</span> _</a></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<pre class='err-msg'>&lt;interactive&gt;:2:41: error:<br/>    • Found hole: _ :: r<br/>      Where: ‘r’ is a rigid type variable bound by the instance declaration at &lt;interactive&gt;:1:10<br/>    • In the expression: _<br/>      In the second argument of ‘&gt;&gt;-’, namely ‘\ a' -&gt; _’<br/>      In the expression: a &gt;&gt;- \ a' -&gt; _<br/>    • Relevant bindings include<br/>        a' :: a (bound at &lt;interactive&gt;:2:35)<br/>        k :: b -&gt; r (bound at &lt;interactive&gt;:2:23)<br/>        f :: a -&gt; Cont r b (bound at &lt;interactive&gt;:2:11)<br/>        a :: Cont r a (bound at &lt;interactive&gt;:2:5)<br/>        (&gt;&gt;=) :: Cont r a -&gt; (a -&gt; Cont r b) -&gt; Cont r b (bound at &lt;interactive&gt;:2:5)</pre>
<p>We can apply <code>f</code> to this unwrapped value to get a continuation that we can unwrap again.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Monad</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></a>
<a class="sourceLine" id="cb15-2" data-line-number="2">    a <span class="fu">&gt;&gt;=</span> f <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> a <span class="fu">&gt;&gt;-</span> \a&#39; <span class="ot">-&gt;</span> f a&#39; <span class="fu">&gt;&gt;-</span> \f&#39; <span class="ot">-&gt;</span> _</a></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<pre class='err-msg'>&lt;interactive&gt;:2:57: error:<br/>    • Found hole: _ :: r<br/>      Where: ‘r’ is a rigid type variable bound by the instance declaration at &lt;interactive&gt;:1:10<br/>    • In the expression: _<br/>      In the second argument of ‘&gt;&gt;-’, namely ‘\ f' -&gt; _’<br/>      In the expression: f a' &gt;&gt;- \ f' -&gt; _<br/>    • Relevant bindings include<br/>        f' :: b (bound at &lt;interactive&gt;:2:51)<br/>        a' :: a (bound at &lt;interactive&gt;:2:35)<br/>        k :: b -&gt; r (bound at &lt;interactive&gt;:2:23)<br/>        f :: a -&gt; Cont r b (bound at &lt;interactive&gt;:2:11)<br/>        a :: Cont r a (bound at &lt;interactive&gt;:2:5)<br/>        (&gt;&gt;=) :: Cont r a -&gt; (a -&gt; Cont r b) -&gt; Cont r b (bound at &lt;interactive&gt;:2:5)</pre>
<p>We want an <code>r</code> and we have <code>k</code> and <code>f'</code>. Let’s put them together!</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Monad</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></a>
<a class="sourceLine" id="cb16-2" data-line-number="2">    a <span class="fu">&gt;&gt;=</span> f <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> a <span class="fu">&gt;&gt;-</span> \a&#39; <span class="ot">-&gt;</span> f a&#39; <span class="fu">&gt;&gt;-</span> \f&#39; <span class="ot">-&gt;</span> k f&#39;</a></code></pre></div>
<p>And that’s it! The <a href="http://blog.sigfpe.com/2008/12/mother-of-all-monads.html">mother of all monads</a> boils down to some tedious and almost mechanical wrapping and unwrapping. I think it’s cool how mundane it is.</p>
<p>Let’s have a crack at something more involved. A lot of the magic in continuations is accessed via <code>callCC</code>, which takes a function and calls it with the current continuation, hence the name. How would we define it?</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" data-line-number="1"><span class="ot">callCC ::</span> ((b <span class="ot">-&gt;</span> <span class="dt">Cont</span> r a) <span class="ot">-&gt;</span> <span class="dt">Cont</span> r b) <span class="ot">-&gt;</span> <span class="dt">Cont</span> r b</a>
<a class="sourceLine" id="cb17-2" data-line-number="2">callCC f <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> _</a></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<pre class='err-msg'>&lt;interactive&gt;:2:25: error:<br/>    • Found hole: _ :: r<br/>      Where: ‘r’ is a rigid type variable bound by<br/>               the type signature for:<br/>                 callCC :: forall b r a. ((b -&gt; Cont r a) -&gt; Cont r b) -&gt; Cont r b<br/>               at &lt;interactive&gt;:1:11<br/>    • In the expression: _<br/>      In the second argument of ‘(<span>&dollar;</span>)’, namely ‘\ k -&gt; _’<br/>      In the expression: Cont <span>&dollar;</span> \ k -&gt; _<br/>    • Relevant bindings include<br/>        k :: b -&gt; r (bound at &lt;interactive&gt;:2:20)<br/>        f :: (b -&gt; Cont r a) -&gt; Cont r b (bound at &lt;interactive&gt;:2:8)<br/>        callCC :: ((b -&gt; Cont r a) -&gt; Cont r b) -&gt; Cont r b (bound at &lt;interactive&gt;:2:1)</pre>
<p>Our definition involves <code>b</code>, but the only <code>b</code> we have available is wrapped up in <code>f</code>. We need to provide an argument of a certain type to <code>f</code>, and then unwrap the result of that? Time to bring out the big guns: multiple typed holes!</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" data-line-number="1"><span class="ot">callCC ::</span> ((b <span class="ot">-&gt;</span> <span class="dt">Cont</span> r a) <span class="ot">-&gt;</span> <span class="dt">Cont</span> r b) <span class="ot">-&gt;</span> <span class="dt">Cont</span> r b</a>
<a class="sourceLine" id="cb18-2" data-line-number="2">callCC f <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> f _1 <span class="fu">&gt;&gt;-</span> _2</a></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<pre class='err-msg'>&lt;interactive&gt;:2:27: error:<br/>    • Found hole: _1 :: b -&gt; Cont r a<br/>      Where: ‘r’ is a rigid type variable bound by<br/>               the type signature for:<br/>                 callCC :: forall b r a. ((b -&gt; Cont r a) -&gt; Cont r b) -&gt; Cont r b<br/>               at &lt;interactive&gt;:1:11<br/>             ‘a’ is a rigid type variable bound by<br/>               the type signature for:<br/>                 callCC :: forall b r a. ((b -&gt; Cont r a) -&gt; Cont r b) -&gt; Cont r b<br/>               at &lt;interactive&gt;:1:11<br/>             ‘b’ is a rigid type variable bound by<br/>               the type signature for:<br/>                 callCC :: forall b r a. ((b -&gt; Cont r a) -&gt; Cont r b) -&gt; Cont r b<br/>               at &lt;interactive&gt;:1:11<br/>      Or perhaps ‘_1’ is mis-spelled, or not in scope<br/>    • In the first argument of ‘f’, namely ‘_1’<br/>      In the first argument of ‘&gt;&gt;-’, namely ‘f _1’<br/>      In the expression: f _1 &gt;&gt;- _2<br/>    • Relevant bindings include<br/>        k :: b -&gt; r (bound at &lt;interactive&gt;:2:20)<br/>        f :: (b -&gt; Cont r a) -&gt; Cont r b (bound at &lt;interactive&gt;:2:8)<br/>        callCC :: ((b -&gt; Cont r a) -&gt; Cont r b) -&gt; Cont r b (bound at &lt;interactive&gt;:2:1)<br/>&lt;interactive&gt;:2:34: error:<br/>    • Found hole: _2 :: b -&gt; r<br/>      Where: ‘r’ is a rigid type variable bound by<br/>               the type signature for:<br/>                 callCC :: forall b r a. ((b -&gt; Cont r a) -&gt; Cont r b) -&gt; Cont r b<br/>               at &lt;interactive&gt;:1:11<br/>             ‘b’ is a rigid type variable bound by<br/>               the type signature for:<br/>                 callCC :: forall b r a. ((b -&gt; Cont r a) -&gt; Cont r b) -&gt; Cont r b<br/>               at &lt;interactive&gt;:1:11<br/>      Or perhaps ‘_2’ is mis-spelled, or not in scope<br/>    • In the second argument of ‘&gt;&gt;-’, namely ‘_2’<br/>      In the expression: f _1 &gt;&gt;- _2<br/>      In the second argument of ‘(<span>&dollar;</span>)’, namely ‘\ k -&gt; f _1 &gt;&gt;- _2’<br/>    • Relevant bindings include<br/>        k :: b -&gt; r (bound at &lt;interactive&gt;:2:20)<br/>        f :: (b -&gt; Cont r a) -&gt; Cont r b (bound at &lt;interactive&gt;:2:8)<br/>        callCC :: ((b -&gt; Cont r a) -&gt; Cont r b) -&gt; Cont r b (bound at &lt;interactive&gt;:2:1)</pre>
<p>Great, <code>k</code> fits perfectly into the second hole. That was easy.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" data-line-number="1"><span class="ot">callCC ::</span> ((b <span class="ot">-&gt;</span> <span class="dt">Cont</span> r a) <span class="ot">-&gt;</span> <span class="dt">Cont</span> r b) <span class="ot">-&gt;</span> <span class="dt">Cont</span> r b</a>
<a class="sourceLine" id="cb19-2" data-line-number="2">callCC f <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> f _ <span class="fu">&gt;&gt;-</span> k</a></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<pre class='err-msg'>&lt;interactive&gt;:2:27: error:<br/>    • Found hole: _ :: b -&gt; Cont r a<br/>      Where: ‘r’ is a rigid type variable bound by<br/>               the type signature for:<br/>                 callCC :: forall b r a. ((b -&gt; Cont r a) -&gt; Cont r b) -&gt; Cont r b<br/>               at &lt;interactive&gt;:1:11<br/>             ‘a’ is a rigid type variable bound by<br/>               the type signature for:<br/>                 callCC :: forall b r a. ((b -&gt; Cont r a) -&gt; Cont r b) -&gt; Cont r b<br/>               at &lt;interactive&gt;:1:11<br/>             ‘b’ is a rigid type variable bound by<br/>               the type signature for:<br/>                 callCC :: forall b r a. ((b -&gt; Cont r a) -&gt; Cont r b) -&gt; Cont r b<br/>               at &lt;interactive&gt;:1:11<br/>    • In the first argument of ‘f’, namely ‘_’<br/>      In the first argument of ‘&gt;&gt;-’, namely ‘f _’<br/>      In the expression: f _ &gt;&gt;- k<br/>    • Relevant bindings include<br/>        k :: b -&gt; r (bound at &lt;interactive&gt;:2:20)<br/>        f :: (b -&gt; Cont r a) -&gt; Cont r b (bound at &lt;interactive&gt;:2:8)<br/>        callCC :: ((b -&gt; Cont r a) -&gt; Cont r b) -&gt; Cont r b (bound at &lt;interactive&gt;:2:1)</pre>
<p>We’re being asked to provide a function that takes one argument and returns a continuation. Let’s fill in the boilerplate and see where that takes us.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb20-1" data-line-number="1"><span class="ot">callCC ::</span> ((b <span class="ot">-&gt;</span> <span class="dt">Cont</span> r a) <span class="ot">-&gt;</span> <span class="dt">Cont</span> r b) <span class="ot">-&gt;</span> <span class="dt">Cont</span> r b</a>
<a class="sourceLine" id="cb20-2" data-line-number="2">callCC f <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> f (\b <span class="ot">-&gt;</span> <span class="dt">Cont</span> <span class="fu">$</span> \k&#39; <span class="ot">-&gt;</span> _) <span class="fu">&gt;&gt;-</span> k</a></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<pre class='err-msg'>&lt;interactive&gt;:2:48: error:<br/>    • Found hole: _ :: r<br/>      Where: ‘r’ is a rigid type variable bound by<br/>               the type signature for:<br/>                 callCC :: forall b r a. ((b -&gt; Cont r a) -&gt; Cont r b) -&gt; Cont r b<br/>               at &lt;interactive&gt;:1:11<br/>    • In the expression: _<br/>      In the second argument of ‘(<span>&dollar;</span>)’, namely ‘\ k' -&gt; _’<br/>      In the expression: Cont <span>&dollar;</span> \ k' -&gt; _<br/>    • Relevant bindings include<br/>        k' :: a -&gt; r (bound at &lt;interactive&gt;:2:42)<br/>        b :: b (bound at &lt;interactive&gt;:2:29)<br/>        k :: b -&gt; r (bound at &lt;interactive&gt;:2:20)<br/>        f :: (b -&gt; Cont r a) -&gt; Cont r b (bound at &lt;interactive&gt;:2:8)<br/>        callCC :: ((b -&gt; Cont r a) -&gt; Cont r b) -&gt; Cont r b (bound at &lt;interactive&gt;:2:1)</pre>
<p>And we’re done! We can get an <code>r</code> by applying <code>k</code> to <code>b</code>.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb21-1" data-line-number="1"><span class="ot">callCC ::</span> ((b <span class="ot">-&gt;</span> <span class="dt">Cont</span> r a) <span class="ot">-&gt;</span> <span class="dt">Cont</span> r b) <span class="ot">-&gt;</span> <span class="dt">Cont</span> r b</a>
<a class="sourceLine" id="cb21-2" data-line-number="2">callCC f <span class="fu">=</span> <span class="dt">Cont</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> f (\b <span class="ot">-&gt;</span> <span class="dt">Cont</span> <span class="fu">$</span> \k&#39; <span class="ot">-&gt;</span> k b) <span class="fu">&gt;&gt;-</span> k</a></code></pre></div>
<p>A closer look at the definition reveals that <code>k'</code> is unused, and this function provides <code>f</code> with the option to exit early if desired, or continue as normal. There’s a good explanation of why and how this works at <a href="https://github.com/quchen/articles/blob/master/cont_monad.md#special-api-function-callcc">the aforementioned article</a>.</p>
<p>Still a bit wary? That’s fair. I like to poke at the definitions, <a href="https://hackage.haskell.org/package/transformers-0.4.3.0/docs/src/Control-Monad-Trans-Cont.html">read the source</a>, look at how Gabriel Gonzales <a href="http://www.haskellforall.com/2014/04/how-continuation-monad-works.html">explains it</a>, and have a cup of tea and think about life for a while. Whatever works for you!</p>
<p>If you looked at the source, you might have noticed something interesting: The definition for the ContT monad transformer is identical! Here it is below.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb22-1" data-line-number="1"><span class="kw">newtype</span> <span class="dt">ContT</span> r m a <span class="fu">=</span> <span class="dt">ContT</span> {<span class="ot"> (&gt;&gt;-) ::</span> (a <span class="ot">-&gt;</span> m r) <span class="ot">-&gt;</span> m r }</a>
<a class="sourceLine" id="cb22-2" data-line-number="2"></a>
<a class="sourceLine" id="cb22-3" data-line-number="3"><span class="kw">instance</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> <span class="dt">Functor</span> (<span class="dt">ContT</span> r m) <span class="kw">where</span></a>
<a class="sourceLine" id="cb22-4" data-line-number="4">    fmap f cont <span class="fu">=</span> <span class="dt">ContT</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> cont <span class="fu">&gt;&gt;-</span> (k <span class="fu">.</span> f)</a>
<a class="sourceLine" id="cb22-5" data-line-number="5"></a>
<a class="sourceLine" id="cb22-6" data-line-number="6"><span class="kw">instance</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> <span class="dt">Applicative</span> (<span class="dt">ContT</span> r m) <span class="kw">where</span></a>
<a class="sourceLine" id="cb22-7" data-line-number="7">    pure a  <span class="fu">=</span> <span class="dt">ContT</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> k a</a>
<a class="sourceLine" id="cb22-8" data-line-number="8">    f <span class="fu">&lt;*&gt;</span> a <span class="fu">=</span> <span class="dt">ContT</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> f <span class="fu">&gt;&gt;-</span> \f&#39; <span class="ot">-&gt;</span> a <span class="fu">&gt;&gt;-</span> \a&#39; <span class="ot">-&gt;</span> k (f&#39; a&#39;)</a>
<a class="sourceLine" id="cb22-9" data-line-number="9"></a>
<a class="sourceLine" id="cb22-10" data-line-number="10"><span class="kw">instance</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> <span class="dt">Monad</span> (<span class="dt">ContT</span> r m) <span class="kw">where</span></a>
<a class="sourceLine" id="cb22-11" data-line-number="11">    a <span class="fu">&gt;&gt;=</span> f <span class="fu">=</span> <span class="dt">ContT</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> a <span class="fu">&gt;&gt;-</span> \a&#39; <span class="ot">-&gt;</span> f a&#39; <span class="fu">&gt;&gt;-</span> \f&#39; <span class="ot">-&gt;</span> k f&#39;</a>
<a class="sourceLine" id="cb22-12" data-line-number="12"></a>
<a class="sourceLine" id="cb22-13" data-line-number="13"><span class="ot">callCC ::</span> ((b <span class="ot">-&gt;</span> <span class="dt">ContT</span> r m a) <span class="ot">-&gt;</span> <span class="dt">ContT</span> r m b) <span class="ot">-&gt;</span> <span class="dt">ContT</span> r m b</a>
<a class="sourceLine" id="cb22-14" data-line-number="14">callCC f <span class="fu">=</span> <span class="dt">ContT</span> <span class="fu">$</span> \k <span class="ot">-&gt;</span> f (\b <span class="ot">-&gt;</span> <span class="dt">ContT</span> <span class="fu">$</span> \k&#39; <span class="ot">-&gt;</span> k b) <span class="fu">&gt;&gt;-</span> k</a></code></pre></div>
<p>I love being able to interact with these definitions like this. This is really how I want to program, and I’d encourage you to try it! The notebook is <a href="https://github.com/vaibhavsagar/notebooks/blob/master/continuations/Continuation.ipynb">here</a> for you to play with if you have IHaskell set up. IHaskell isn’t just useful for programming: I even used it to <a href="https://github.com/vaibhavsagar/notebooks/blob/master/continuations/DiscoveringContinuationsWithTypedHoles.ipynb">write this blog post</a>!</p>
<p>I feel like I should end with something profound about continuations, but I’ll instead link you to <a href="http://teh.id.au/posts/2017/05/10/lambdajam-slides/index.html">this presentation by Tim Humphries</a> and once again nudge you to try typed holes the next time you’re in a Haskell bind (pun very much intended).</p>
<p>Thanks to <a href="https://twitter.com/imccoy">Iain McCoy</a>, <a href="https://jvns.ca/">Julia Evans</a>, and <a href="https://ivanthetricourne.github.io/">Carl Factora</a> for their feedback and suggestions on this post.</p>
]]></summary>
</entry>

</feed>
