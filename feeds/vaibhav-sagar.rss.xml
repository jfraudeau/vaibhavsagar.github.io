<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Vaibhav Sagar's Site - Vaibhav Sagar</title><link>http://www.vaibhavsagar.com/</link><description></description><lastBuildDate>Tue, 24 Jan 2017 00:00:00 +1100</lastBuildDate><item><title>A Simple Key-Value Store with Servant</title><link>http://www.vaibhavsagar.com/blog/2017/01/24/simple-kv-store/</link><description>&lt;p&gt;The &lt;a href="http://haskell-servant.readthedocs.io/en/stable/tutorial/Server.html#nested-apis"&gt;meat of the Servant
tutorial&lt;/a&gt;
starts with an imposing list of language extensions and imports and only gets
more confusing from there. I don't think this gives newbies (i.e. me) the best
first impression of Servant. Let's build the simplest possible key-value store
with it instead.&lt;/p&gt;
&lt;p&gt;We're going …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vaibhav Sagar</dc:creator><pubDate>Tue, 24 Jan 2017 00:00:00 +1100</pubDate><guid isPermaLink="false">tag:www.vaibhavsagar.com,2017-01-24:/blog/2017/01/24/simple-kv-store/</guid></item><item><title>Monad Anti-tutorial</title><link>http://www.vaibhavsagar.com/blog/2016/10/12/monad-anti-tutorial/</link><description>&lt;p&gt;I think becoming familiar with the mechanics of working with monads is more
important than the question of what a monad is. For this reason, I think monad
tutorials solve the wrong problem. I'm giving you a monad anti-tutorial
instead, where I don't try to explain what a monad is …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vaibhav Sagar</dc:creator><pubDate>Wed, 12 Oct 2016 00:00:00 +1100</pubDate><guid isPermaLink="false">tag:www.vaibhavsagar.com,2016-10-12:/blog/2016/10/12/monad-anti-tutorial/</guid></item><item><title>Data Is Code</title><link>http://www.vaibhavsagar.com/blog/2016/09/29/data-is-code/</link><description>&lt;blockquote&gt;
&lt;p&gt;Code is just smart data, and data is just dumb code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Structure and Interpretation of Computer Programs&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'm going to try to convince you that data is code. Strap yourselves in!&lt;/p&gt;
&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Cons"&gt;cons cell&lt;/a&gt; is a way of representing a
pair, and it has two operations, &lt;a href="https://en.wikipedia.org/wiki/CAR_and_CDR"&gt;&lt;code&gt;car&lt;/code&gt; and
&lt;code&gt;cdr&lt;/code&gt;&lt;/a&gt;, to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vaibhav Sagar</dc:creator><pubDate>Thu, 29 Sep 2016 00:00:00 +1000</pubDate><guid isPermaLink="false">tag:www.vaibhavsagar.com,2016-09-29:/blog/2016/09/29/data-is-code/</guid></item><item><title>Using The Writer Monad Outside Logging</title><link>http://www.vaibhavsagar.com/blog/2016/07/24/writer-delta/</link><description>&lt;p&gt;I hadn't given much thought to the Writer monad before today, unlike the Reader and State monads, and part of the reason is that all the tutorials I encountered online focused on using it for logging. Although this is an obvious use case, I haven't had to do much logging …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vaibhav Sagar</dc:creator><pubDate>Sun, 24 Jul 2016 00:00:00 +1000</pubDate><guid isPermaLink="false">tag:www.vaibhavsagar.com,2016-07-24:/blog/2016/07/24/writer-delta/</guid></item><item><title>You Could Have Invented The State Monad</title><link>http://www.vaibhavsagar.com/blog/2016/06/17/haskell-state/</link><description>&lt;p&gt;I'm attempting &lt;a href="https://github.com/NICTA/course"&gt;NICTA/course&lt;/a&gt; a second time. I
gave up the last time because none of the State exercises were making sense and
I found myself leaning so heavily on the solutions that I wasn't actually
learning anything. This time I was much better prepared after watching lots of
&lt;a href="http://www.meetup.com/CanFPG/"&gt;CanFPG …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vaibhav Sagar</dc:creator><pubDate>Fri, 17 Jun 2016 00:00:00 +1000</pubDate><guid isPermaLink="false">tag:www.vaibhavsagar.com,2016-06-17:/blog/2016/06/17/haskell-state/</guid></item><item><title>Git It Going - an Introduction to Git</title><link>http://www.vaibhavsagar.com/blog/2015/05/10/git-it-going/</link><description>&lt;p&gt;I gave a talk on Git to the Canberra Python Users Group on the 7th of May. It
was my first ever technical talk, and I think it went fairly well.&lt;/p&gt;
&lt;p&gt;When writing my presentation, I decided it would be most useful to demonstrate
&lt;code&gt;git&lt;/code&gt; to the audience assuming some …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vaibhav Sagar</dc:creator><pubDate>Sun, 10 May 2015 00:00:00 +1000</pubDate><guid isPermaLink="false">tag:www.vaibhavsagar.com,2015-05-10:/blog/2015/05/10/git-it-going/</guid></item><item><title>Generate A PDF From Your Resume With Travis-CI</title><link>http://www.vaibhavsagar.com/blog/2015/02/26/automate-resume/</link><description>&lt;p&gt;After &lt;a href="http://www.vaibhavsagar.com/blog/2015/02/01/blog-setup/"&gt;automating my blog&lt;/a&gt;, I decided to aim a little
higher and use Travis-CI to automate document generation from my resume. I use
&lt;a href="http://johnmacfarlane.net/pandoc/"&gt;Pandoc&lt;/a&gt; to convert my source resume written
in Markdown to Github-flavoured Markdown, an HTML file for my website, and a
PDF (via LaTeX) that I've spent a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vaibhav Sagar</dc:creator><pubDate>Thu, 26 Feb 2015 00:00:00 +1100</pubDate><guid isPermaLink="false">tag:www.vaibhavsagar.com,2015-02-26:/blog/2015/02/26/automate-resume/</guid></item><item><title>How This Static Blog Uses Travis-CI</title><link>http://www.vaibhavsagar.com/blog/2015/02/01/blog-setup/</link><description>&lt;p&gt;When I started this blog, I was reluctant to put a continuous integration
system like Travis-CI in charge of deployment because it seemed like a
frivolous use of resources and so I settled for the approach outlined
&lt;a href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;here&lt;/a&gt; which
worked reasonably well. As my understanding of continuous integration and the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vaibhav Sagar</dc:creator><pubDate>Sun, 01 Feb 2015 00:00:00 +1100</pubDate><guid isPermaLink="false">tag:www.vaibhavsagar.com,2015-02-01:/blog/2015/02/01/blog-setup/</guid></item><item><title>Walking</title><link>http://www.vaibhavsagar.com/blog/2014/06/04/jakarta-walking/</link><description>&lt;p&gt;So yesterday I took a walk to buy some groceries, and today I took another to
buy some clothes from Uniqlo (as good as everyone says) and watch a movie (Edge
of Tomorrow). This is pretty unremarkable, except that I did this... in
Jakarta! I didn't think it was possible …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vaibhav Sagar</dc:creator><pubDate>Wed, 04 Jun 2014 00:00:00 +1000</pubDate><guid isPermaLink="false">tag:www.vaibhavsagar.com,2014-06-04:/blog/2014/06/04/jakarta-walking/</guid></item><item><title>First Post</title><link>http://www.vaibhavsagar.com/blog/2014/05/20/first-post/</link><description>&lt;p&gt;This is my latest attempt to get a blog going. The advantages this has over my
previous system are shiny Python goodness and my GitHub contributions graph
egging me on.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vaibhav Sagar</dc:creator><pubDate>Tue, 20 May 2014 00:00:00 +1000</pubDate><guid isPermaLink="false">tag:www.vaibhavsagar.com,2014-05-20:/blog/2014/05/20/first-post/</guid></item></channel></rss>