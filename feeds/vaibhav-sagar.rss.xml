<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vaibhav Sagar's Site</title><link>http://www.vaibhavsagar.com/</link><description></description><atom:link href="http://www.vaibhavsagar.com/feeds/vaibhav-sagar.rss.xml" rel="self"></atom:link><lastBuildDate>Sun, 10 May 2015 00:00:00 +1000</lastBuildDate><item><title>Git It Going - an Introduction to Git</title><link>http://www.vaibhavsagar.com/blog/2015/05/10/git-it-going/</link><description>&lt;p&gt;I gave a talk on Git to the Canberra Python Users Group on the 7th of May. It
was my first ever technical talk, and I think it went fairly well.&lt;/p&gt;
&lt;p&gt;When writing my presentation, I decided it would be most useful to demonstrate
&lt;code&gt;git&lt;/code&gt; to the audience assuming some Subversion experience but minimal Git or
Mercurial experience. I ended up presenting my talk with my slides on one
window to the left, my Github repository configured as the remote origin of my
demonstration repository in another window to the right, and a command line
window that I used to interact with my repository in the middle (which was the
most important). My instructions to myself were in a separate window as
speaker's notes. Although I spent some time window juggling, I think this was
the right approach.&lt;/p&gt;
&lt;p&gt;The audience had all types: hardcore Mercurial users, Subversion loyalists,
people using Git as a frontend to other version control systems, and people new
to version control and diffs in general. I spent a fair chunk of the
presentation answering questions or listening to the audience answering each
other's questions, which was exactly how I wanted it.&lt;/p&gt;
&lt;p&gt;I really enjoyed giving this talk, and would happily do so again. My
presentation contents are &lt;a href="https://github.com/vaibhavsagar/git-it-going"&gt;here&lt;/a&gt;,
complete with a &lt;code&gt;.travis.yml&lt;/code&gt; file which uses &lt;code&gt;pandoc&lt;/code&gt; to regenerate the slides
on each push. The slides themselves are
&lt;a href="http://www.vaibhavsagar.com/git-it-going"&gt;available&lt;/a&gt; although I think they're
pretty pointless on their own. If you would like to use these materials, you
are more than welcome to do so.&lt;/p&gt;
&lt;p&gt;Suggestions for improvement and pull requests are very welcome. There are a
couple of things I would have liked to cover that I didn't: &lt;code&gt;git commit
--amend&lt;/code&gt;, &lt;code&gt;git stash&lt;/code&gt;, &lt;code&gt;git cherry-pick&lt;/code&gt;, &lt;code&gt;git rebase&lt;/code&gt;, and so on. The
presentation is not very useful to people who want to know more about these
topics, and it might be possible to add more slides and more instructions in
case people are comfortable with basic &lt;code&gt;git&lt;/code&gt; so I can safely skip the first
couple of sections and instead spend more time talking about branching,
rewriting history and different workflows.&lt;/p&gt;
&lt;p&gt;I would highly recommend giving a technical talk if you have the opportunity.
If it is a topic I am familiar with, or if you'd like to run through the
presentation with me then I'm more than happy to help.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vaibhav Sagar</dc:creator><pubDate>Sun, 10 May 2015 00:00:00 +1000</pubDate><guid>tag:www.vaibhavsagar.com,2015-05-10:blog/2015/05/10/git-it-going/</guid></item><item><title>Generate A PDF From Your Resume With Travis-CI</title><link>http://www.vaibhavsagar.com/blog/2015/02/26/automate-resume/</link><description>&lt;p&gt;After &lt;a href="http://www.vaibhavsagar.com/blog/2015/02/01/blog-setup/"&gt;automating my blog&lt;/a&gt;, I decided to aim a little
higher and use Travis-CI to automate document generation from my resume. I use
&lt;a href="http://johnmacfarlane.net/pandoc/"&gt;Pandoc&lt;/a&gt; to convert my source resume written
in Markdown to Github-flavoured Markdown, an HTML file for my website, and a
PDF (via LaTeX) that I've spent a ludicrous amount of time styling. I do have
all these packages configured on my home computer, but it was becoming tedious
to make changes and commit three separate files instead of just one. I was also
finding it difficult to keep the PDF version of my resume up to date with the
rest of my changes, and I thought it would be an interesting challenge to get
everything set up in a repeatable manner.&lt;/p&gt;
&lt;p&gt;The versions of &lt;code&gt;pandoc&lt;/code&gt; and &lt;code&gt;LaTeX&lt;/code&gt; on Ubuntu 12.04 (which Travis-CI uses for
its workers) are hopelessly out of date, so my first problem was getting the
newest version of &lt;code&gt;pandoc&lt;/code&gt; installed. It is available as a &lt;code&gt;.deb&lt;/code&gt;
&lt;a href="https://github.com/jgm/pandoc/releases"&gt;here&lt;/a&gt;, and Github being Github, this
information is also provided as JSON. There's this really nifty tool called
&lt;code&gt;jq&lt;/code&gt; which is like &lt;code&gt;sed&lt;/code&gt; for JSON so I found and used that. After having a play
with it &lt;a href="https://jqplay.org/"&gt;here&lt;/a&gt; I was able to construct the filter I
needed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;jq -r &amp;#39;.assets[] | .browser_download_url | select(endswith(&amp;quot;deb&amp;quot;))&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The '-r' is there so that &lt;code&gt;wget&lt;/code&gt; won't choke on the output which would
otherwise be surrounded in double quotes. I was then able to install the
downloaded package without any issues. This is what my pre-install script
looked like:&lt;/p&gt;
&lt;p&gt;&lt;script
src="http://gist-it.appspot.com/github.com/vaibhavsagar/resume/blob/master/.ci/prepare.sh"&gt;
&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;I already had a &lt;code&gt;Makefile&lt;/code&gt;, so converting my source to Github-flavoured
Markdown and HTML was as easy as &lt;code&gt;make readme&lt;/code&gt; and &lt;code&gt;make html&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;script
src="http://gist-it.appspot.com/github.com/vaibhavsagar/resume/blob/master/Makefile"&gt;
&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;I decided it would be best if the build process updated my &lt;code&gt;gh-pages&lt;/code&gt; branch
instead of uploading to a different repository:&lt;/p&gt;
&lt;p&gt;&lt;script
src="http://gist-it.appspot.com/github.com/vaibhavsagar/resume/blob/master/.ci/update_pages.sh"&gt;
&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;The next challenge was actually generating my PDF and uploading it to Github
Releases. Travis CI has excellent support for deploying binaries to Releases
but using the &lt;code&gt;travis&lt;/code&gt; gem to configure support makes a completely new Github
token which I thought was a bit redundant. The documentation for &lt;code&gt;travis
encrypt&lt;/code&gt; is pretty comprehensive and I just encrypted my old token and used
that instead. My completed &lt;code&gt;.travis.yml&lt;/code&gt; is as follows:&lt;/p&gt;
&lt;p&gt;&lt;script
src="http://gist-it.appspot.com/github.com/vaibhavsagar/resume/blob/master/.travis.yml"&gt;
&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;And if you'd like to see the process I went through to arrive at this solution,
have a look at &lt;a href="https://github.com/vaibhavsagar/resumate"&gt;the test repo&lt;/a&gt; I
used. The commit log is a fairly accurate representation of my thought process.
If you're trying something similar and you're getting stuck, feel free to reach
out and I'll be more than happy to help.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vaibhav Sagar</dc:creator><pubDate>Thu, 26 Feb 2015 00:00:00 +1100</pubDate><guid>tag:www.vaibhavsagar.com,2015-02-26:blog/2015/02/26/automate-resume/</guid></item><item><title>How This Static Blog Uses Travis-CI</title><link>http://www.vaibhavsagar.com/blog/2015/02/01/blog-setup/</link><description>&lt;p&gt;When I started this blog, I was reluctant to put a continuous integration
system like Travis-CI in charge of deployment and I settled for the approach
outlined
&lt;a href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;here&lt;/a&gt; which
worked reasonably well. However, I recently realised that automating my
deployment would allow me to theoretically create a post using the GitHub web
interface which would automatically get turned into a new post on my blog.
This would allow me to use this blog from any web browser! In other words, I
wanted a convoluted reimplementation of half of a CMS's functionality.&lt;/p&gt;
&lt;p&gt;I found a very helpful &lt;a href="http://zonca.github.io/2013/09/automatically-build-pelican-and-publish-to-github-pages.html"&gt;blog
post&lt;/a&gt;
that covered most of the details I needed. Let me go through the changes I
made.&lt;/p&gt;
&lt;p&gt;First off, I use Python 3 wherever possible so I simplified my
&lt;code&gt;requirements.txt&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;script
src="http://gist-it.appspot.com/github.com/vaibhavsagar/website/blob/master/requirements.txt"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;My &lt;code&gt;.travis.yml&lt;/code&gt; is different too (I removed unnecessary nesting to make it
shorter):&lt;/p&gt;
&lt;p&gt;&lt;script
src="http://gist-it.appspot.com/github.com/vaibhavsagar/website/blob/master/.travis.yml"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;I installed the &lt;code&gt;travis&lt;/code&gt; gem, got a GitHub token, and tried to set the token
with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;travis encrypt GH_TOKEN=LONGTOKENFROMGITHUB --add env.global
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but it didn't recognise my repository until I went to my &lt;a href="https://travis-ci.org/profile/"&gt;Travis-CI
profile&lt;/a&gt;, enabled GitHub access, and enabled it
to check my repository.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;deploy.sh&lt;/code&gt; script was almost the same (change your username):&lt;/p&gt;
&lt;p&gt;&lt;script
src="http://gist-it.appspot.com/github.com/vaibhavsagar/website/blob/master/deploy.sh"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;and that was all the setup I had to do. I then pushed a commit and watched as
Pelican and its dependencies were downloaded, my blog posts were regenerated,
and my GitHub Pages repo was updated. Seems a bit wasteful, but it was
surprisingly easy to get working.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vaibhav Sagar</dc:creator><pubDate>Sun, 01 Feb 2015 00:00:00 +1100</pubDate><guid>tag:www.vaibhavsagar.com,2015-02-01:blog/2015/02/01/blog-setup/</guid></item><item><title>Walking</title><link>http://www.vaibhavsagar.com/blog/2014/06/04/jakarta-walking/</link><description>&lt;p&gt;So yesterday I took a walk to buy some groceries, and today I took another to
buy some clothes from Uniqlo (as good as everyone says) and watch a movie (Edge
of Tomorrow). This is pretty unremarkable, except that I did this... in
Jakarta! I didn't think it was possible. I could definitely get used to this.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vaibhav Sagar</dc:creator><pubDate>Wed, 04 Jun 2014 00:00:00 +1000</pubDate><guid>tag:www.vaibhavsagar.com,2014-06-04:blog/2014/06/04/jakarta-walking/</guid></item><item><title>First Post</title><link>http://www.vaibhavsagar.com/blog/2014/05/20/first-post/</link><description>&lt;p&gt;This is my latest attempt to get a blog going. The advantages this has over my
previous system are shiny Python goodness and my GitHub contributions graph
egging me on.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vaibhav Sagar</dc:creator><pubDate>Tue, 20 May 2014 00:00:00 +1000</pubDate><guid>tag:www.vaibhavsagar.com,2014-05-20:blog/2014/05/20/first-post/</guid></item></channel></rss>